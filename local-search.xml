<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>[Top] We Bare Bears!</title>
    <link href="/webarebears/"/>
    <url>/webarebears/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>杭电 2022 - 4 队训练记录。</p><p>个人题解点表格中比赛名称跳转。</p><h2 id="contests">Contests</h2><table><colgroup><col style="width: 10%" /><col style="width: 61%" /><col style="width: 4%" /><col style="width: 7%" /><col style="width: 8%" /><col style="width: 8%" /></colgroup><thead><tr class="header"><th style="text-align: center;">Date</th><th style="text-align: center;">Contest</th><th style="text-align: center;">Rank</th><th style="text-align: center;">Solved</th><th style="text-align: center;">Upsolved</th><th style="text-align: center;">Solution</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">2022/09/11</td><td style="text-align: center;">2022 CCPC Qualification Round</td><td style="text-align: center;">17</td><td style="text-align: center;">8 / 13</td><td style="text-align: center;">8 / 12</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">2022/09/17</td><td style="text-align: center;">2022 - 2023 ICPC Asia EC RegionalsOnline (I)</td><td style="text-align: center;">25</td><td style="text-align: center;">9 / 12</td><td style="text-align: center;">9 / 12</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">2022/11/06</td><td style="text-align: center;"><ahref="/2022/11/07/Official/CCPC/22-Weihai/">2022 CCPC WeihaiSite</a></td><td style="text-align: center;">12</td><td style="text-align: center;">8 / 13</td><td style="text-align: center;">10 / 13</td><td style="text-align: center;">Done.</td></tr><tr class="even"><td style="text-align: center;">2022/11/13</td><td style="text-align: center;"><ahref="/2022/11/14/Official/CCPC/22-Guangzhou/">2022 CCPC GuangzhouSite</a></td><td style="text-align: center;">12</td><td style="text-align: center;">7 / 13</td><td style="text-align: center;">7 / 13</td><td style="text-align: center;">Done.</td></tr><tr class="odd"><td style="text-align: center;">2022/11/20</td><td style="text-align: center;">2022 - 2023 ICPC Asia HefeiRegional</td><td style="text-align: center;">6</td><td style="text-align: center;">10 / 13</td><td style="text-align: center;">11 / 13</td><td style="text-align: center;"></td></tr></tbody></table><h2 id="virt.-contests">Virt. Contests</h2><table><colgroup><col style="width: 10%" /><col style="width: 61%" /><col style="width: 4%" /><col style="width: 7%" /><col style="width: 8%" /><col style="width: 8%" /></colgroup><thead><tr class="header"><th style="text-align: center;">Date</th><th style="text-align: center;">Contest</th><th style="text-align: center;">Rank</th><th style="text-align: center;">Solved</th><th style="text-align: center;">Upsolved</th><th style="text-align: center;">Solution</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">2022/07/31</td><td style="text-align: center;">2021 CCPC Finals</td><td style="text-align: center;">20</td><td style="text-align: center;">7 / 12</td><td style="text-align: center;">7 / 12</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">2022/08/31</td><td style="text-align: center;">2021 - 2022 ICPC Latin AmericanRegional</td><td style="text-align: center;">21</td><td style="text-align: center;">8 / 13</td><td style="text-align: center;">8 / 13</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">2022/09/07</td><td style="text-align: center;">2019 - 2020 ICPC Northwestern EuropeanRegional</td><td style="text-align: center;">44</td><td style="text-align: center;">9 / 11</td><td style="text-align: center;">9 / 11</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">2022/09/25</td><td style="text-align: center;">XXI Open Cup, Grand Prix of Wroclaw</td><td style="text-align: center;">87</td><td style="text-align: center;">7 / 13</td><td style="text-align: center;">7 / 13</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">2022/10/02</td><td style="text-align: center;">2020 - 2021 ICPC Xiaomi Invitational,Finals</td><td style="text-align: center;">8</td><td style="text-align: center;">6 / 13</td><td style="text-align: center;">6 / 13</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">2022/10/16</td><td style="text-align: center;"><ahref="/2022/10/17/Official/ICPC/19-Latin-American/">2019 - 2020 ICPCLatin American Regional</a></td><td style="text-align: center;">45</td><td style="text-align: center;">10 / 13</td><td style="text-align: center;">11 / 13</td><td style="text-align: center;">Done.</td></tr><tr class="odd"><td style="text-align: center;">2022/10/18</td><td style="text-align: center;"><ahref="/2022/10/19/Official/CCPC/18-Finals/">2018 CCPC Finals</a></td><td style="text-align: center;">26</td><td style="text-align: center;">6 / 12</td><td style="text-align: center;">7 / 12</td><td style="text-align: center;">Done.</td></tr><tr class="even"><td style="text-align: center;">2022/10/19</td><td style="text-align: center;"><ahref="/2022/10/21/Official/ICPC/19-WF/">2019 ICPC World Finals</a></td><td style="text-align: center;">46</td><td style="text-align: center;">5 / 11</td><td style="text-align: center;">6 / 11</td><td style="text-align: center;">Done.</td></tr><tr class="odd"><td style="text-align: center;">2022/10/26</td><td style="text-align: center;">2019 CCPC Finals</td><td style="text-align: center;">24</td><td style="text-align: center;">4 / 12</td><td style="text-align: center;">5 / 12</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">2022/10/29</td><td style="text-align: center;"><ahref="/2022/10/29/Official/ICPC/19-Asia-Hong-Kong/">2019 - 2020 ICPCAsia Hong Kong Regional</a></td><td style="text-align: center;">4</td><td style="text-align: center;">5 / 11</td><td style="text-align: center;">10 / 11</td><td style="text-align: center;">Done.</td></tr><tr class="odd"><td style="text-align: center;">2022/10/31</td><td style="text-align: center;">2022 CCPC Guilin Site</td><td style="text-align: center;">31</td><td style="text-align: center;">7 / 13</td><td style="text-align: center;">10 / 13</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">2022/11/03</td><td style="text-align: center;"><ahref="/2022/11/04/Official/ICPC/18-Asia-Nanjing/">2018-2019 ICPC AsiaNanjing Regional</a></td><td style="text-align: center;">6</td><td style="text-align: center;">9 / 13</td><td style="text-align: center;">11 / 13</td><td style="text-align: center;">Done.</td></tr><tr class="odd"><td style="text-align: center;">2022/11/08</td><td style="text-align: center;"><ahref="/2022/11/09/Official/ICPC/20-Asia-Yinchuan/">2020-2021 ICPC AsiaYinchuan Regional</a></td><td style="text-align: center;">25</td><td style="text-align: center;">6 / 13</td><td style="text-align: center;">9 / 13</td><td style="text-align: center;">Done.</td></tr><tr class="even"><td style="text-align: center;">2022/11/14</td><td style="text-align: center;"><ahref="/2022/11/15/Official/ICPC/22-NERC-Northwestern-Russia/">2022-2023ICPC North Western Russia Regional</a></td><td style="text-align: center;">6</td><td style="text-align: center;">9 / 14</td><td style="text-align: center;">10 / 14</td><td style="text-align: center;">Done.</td></tr></tbody></table><h2 id="multi-university-training">Multi-University Training</h2><table><colgroup><col style="width: 10%" /><col style="width: 61%" /><col style="width: 4%" /><col style="width: 7%" /><col style="width: 8%" /><col style="width: 8%" /></colgroup><thead><tr class="header"><th style="text-align: center;">Date</th><th style="text-align: center;">Contest</th><th style="text-align: center;">Rank</th><th style="text-align: center;">Solved</th><th style="text-align: center;">Upsolved</th><th style="text-align: center;">Solution</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">2022/07/23</td><td style="text-align: center;">2022 Nowcoder Multi-University TrainingContest 2</td><td style="text-align: center;">40</td><td style="text-align: center;">9 / 12</td><td style="text-align: center;">10 / 12</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">2022/07/25</td><td style="text-align: center;"><ahref="/2022/07/26/Nowcoder/nc2022-3/">2022 Nowcoder Multi-UniversityTraining Contest 3</a></td><td style="text-align: center;">16</td><td style="text-align: center;">6 / 10</td><td style="text-align: center;">8 / 10</td><td style="text-align: center;">Done.</td></tr><tr class="odd"><td style="text-align: center;">2022/07/26</td><td style="text-align: center;">2022 HDU Multi-University TrainingContest 3</td><td style="text-align: center;">45</td><td style="text-align: center;">7 / 12</td><td style="text-align: center;">9 / 12</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">2022/07/28</td><td style="text-align: center;">2022 HDU Multi-University TrainingContest 4</td><td style="text-align: center;">79</td><td style="text-align: center;">8 / 11</td><td style="text-align: center;">8 / 11</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">2022/07/30</td><td style="text-align: center;">2022 Nowcoder Multi-University TrainingContest 4</td><td style="text-align: center;">16</td><td style="text-align: center;">10 / 14</td><td style="text-align: center;">11 / 14</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">2022/08/01</td><td style="text-align: center;">2022 Nowcoder Multi-University TrainingContest 5</td><td style="text-align: center;">-</td><td style="text-align: center;">9 / 11</td><td style="text-align: center;">10 / 11</td><td style="text-align: center;">-</td></tr><tr class="odd"><td style="text-align: center;">2022/08/02</td><td style="text-align: center;">2022 HDU Multi-University TrainingContest 5</td><td style="text-align: center;">81</td><td style="text-align: center;">6 / 12</td><td style="text-align: center;">7 / 12</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">2022/08/04</td><td style="text-align: center;">2022 HDU Multi-University TrainingContest 6</td><td style="text-align: center;">73</td><td style="text-align: center;">7 / 12</td><td style="text-align: center;">7 / 12</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">2022/08/06</td><td style="text-align: center;">2022 Nowcoder Multi-University TrainingContest 6</td><td style="text-align: center;">65</td><td style="text-align: center;">6 / 13</td><td style="text-align: center;">8 / 13</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">2022/8/08</td><td style="text-align: center;"><ahref="/2022/08/08/Nowcoder/nc2022-7/">2022 Nowcoder Multi-UniversityTraining Contest 7</a></td><td style="text-align: center;">11</td><td style="text-align: center;">7 / 12</td><td style="text-align: center;">8 / 12</td><td style="text-align: center;">Done.</td></tr><tr class="odd"><td style="text-align: center;">2022/08/09</td><td style="text-align: center;">2022 HDU Multi-University TrainingContest 7</td><td style="text-align: center;">79</td><td style="text-align: center;">6 / 11</td><td style="text-align: center;">9 / 11</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">2022/08/11</td><td style="text-align: center;"><ahref="/2022/08/11/HDU/hdu2022-8/">2022 HDU Multi-University TrainingContest 8</a></td><td style="text-align: center;">29</td><td style="text-align: center;">9 / 13</td><td style="text-align: center;">9 / 13</td><td style="text-align: center;">Done.</td></tr><tr class="odd"><td style="text-align: center;">2022/08/13</td><td style="text-align: center;">2022 Nowcoder Multi-University TrainingContest 8</td><td style="text-align: center;">28</td><td style="text-align: center;">3 / 12</td><td style="text-align: center;">4 / 12</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">2022/08/15</td><td style="text-align: center;">2022 Nowcoder Multi-University TrainingContest 9</td><td style="text-align: center;">24</td><td style="text-align: center;">8 / 11</td><td style="text-align: center;">8 / 11</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">2022/08/16</td><td style="text-align: center;">2022 HDU Multi-University TrainingContest 9</td><td style="text-align: center;">60</td><td style="text-align: center;">6 / 11</td><td style="text-align: center;">6 / 11</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">2022/08/17</td><td style="text-align: center;">2022 Nowcoder Multi-University TrainingContest 0</td><td style="text-align: center;">29</td><td style="text-align: center;">6 / 13</td><td style="text-align: center;">6 / 13</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">2022/08/18</td><td style="text-align: center;">2022 HDU Multi-University TrainingContest 10</td><td style="text-align: center;">14</td><td style="text-align: center;">10 / 12</td><td style="text-align: center;">10 / 12</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">2022/08/20</td><td style="text-align: center;">2022 Nowcoder Multi-University TrainingContest 10</td><td style="text-align: center;">37</td><td style="text-align: center;">5 / 11</td><td style="text-align: center;">5 / 11</td><td style="text-align: center;"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round #383 (Div. 1)</title>
    <link href="/codeforces/cf383/"/>
    <url>/codeforces/cf383/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Div. 2 的 AB 比较水就不记录了。</p><h2 id="a---arpas-loud-owf-and-mehrdads-evil-plan">A - Arpa's loud Owfand Mehrdad's evil plan</h2><p>如果不是排列寄。否则答案必须是奇环环长的倍数，偶环环长一半的倍数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;  <br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 107</span><br><br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<span class="hljs-keyword">return</span> b ? gcd(b, a % b) : a;&#125;<br><br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-keyword">int</span> a[N], deg[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) ++deg[a[i] = rd()];<br>    ll ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (!deg[i]) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        <span class="hljs-keyword">if</span> (!vis[i]) &#123;<br>            <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> p = i; !vis[p]; p = a[p], ++len) vis[p] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (!(len &amp; <span class="hljs-number">1</span>)) len /= <span class="hljs-number">2</span>; <br>            ans = ans / gcd(ans, len) * len;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="b---arpas-weak-amphitheater-and-mehrdads-valuable-hoses">B -Arpa's weak amphitheater and Mehrdad's valuable Hoses</h2><p>并查集求出来每个小团体。对于每个小团体，可选的转移方式为单人/全选。</p><p>背包先用另一个数组 <span class="math inline">\(g\)</span> 记录 <spanclass="math inline">\(f\)</span> 经过所有可能的转移的 <spanclass="math inline">\(\max\)</span> ，再赋值回 <spanclass="math inline">\(f\)</span> 更新，复杂度 <spanclass="math inline">\(O(nw)\)</span>。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;  <br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1007</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DSU</span> &#123;</span><br>    <span class="hljs-keyword">int</span> f[N];<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reset</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) f[i] = i;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">return</span> x == f[x] ? x : f[x] = find(f[x]);&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>        x = find(x); y = find(y);<br>        <span class="hljs-keyword">return</span> x == y ? <span class="hljs-literal">false</span> : (f[x] = y, <span class="hljs-literal">true</span>);<br>    &#125;<br>&#125; dsu;<br><br><span class="hljs-keyword">int</span> w[N], v[N], f[N], g[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; s[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd(), tot = rd();<br>    dsu.reset(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) w[i] = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) v[i] = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) dsu.merge(rd(), rd());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) s[dsu.find(i)].push_back(i);<br>    <br>    <span class="hljs-keyword">auto</span> upd = [&amp;](<span class="hljs-keyword">int</span> W, <span class="hljs-keyword">int</span> V) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = W; i &lt;= tot; ++i) g[i] = max(g[i], f[i - W] + V);<br>    &#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (s[i].empty()) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">int</span> sumw = <span class="hljs-number">0</span>, sumv = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : s[i]) &#123;<br>            sumw += w[x]; sumv += v[x]; upd(w[x], v[x]);<br>        &#125;<br>        upd(sumw, sumv);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= tot; ++i) f[i] = max(f[i], g[i]); <br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f[tot]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="c---arpas-overnight-party-and-mehrdads-silent-entering">C -Arpa’s overnight party and Mehrdad’s silent entering</h2><blockquote><p><span class="math inline">\(2\times n\)</span> 个人（ <spanclass="math inline">\(n\)</span>个情侣）坐成一个环，黑白染色，要求情侣颜色不同，相邻三个中至少有两个颜色。</p></blockquote><p>有意思的构造题。看到黑白染色就两种可能，2-SAT 和二分图，相邻三个的要求写不成 2-SAT 的约束。</p><p>所以就想办法构造二分图，即构造一个图没有奇环。</p><p>每个人只有一个固定的情侣，这启示我们也要找一类边，使得每个点只有一个这样的出边，这样一定是偶环（两类边交替）。</p><p>容易发现让 <span class="math inline">\(2i-1\)</span> 和 <spanclass="math inline">\(2i\)</span>连边即可保证相邻三个颜色不都相同，且符合上述构造要求。二分图染色。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;  <br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-keyword">int</span> ty[N], a[N], b[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (!ty[v])&#123;ty[v] = <span class="hljs-number">3</span> - ty[u]; dfs(v);&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        a[i] = rd(); b[i] = rd();<br>        e[a[i]].pb(b[i]); e[b[i]].pb(a[i]);<br>        <span class="hljs-keyword">int</span> u = i * <span class="hljs-number">2</span>, v = i * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>        e[u].pb(v); e[v].pb(u);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n * <span class="hljs-number">2</span>; ++i)<br>        <span class="hljs-keyword">if</span> (!ty[i]) &#123;ty[i] = <span class="hljs-number">1</span>; dfs(i);&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, ty[a[i]], ty[b[i]]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="d---arpas-letter-marked-tree-and-mehrdads-dokhtar-kosh-paths">D- Arpa’s letter-marked tree and Mehrdad’s Dokhtar-kosh paths</h2><blockquote><p>一棵树每条边上有一个字符 (a - v) ，每次询问 <spanclass="math inline">\(u_i\)</span>子树内最长的简单路径，满足其上的字符重排可形成回文串。</p></blockquote><p><span class="math inline">\((u,v)\)</span> 路径信息 <spanclass="math inline">\(=u\)</span> 到根信息 <spanclass="math inline">\(+v\)</span> 到根信息 <spanclass="math inline">\(-2*lca(u,v)\)</span> 到根信息。</p><p>字符集只有 <span class="math inline">\(22\)</span> ，状压 <spanclass="math inline">\(u\)</span> 到根每个字符的奇偶性 <spanclass="math inline">\(s_u\)</span> ，路径信息即为 <spanclass="math inline">\(s_u\oplus s_v\)</span> （lca信息因为异或两次消掉了）</p><p>考虑路径合并，每个点可能的配对方案只有 <spanclass="math inline">\(23\)</span> 种（异或后为 <spanclass="math inline">\(0\)</span> 或 <spanclass="math inline">\(2\)</span>的幂次，即最多允许一个字符出现奇数次）</p><p>DSU on Tree，统计此前子树的信息，维护每个状压值的最深深度，保证 lca是当前点需整个子树先查询后插入。</p><div class="note note-warning">            <p>坑：1. 子树内最长要和儿子的 <code>ans</code> 取 <spanclass="math inline">\(\max\)</span> ；2.枚举配对的状态时，得保证存在再更新。</p>          </div><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr        first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc        second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp        make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb        push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii       pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pic       pair<span class="hljs-meta-string">&lt;int, char&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500007</span><br><br><span class="hljs-keyword">int</span> ch[N], sta[N], mxd[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">22</span>], ans[N], res;<br><br><span class="hljs-keyword">int</span> sz[N], mxs[N], dep[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; son[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa, <span class="hljs-keyword">int</span> S)</span> </span>&#123;<br>    sz[u] = <span class="hljs-number">1</span>; <br>    dep[u] = dep[fa] + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (u != <span class="hljs-number">1</span>) S ^= (<span class="hljs-number">1</span> &lt;&lt; ch[u]);<br>    sta[u] = S;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) &#123;<br>            dfs(v, u, S); sz[u] += sz[v];<br>            <span class="hljs-keyword">if</span> (sz[v] &gt; sz[mxs[u]]) mxs[u] = v;<br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-comment">// adding information of u into data structures</span><br>    mxd[sta[u]] = max(mxd[sta[u]], dep[u]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-comment">// deleting information of u from data structures</span><br>    mxd[sta[u]] = <span class="hljs-number">0</span>; res = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    upd(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) <span class="hljs-keyword">if</span> (v != fa) upd(v, u);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    del(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) <span class="hljs-keyword">if</span> (v != fa) del(v, u);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updans</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> del)</span> </span>&#123; <br>  <span class="hljs-comment">// 枚举配对的状态需要保证存在！！！</span><br>    <span class="hljs-keyword">if</span> (mxd[sta[u]]) res = max(res, dep[u] + mxd[sta[u]] - <span class="hljs-number">2</span> * del);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">22</span>; ++i) <br>        <span class="hljs-keyword">if</span> (mxd[sta[u] ^ (<span class="hljs-number">1</span> &lt;&lt; i)]) res = max(res, dep[u] + mxd[sta[u] ^ (<span class="hljs-number">1</span> &lt;&lt; i)] - <span class="hljs-number">2</span> * del);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getans</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> del)</span> </span>&#123;<br>    updans(u, del);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) getans(v, del);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dsu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u])<br>        <span class="hljs-keyword">if</span> (v != fa &amp;&amp; v != mxs[u]) &#123;dsu(v, u); del(v, u);&#125;<br>    <span class="hljs-keyword">if</span> (mxs[u]) dsu(mxs[u], u);<br>    updans(u, dep[u]); upd(u); <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u])<br>        <span class="hljs-keyword">if</span> (v != fa &amp;&amp; v != mxs[u]) &#123;<br>            getans(v, dep[u]); <br>            res = max(res, ans[v]);<br>            upd(v, u);<br>        &#125;<br>    ans[u] = res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br>        son[rd()].pb(i);<br>        <span class="hljs-keyword">char</span> c = getchar();<br>        <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isalpha</span>(c)) c = getchar();<br>        ch[i] = (c - <span class="hljs-string">&#x27;a&#x27;</span>);<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>); dsu(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="e---arpas-abnormal-dna-and-mehrdads-deep-interest">E - Arpa’sabnormal DNA and Mehrdad’s deep interest</h2>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Codeforces</category>
      
      <category>Codeforces Round</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Graphs</tag>
      
      <tag>DFS and Similar</tag>
      
      <tag>Knapsack Problem</tag>
      
      <tag>Constructive Algorithm</tag>
      
      <tag>String Suffix Structures</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-2023 ICPC Southern and Volga Russian Regional</title>
    <link href="/official/icpc/22-nerc-southern-and-volga-russian/"/>
    <url>/official/icpc/22-nerc-southern-and-volga-russian/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>比赛地址 ：<a href="https://codeforces.com/contest/1765">CodeforcesContest 1765</a></p><p>待补：CGIJ</p><h2 id="a---access-levels">A - Access Levels</h2><p>定义 <span class="math inline">\(S_i\)</span> 为可以看第 <spanclass="math inline">\(i\)</span> 个文档的人的集合，如果 <spanclass="math inline">\(S_i\subseteq S_j\)</span> ，那么 <spanclass="math inline">\(i\)</span> 和 <spanclass="math inline">\(j\)</span> 可以放到一组。</p><p>最小链覆盖，转换成二分图匹配，然后按照链的顺序依次构造即可。注意需要去重（或<span class="math inline">\(S\)</span> 相同的定序）。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">500</span>;<br><br><span class="hljs-keyword">int</span> n,m,K,ID[maxn+<span class="hljs-number">5</span>],val[maxn+<span class="hljs-number">5</span>],ans[maxn+<span class="hljs-number">5</span>][maxn+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">char</span> pic[maxn+<span class="hljs-number">5</span>][maxn+<span class="hljs-number">5</span>];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[maxn+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> ti,vis[maxn+<span class="hljs-number">5</span>],who[maxn+<span class="hljs-number">5</span>];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ID(x,y) (((x)&lt;&lt;1)-(y))</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span></span>&#123;<br><span class="hljs-keyword">bool</span> fl=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=n;k++) <span class="hljs-keyword">if</span> (pic[k][i]!=pic[k][j]) &#123;fl=<span class="hljs-literal">false</span>;<span class="hljs-keyword">break</span>;&#125;<br><span class="hljs-keyword">if</span> (fl) <span class="hljs-keyword">return</span> i&lt;j;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=n;k++) <span class="hljs-keyword">if</span> (pic[k][i]&lt;pic[k][j]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br><span class="hljs-keyword">if</span> (vis[x]==ti) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>vis[x]=ti;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y:e[x])<br><span class="hljs-keyword">if</span> (!who[y] || Find(who[y]))<br>&#123;who[y]=x;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>ID[i]=ID[<span class="hljs-number">0</span>];val[i]=++val[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">if</span> (who[i])&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br><span class="hljs-keyword">if</span> (pic[j][i]&gt;pic[j][who[i]])<br>ans[j][ID[<span class="hljs-number">0</span>]]=val[i];<br>DFS(who[i]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br><span class="hljs-keyword">if</span> (pic[j][i]==<span class="hljs-string">&#x27;1&#x27;</span>)<br>ans[j][ID[<span class="hljs-number">0</span>]]=val[i];<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,pic[i]+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br><span class="hljs-keyword">if</span> (check(i,j)) e[j].push_back(i);<br>K=m;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++) ti++,K-=Find(i);<br>ti++;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++) vis[who[i]]=ti;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,K);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=K;j++) ans[i][j]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br><span class="hljs-keyword">if</span> (vis[i]&lt;ti) ID[<span class="hljs-number">0</span>]++,val[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>,DFS(i);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,ID[i]),i&lt;m?<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>):<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,val[i]),i&lt;m?<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>):<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=K;j++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,ans[i][j]),j&lt;K?<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>):<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="b---broken-keyboard">B - Broken Keyboard</h2><p>签到。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1007</span><br><br><span class="hljs-keyword">char</span> s[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = <span class="hljs-number">1</span>, i = <span class="hljs-number">1</span>; i &lt;= n; ++t) &#123;<br><span class="hljs-keyword">if</span> (t &amp; <span class="hljs-number">1</span>) ++i;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (s[i] != s[i + <span class="hljs-number">1</span>]) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>); <span class="hljs-keyword">return</span>;&#125;<br>i += <span class="hljs-number">2</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="c---card-guessing">*C - Card Guessing</h2><h2 id="d---watch-the-videos">D - Watch the Videos</h2><blockquote><p>有 <span class="math inline">\(n\)</span> 个 <spanclass="math inline">\(a_i\)</span> ，总价格是 <spanclass="math inline">\(\sum (a_i+1)\)</span> ，将他们排序，如果相邻的两个<span class="math inline">\(a_i+a_j\le m\)</span> ，答案减少 <spanclass="math inline">\(1\)</span> 。问答案最小多少。</p></blockquote><p>很奇怪的贪心题。双指针维护，尽量保证小的数字两侧都被用到即可，大的组合不上就不用管了。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><br><span class="hljs-keyword">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(), m = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i] = rd();<br>sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n);<br>ll ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = n;<br><span class="hljs-keyword">for</span> (; l &lt; r; ++l) &#123;<br><span class="hljs-keyword">while</span> (a[r] + a[l] &gt; m &amp;&amp; r &gt; l) &#123;ans += a[r] + <span class="hljs-number">1</span>; --r;&#125;<br><span class="hljs-keyword">if</span> (r &gt; l) ans += a[r--];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>ans += a[l] + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (a[r] + a[l] &gt; m &amp;&amp; r &gt; l) &#123;ans += a[r] + <span class="hljs-number">1</span>; --r;&#125;<br><span class="hljs-keyword">if</span> (r &gt; l) --ans;<br><span class="hljs-keyword">else</span> &#123;++l; <span class="hljs-keyword">break</span>;&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (l &lt;= r) ans += a[l] + <span class="hljs-number">1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="e---exchange">E - Exchange</h2><p>签到。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> te,A,B,C;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;te);te;te--)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;A,&amp;B,&amp;C);<br><span class="hljs-keyword">if</span> (B&lt;=C) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,(A+B<span class="hljs-number">-1</span>)/B);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="f---chemistry-lab">*F - Chemistry Lab</h2><p>假设已经选好了方案，那么按照 <spanclass="math inline">\((x_i,c_i)\)</span>建立凸包，想要兑出最贵的百分比为 <span class="math inline">\(x\)</span>的药水，一定取在上凸壳上。</p><p>由于均匀分布进行随机，因此上凸壳和 <spanclass="math inline">\(x\)</span> 轴夹住的区域面积再 <spanclass="math inline">\(\times k\)</span> 就是答案，dp 上凸壳即可。</p><p>将点按照 <span class="math inline">\(x\)</span>从小到大排序，分段算贡献（梯形面积），注意第一次选取特殊，只有买的代价，没有收益。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 5007</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><span class="hljs-keyword">double</span> x, w, c;&#125; sol[N];<br><br><span class="hljs-keyword">double</span> f[N], ans;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), k = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;sol[i].x = rd(); sol[i].w = rd(); sol[i].c = rd();&#125;<br>    sort(sol + <span class="hljs-number">1</span>, sol + <span class="hljs-number">1</span> + n, [&amp;](<span class="hljs-keyword">const</span> node &amp;a, <span class="hljs-keyword">const</span> node &amp;b)&#123;<span class="hljs-keyword">return</span> a.x &lt; b.x;&#125;);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        f[i] = -sol[i].w; <span class="hljs-comment">// the first one</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; i; ++j) <span class="hljs-comment">// the previous one is j</span><br>            f[i] = max(f[i], f[j] + (sol[i].c + sol[j].c) * (sol[i].x - sol[j].x) * k / <span class="hljs-number">200.0</span> - sol[i].w);<br>        ans = max(ans, f[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.15lf\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="g---guess-the-string">*G - Guess the String</h2><h2 id="h---hospital-queue">*H - Hospital Queue</h2><blockquote><p>将 <span class="math inline">\(n\)</span> 个人排队，第 <spanclass="math inline">\(i\)</span> 个人一定要站在前 <spanclass="math inline">\(p_i\)</span> 个位置，还有若干限制形如 <spanclass="math inline">\(a_i\)</span> 站在 <spanclass="math inline">\(b_i\)</span> 之前。</p><p>现在对于每个人询问，如果只要求其他人位置合法，这个人能站到最靠前的位置是哪里。保证存在一个合法方案。</p></blockquote><p>先考虑如何求出一个合法方案：用堆代替队列进行拓扑排序，<spanclass="math inline">\(p_i\)</span> 小的优先。</p><p>但对于每个人求最优方案时，很难想办法确定 <spanclass="math inline">\(i\)</span> 的优先级。因此考虑从后往前放。</p><p>建图 <span class="math inline">\(b_i\to a_i\)</span>，然后用堆代替队列进行拓扑排序，<span class="math inline">\(p_i\)</span>大的优先，从后往前放。</p><p>对于询问第 <span class="math inline">\(i\)</span> 个人，考虑强制不让<span class="math inline">\(i\)</span>进队，则某个位置别人都放不了的时候就必须放 <spanclass="math inline">\(i\)</span> 了，复杂度 <spanclass="math inline">\(O(n^2\log n)\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 2007</span><br><br><span class="hljs-keyword">int</span> deg[N], Deg[N], p[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-built_in">priority_queue</span>&lt;pii&gt; q;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(), m = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) p[i] = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br><span class="hljs-keyword">int</span> a = rd(), b = rd();<br>++Deg[a]; e[b].push_back(a);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">while</span> (!q.empty()) q.pop();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) &#123;<br>deg[j] = Deg[j]; <br><span class="hljs-keyword">if</span> (!deg[j] &amp;&amp; j != i) q.push(&#123;p[j], j&#125;);<br>&#125;<br><span class="hljs-keyword">int</span> res = n;<br><span class="hljs-keyword">while</span> (!q.empty()) &#123;<br><span class="hljs-keyword">int</span> u = q.top().second; q.pop();<br><span class="hljs-keyword">if</span> (p[u] &lt; res) <span class="hljs-keyword">break</span>;<br>--res;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) &#123;<br>--deg[v];<br><span class="hljs-keyword">if</span> (!deg[v] &amp;&amp; v != i) q.push(&#123;p[v], v&#125;);<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, res);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="i---infinite-chess">*I - Infinite Chess</h2><h2 id="j---hero-to-zero">*J - Hero to Zero</h2><h2 id="k---torus-path">K - Torus Path</h2><p>手玩一下发现路径一定会漏掉一个副对角线上的格子，且可以做到只漏掉任意一个，答案就是全部的和减去副对角线最小值。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200</span>;<br><br><span class="hljs-keyword">int</span> n;LL ans;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">int</span> MIN=<span class="hljs-number">2e9</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>,x;j&lt;=n;j++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>ans+=x;<br><span class="hljs-keyword">if</span> (i+j==n+<span class="hljs-number">1</span>) MIN=min(MIN,x);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans-MIN);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="l---project-manager">L - Project Manager</h2><p>STL小清新模拟题，注意一定要维护出每天上班且当前有任务要做的集合，否则一定可以卡掉。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">trans</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> s[<span class="hljs-number">20</span>];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (s[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;M&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (s[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;T&#x27;</span> &amp;&amp; s[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;u&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (s[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;W&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (s[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;T&#x27;</span> &amp;&amp; s[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;h&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br><span class="hljs-keyword">if</span> (s[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;F&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br><span class="hljs-keyword">return</span> (s[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;a&#x27;</span> ? <span class="hljs-number">5</span> : <span class="hljs-number">6</span>);<br>&#125;<br><br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; holiday, order[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; workday[N];<br><br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s[<span class="hljs-number">7</span>], add[<span class="hljs-number">7</span>], del[<span class="hljs-number">7</span>];<br><br><span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;, greater&lt;<span class="hljs-keyword">int</span>&gt; &gt; work[N];<br><br><span class="hljs-built_in">vector</span>&lt;pii&gt; addwork;<br><br><span class="hljs-keyword">int</span> ans[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(), m = rd(), k = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) workday[i].push_back(trans());<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) holiday.push(rd());<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) order[i].push(rd());<br><span class="hljs-keyword">int</span> u = order[i].front(); order[i].pop();<br>work[u].push(i);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> d : workday[u]) s[d].insert(u);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, cnt = <span class="hljs-number">1</span>, K = k; K; ++cnt, i = (i == <span class="hljs-number">6</span> ? <span class="hljs-number">0</span> : i + <span class="hljs-number">1</span>)) &#123;<br><span class="hljs-keyword">if</span> (!holiday.empty() &amp;&amp; cnt == holiday.front()) &#123;holiday.pop(); <span class="hljs-keyword">continue</span>;&#125;<br>addwork.clear();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; ++j) &#123;add[j].clear(); del[j].clear();&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : s[i]) &#123;<br><span class="hljs-keyword">int</span> id = work[x].top(); work[x].pop();<br><span class="hljs-keyword">if</span> (work[x].empty()) <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> d : workday[x]) del[d].insert(x);<br><span class="hljs-keyword">if</span> (order[id].empty()) &#123;--K; ans[id] = cnt;&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">int</span> nxt = order[id].front(); order[id].pop();<br>addwork.push_back(<span class="hljs-built_in">make_pair</span>(nxt, id));<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> d : workday[nxt]) add[d].insert(nxt);<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; ++j) <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : del[j]) s[j].erase(x);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; ++j) <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : add[j]) s[j].insert(x);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [x, id] : addwork) work[x].push(id);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ans[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="m---minimum-lcm">M - Minimum LCM</h2><blockquote><p>给定 <span class="math inline">\(n\)</span> ，找一对 <spanclass="math inline">\(a+b=n\)</span> ，最小化 <spanclass="math inline">\(\text{lcm}(a, b)\)</span></p></blockquote><p>猜测 <span class="math inline">\(a\)</span> 是 <spanclass="math inline">\(b\)</span> 的倍数时最优，所以检查 <spanclass="math inline">\(n\)</span> 的所有因数即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1007</span><br><br><span class="hljs-keyword">char</span> s[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">1e9</span>;<br><span class="hljs-keyword">int</span> lim = <span class="hljs-built_in">sqrt</span>(n);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= lim; ++i) <br><span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span> (n / i &gt; <span class="hljs-number">1</span>) ans = min(ans, i * (n / i - <span class="hljs-number">1</span>));<br><span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">1</span>) ans = min(ans, (n / i) * (i - <span class="hljs-number">1</span>));<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, ans, n - ans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="n---number-reduction">N - Number Reduction</h2><blockquote><p>一个很长的数 <span class="math inline">\(x\)</span>（保证以非 <spanclass="math inline">\(0\)</span> 开头），删掉恰好 <spanclass="math inline">\(k\ (k&lt; \lfloor \log_{10} x\rfloor)\)</span>位，使得剩下的数值最小，<strong>且没有前导零</strong>。</p></blockquote><p>如果没有 <span class="math inline">\(0\)</span>就是一个常考面试题，从前往后扫，遇到 <spanclass="math inline">\(x_i&gt;x_{i+1}\)</span>即前面的数位比后面大，就把前面的删掉即可。</p><p>但是 <span class="math inline">\(0\)</span> 的数位一定不能删吗？形如<span class="math inline">\(x000y....\)</span> 的数字，如果 <spanclass="math inline">\(x&gt;y\)</span> ，且 <spanclass="math inline">\(k\)</span> 足够的时候，是应该把前缀 <spanclass="math inline">\(x000\)</span> 删掉的。</p><p>所以每次当前位置非 <span class="math inline">\(0\)</span>且前一个位置是 <span class="math inline">\(0\)</span>的时候，特判一下是否应该（且能够）把前缀删掉。</p><p>最后多余的次数从后往前删即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-keyword">char</span> s[N];<br><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; a;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>a.clear();<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>); <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">int</span> k = rd();<br>a.pb(s[<span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">int</span> x = s[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-keyword">if</span> (!k) &#123;a.pb(x); <span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">if</span> (x) &#123;<br><span class="hljs-keyword">while</span> (!a.empty() &amp;&amp; k &amp;&amp; a.back() &gt; x) &#123;a.pop_back(); --k;&#125;<br><span class="hljs-keyword">if</span> (!a.empty() &amp;&amp; a.back() == <span class="hljs-number">0</span> &amp;&amp; k &gt;= a.size() &amp;&amp; x &lt; a.front()) &#123;k -= a.size(); a.clear();&#125;<br>a.push_back(x);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">while</span> (a.size() &gt; <span class="hljs-number">1</span> &amp;&amp; k &amp;&amp; a.back() &gt; <span class="hljs-number">0</span>) &#123;a.pop_back(); --k;&#125;<br>a.push_back(x);<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (; k; --k) a.pop_back();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : a) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, x); <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Official Contests</category>
      
      <category>ICPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Geometry</tag>
      
      <tag>Graphs</tag>
      
      <tag>Dynamic Programming</tag>
      
      <tag>Greedy</tag>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Circle Inversion</title>
    <link href="/algorithms/circle-inversion/"/>
    <url>/algorithms/circle-inversion/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="analysis">Analysis</h2><p>二维平面上，给定反演中心 <span class="math inline">\(O\)</span>和半径 <span class="math inline">\(r\)</span> ，定义点 <spanclass="math inline">\(P\)</span> 基于圆 <spanclass="math inline">\((O,r)\)</span> 的反演变换：<spanclass="math inline">\(P\mapsto P&#39; : |OP||OP&#39;|=r^2\)</span>。</p><ul><li>圆内点反演完在圆外，圆外点反演完在圆内，圆上点是反演变换的不动点。</li></ul><p>进一步的我们可以定义图形基于圆 <span class="math inline">\(O\)</span>的反演（即变换后的点集），容易发现一些结论：</p><ol type="1"><li>不过 <span class="math inline">\(O\)</span> 的圆 <spanclass="math inline">\(\Leftrightarrow\)</span> 不过 <spanclass="math inline">\(O\)</span> 的圆（先求出在 <spanclass="math inline">\(O\)</span>与圆心连线上直径两个端点的反演点再恢复，<strong>注意圆心反演后不是圆心！！</strong>）</li><li>过 <span class="math inline">\(O\)</span> 的直线 <spanclass="math inline">\(\Leftrightarrow\)</span> 过 <spanclass="math inline">\(O\)</span>的直线（且是同一条直线，不会有变化）</li><li>过 <span class="math inline">\(O\)</span> 的圆 <spanclass="math inline">\(\Leftrightarrow\)</span> 不过 <spanclass="math inline">\(O\)</span> 的直线（先求出 <spanclass="math inline">\(O\)</span>对应直径的另一个端点的反演点，再求垂直于 <spanclass="math inline">\(O\)</span> 与反演点连线的直线）<ul><li>圆内区域反演完之后是反演直线的不包含 <spanclass="math inline">\(O\)</span> 的半平面</li></ul></li><li>反演前两图形的相对关系，反演后不变（反演前相切，反演后也相切；相交等以此类推）<ul><li>特殊的，两切于 <span class="math inline">\(O\)</span>的圆反演后是两平行直线（切点 <span class="math inline">\(O\)</span>反演后在无穷远处，即两平行直线交于无穷远处）</li></ul></li></ol><p>反演半径一般选取点到中心距离的几何平均。<ahref="">完整计算几何模版见这里。</a></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">C</span> &#123;</span><br>    P c; <span class="hljs-keyword">double</span> r;<br>    C(letp &amp;c = zero, <span class="hljs-keyword">double</span> r = <span class="hljs-number">0.0</span>) : c(c), r(r) &#123;&#125;<br><br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> == (letc &amp;a) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> c == a.c &amp;&amp; z(r - a.r);&#125;<br>    <br>    <span class="hljs-comment">// 点与圆的关系 : -1 圆上 | 0 圆外 | 1 圆内</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">is_in</span><span class="hljs-params">(letp &amp;p)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">double</span> d = p.dis(c); <span class="hljs-keyword">return</span> z(d - r) ? <span class="hljs-number">-1</span> : d &lt; r - eps;&#125;<br>    <br>    <span class="hljs-function">P <span class="hljs-title">inverse</span><span class="hljs-params">(letp &amp;p)</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        assert(p != c);<br>        <span class="hljs-keyword">const</span> P dlt = p - c;<br>        <span class="hljs-keyword">return</span> c + dlt * (r * r / dlt.norm());<br>    &#125;<br> <br>    tuple&lt;int, C, L&gt; inverse(letl &amp;l) const &#123;<br>        letc null_c = C(zero, <span class="hljs-number">0.0</span>);<br>        letl null_l = L(zero, zero);<br>        <span class="hljs-keyword">if</span> (l.ori(c) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> mt(<span class="hljs-number">2</span>, null_c, l);<br>        letp v = (l.ori(c) == <span class="hljs-number">1</span> ? P&#123;l.v.y, -l.v.x&#125; : P&#123;-l.v.y, l.v.x&#125;);<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> d = r * r / l.dis(c);<br>        letp p = c + unit(v) * d;<br>        <span class="hljs-keyword">return</span> mt(<span class="hljs-number">1</span>, C&#123;(c + p) / <span class="hljs-number">2</span>, d / <span class="hljs-number">2</span>&#125;, null_l);<br>    &#125;<br>         <br>    tuple&lt;int, C, L&gt; inverse(letc &amp;a) const &#123;<br>        letc null_c = C(zero, <span class="hljs-number">0.0</span>);<br>        letl null_l = L(zero, zero);<br>        letp v = a.c - c;<br>        <span class="hljs-keyword">if</span> (a.is_in(c) == <span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> d = r * r / (a.r + a.r);<br>            <span class="hljs-keyword">return</span> mt(<span class="hljs-number">2</span>, null_c, L&#123;c + unit(v) * d, &#123;-v.y, v.x&#125;&#125;);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (c == a.c) <span class="hljs-keyword">return</span> mt(<span class="hljs-number">1</span>, C&#123;c, r * r / a.r&#125;, null_l);<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> dis = <span class="hljs-built_in">abs</span>(v);<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> k1 = r * r / (dis - a.r), k2 = r * r / (dis + a.r);<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> d = (k1 + k2) / <span class="hljs-number">2</span>, rad = (k1 - k2) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">return</span> mt(<span class="hljs-number">1</span>, C&#123;c + v * (d / dis), rad&#125;, null_l);<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="cf-77-e---martian-food">CF 77 E - Martian Food</h2><blockquote><p>给定两个内切的圆，第三个圆位于两圆心连线且与两圆相切，第四个圆开始和前三个圆相切，以此类推。</p><p>求第 <span class="math inline">\(k\)</span> 个圆的半径。多组 <spanclass="math inline">\(t\le 10^4,r,R\le 10^4,k\le 10^4\)</span> 。</p></blockquote><p>以两圆切点反演，前两个圆变成平行直线，后面的圆都与两平行线相切，第三个圆心反演后位于前两圆心连线。</p><p>然后朝一侧找到第 <span class="math inline">\(k\)</span>个圆，再反演回来即得到了答案。<strong>注意不能反演圆心，圆心反演完不是圆心！</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> C O = C(zero, <span class="hljs-number">20000</span>);<br>    <span class="hljs-keyword">double</span> r1 = rd(), r2 = rd();<br>    L l1 = get&lt;<span class="hljs-number">2</span>&gt;(O.inverse(C(P(r1, <span class="hljs-number">0</span>), r1)));<br>    L l2 = get&lt;<span class="hljs-number">2</span>&gt;(O.inverse(C(P(r2, <span class="hljs-number">0</span>), r2)));<br>    C res = C(P((l1.p.x + l2.p.x) / <span class="hljs-number">2</span>, l1.dis(l2) * rd()), l1.dis(l2) / <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10lf\n&quot;</span>, get&lt;<span class="hljs-number">1</span>&gt;(O.inverse(res)).r);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="hdu-6158---the-designer">HDU 6158 - The Designer</h2><blockquote><p>求类似上一题图的前 <span class="math inline">\(n\ (n\le10^7)\)</span> 个圆的面积和，多组 <span class="math inline">\((t\le10^3)\)</span> 。</p></blockquote><p>判一下如果剩下的圆<strong>面积和</strong>足够小就不用做了，注意不是面积足够小，而是面积和。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> C O = C(zero, <span class="hljs-number">200</span>);<br>    <span class="hljs-keyword">double</span> r1 = rd(), r2 = rd();<br>    L l1 = get&lt;<span class="hljs-number">2</span>&gt;(O.inverse(C(P(r1, <span class="hljs-number">0</span>), r1)));<br>    L l2 = get&lt;<span class="hljs-number">2</span>&gt;(O.inverse(C(P(r2, <span class="hljs-number">0</span>), r2)));<br>    <span class="hljs-keyword">double</span> dlt = l1.dis(l2);<br>    C res = C((l1.p + l2.p) / <span class="hljs-number">2</span>, dlt / <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">double</span> ans = get&lt;<span class="hljs-number">1</span>&gt;(O.inverse(res)).area();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, t = <span class="hljs-number">0</span>, n = rd(); i &lt; n; ++i) &#123;<br>        (i &amp; <span class="hljs-number">1</span>) ? ++t, res.c.y = t * dlt : res.c.y = -t * dlt; <br>        <span class="hljs-keyword">double</span> add = get&lt;<span class="hljs-number">1</span>&gt;(O.inverse(res)).area();<br>        <span class="hljs-keyword">if</span> (add * (n - i) &lt; <span class="hljs-number">1e-7</span>) <span class="hljs-keyword">break</span>; ans += add;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.5lf\n&quot;</span>, ans);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2id="icpc-nanning-online---finding-the-radius-for-an-inserted-circle">2017ICPC Nanning Online - Finding the Radius for an Inserted Circle</h2><blockquote><p>三个半径为 <span class="math inline">\(R\)</span>的圆互相切，在中间的弧形边三角形中塞小圆，然后朝着一个角塞，问第 <spanclass="math inline">\(k\)</span> 个的半径。</p></blockquote><p>反演点就是会往那个角里塞小圆的两个圆的切点。</p><p>三个圆变成一对平行直线+一个夹中间的圆，然后朝反方向找第 <spanclass="math inline">\(k\)</span> 个圆即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> ans[<span class="hljs-number">11</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> t; <span class="hljs-keyword">double</span> r;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%lf&quot;</span>, &amp;t, &amp;r);<br>    C O = C(zero, r * <span class="hljs-number">2</span>);<br>    C c = get&lt;<span class="hljs-number">1</span>&gt;(O.inverse(C(P(<span class="hljs-number">0</span>, -<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">3</span>) * r), r)));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; ++i) &#123;c.c.y -= r * <span class="hljs-number">4</span>; ans[i] = <span class="hljs-built_in">floor</span>(get&lt;<span class="hljs-number">1</span>&gt;(O.inverse(c)).r + <span class="hljs-number">1e-8</span>);&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, n; i &lt;= t; ++i) &#123;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, n, ans[n]);&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="icpc-hangzhou---problem-of-apollonius">2013 ICPC Hangzhou -Problem of Apollonius</h2><blockquote><p>求过指定点且与给定两个圆相外切的所有的圆。</p></blockquote><p>关于指定点反演，所求答案就是两个圆的公切线。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    C c1; c1.c.x = rd(); c1.c.y = rd(); c1.r = rd();<br>    C c2; c2.c.x = rd(); c2.c.y = rd(); c2.r = rd();<br>    C O; O.c.x = rd(); O.c.y = rd(); O.r = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">vector</span>&lt;L&gt; s = get&lt;<span class="hljs-number">1</span>&gt;(O.inverse(c1)).tangent(get&lt;<span class="hljs-number">1</span>&gt;(O.inverse(c2)));<br>    <span class="hljs-built_in">vector</span>&lt;C&gt; ans;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : s) &#123;<br>        C inv = get&lt;<span class="hljs-number">1</span>&gt;(O.inverse(x));<br>        <span class="hljs-keyword">if</span> (inv.relation(c1) == <span class="hljs-number">1</span> &amp;&amp; inv.relation(c2) == <span class="hljs-number">1</span>) ans.push_back(inv);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, (<span class="hljs-keyword">int</span>)ans.size());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : ans) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10lf %.10lf %.10lf\n&quot;</span>, x.c.x, x.c.y, x.r);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="cf-372-e---drawing-circles-is-fun">CF 372 E - Drawing Circles isFun</h2><blockquote><p>给定二维平面内 <span class="math inline">\(n\)</span> 个点,其中任意两点所在的直线上都不包含原点 <spanclass="math inline">\(O\)</span> 。</p><p>求集合 <span class="math inline">\(\{\left(P_1, P_2\right)\left(P_3,P_4\right) \ldots\left(P_{2 k-1}, P_{2 k}\right)\}\)</span>的个数（<span class="math inline">\(P_i\)</span> 取自给定的 <spanclass="math inline">\(n\)</span> 个点），满足:</p><ol type="1"><li><p>不存在 <span class="math inline">\(i \neq j,P_i=P_j\)</span>.</p></li><li><p>对于任意 <span class="math inline">\(i \neq j,\left(P_{2 i-1},P_{2 i}\right)\left(P_{2 j-1}, P_{2 j}\right)\)</span> 满足：</p><p>圆 <span class="math inline">\(O P_{2 i-1} P_{2 j-1}\)</span> 和圆<span class="math inline">\(O P_{2 i} P_{2 j}\)</span> 只有一个交点, 圆<span class="math inline">\(O P_{2 i-1} P_{2 j}\)</span> 和圆 <spanclass="math inline">\(O P_{2 i} P_{2 j-1}\)</span>只有一个交点。</p></li></ol></blockquote><p>所有圆都过 <span class="math inline">\(O\)</span>且只有一个交点，所以都相切在 <span class="math inline">\(O\)</span>。</p><p>反演之后就是平行直线，即要求 <span class="math inline">\(P_{2 i-1}P_{2 j-1}\parallel P_{2 i} P_{2 j},\ P_{2 i-1} P_{2 j}\parallel P_{2 i}P_{2 j-1}\)</span> ，即 <span class="math inline">\(P_{2 i-1} P_{2j-1}P_{2 i} P_{2 j}\)</span> 是平行四边形。</p><p>平行四边形的等价条件是对角中点重合且边不重合，换言之，计数选出若干点对，反演后中点重合在同一个点，且不能重合。</p><p>处理出来 <span class="math inline">\(n^2\)</span>个线段的中点。对每个中点，处理出来同角度的每个方向有多少个（即重合）。</p><p>相当于 <span class="math inline">\(n\)</span>个集合里挑若干个（多于一个），每个集合里只能拿至多一个的方案数，即 <spanclass="math inline">\(\prod (size_i+1) - \sum size_i - 1\)</span> 。</p><ul><li><p><strong>坑1：</strong> 实现用pair(中点，方向向量）保存信息，为了保证排序正确（中点相同的挨在一起，相同中点按照方向极角序），不能出现反向的方向向量（共线的必须同一方向），所以<span class="math inline">\(x\)</span> 为负的时候取反，<strong><spanclass="math inline">\(x=0\)</span> 且 <spanclass="math inline">\(y&lt;0\)</span> 的时候取反</strong> 。</p></li><li><p><strong>坑2：</strong> 精度要求高，坐标范围 <spanclass="math inline">\([\frac{1}{50},50]\)</span>，反演半径最好取几何平均 <span class="math inline">\(1\)</span>。</p></li><li><p><strong>坑3：</strong> 最后对集合还要 <code>count</code>一次。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 1000000007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ppp pair<span class="hljs-meta-string">&lt;P, P&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(); <br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;P&gt; <span class="hljs-title">p</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-built_in">vector</span>&lt;ppp&gt; s;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">double</span> a = rd(), b = rd(), c = rd(), d = rd();<br>        p[i].x = a / b; p[i].y = c / d; <br>        p[i] = p[i] / p[i].norm();<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; n; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; ++j) &#123;<br>            P u = p[i], v = p[j];<br>            P mid = (u + v) / <span class="hljs-number">2</span>, dir = u - v; <br>            <span class="hljs-keyword">if</span> (z(dir.x)) &#123;<span class="hljs-keyword">if</span> (dir.y &lt; <span class="hljs-number">0</span>) dir = -dir;&#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dir.x &lt; -eps) dir = -dir; <br>            s.push_back(mp(mid, dir));<br>        &#125;<br>    sort(s.begin(), s.end(), [&amp;](ppp &amp;a, ppp &amp;b) &#123;<br>      <span class="hljs-keyword">return</span> (a.fr != b.fr) ? a.fr &lt; b.fr : argcmp()(a.sc, b.sc);<br>    &#125;);<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; cnt;<br>    <span class="hljs-keyword">auto</span> count = [&amp;]() &#123;<br>        <span class="hljs-keyword">int</span> prod = <span class="hljs-number">1</span>, sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : cnt) &#123;<br>            prod = <span class="hljs-number">1l</span>l * prod * (x + <span class="hljs-number">1</span>) % mod;<br>            sum = (sum + x) % mod;<br>        &#125;<br>        <span class="hljs-keyword">int</span> res = (prod + mod - sum - <span class="hljs-number">1</span>) % mod;<br>        ans = (ans + res) % mod;<br>        cnt.clear();<br>    &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; s.size(); ++i) <br>        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; s[i].fr == s[i - <span class="hljs-number">1</span>].fr) &#123;<br>            <span class="hljs-keyword">if</span> (para(s[i].sc, s[i - <span class="hljs-number">1</span>].sc)) ++cnt.back();<br>            <span class="hljs-keyword">else</span> cnt.push_back(<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;count(); cnt.push_back(<span class="hljs-number">1</span>);&#125;<br>    count();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="icpc-hefei-f---rescue">2022 ICPC Hefei F - Rescue</h2><blockquote><p>给定 <span class="math inline">\(n\le 10^6\)</span>个圆，保证所有圆都经过原点。</p><p>问 <span class="math inline">\(n\)</span>个圆的交是否为空，若不为空，则求出交区域内的点离原点最远的距离。</p></blockquote><p>关于原点反演，每个圆就变成了一个半平面，求出来半平面交，问题变成了点到凸包的最近距离。</p>]]></content>
    
    
    <categories>
      
      <category>Summary</category>
      
      <category>Algorithms</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Geometry</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017-2018 ICPC Asia Tsukuba Regional</title>
    <link href="/official/icpc/17-asia-tsukuba/"/>
    <url>/official/icpc/17-asia-tsukuba/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>比赛地址 ：<a href="https://codeforces.com/gym/101986">Codeforces Gym101986</a></p><p>还没补完：DK</p><h2 id="a---secret-of-chocolate-poles">A - Secret of ChocolatePoles</h2><p>除了最下面一块黑，每块黑和下面的白组成一块，简单计数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007 </span><br><br>ll f[N], ans;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> l = rd(), k = rd();<br>    f[<span class="hljs-number">1</span>] = f[k] = <span class="hljs-number">1</span>; ++k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span>; i &lt;= l; ++i) &#123;<br>        f[i] += f[i - <span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">if</span> (i &gt; k) f[i] += f[i - k];   <br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= l; ++i) ans += f[i];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="b---parallel-lines">B - Parallel Lines</h2><blockquote><p>给定 <span class="math inline">\(m\ (m\le 16,\)</span> 偶数<spanclass="math inline">\()\)</span>个点，两两配对，问得到的线段平行关系最多有多少组。</p></blockquote><p>注意要求全部点都用上，所以搜索两两配对的方案，可以变成每次给编号最小的那个点找配对点，复杂度变成<span class="math inline">\(\mathcal{O}((m-1)!!)\)</span> 。</p><p>然后数相同的方向向量的个数，对每个方向向量维护一个计数器即可，复杂度<span class="math inline">\(\mathcal{O}((m-1)!!)\)</span> 。计算量约为<span class="math inline">\(2\times 10^6\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 17</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 1007 </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><br><span class="hljs-built_in">map</span>&lt;pii, <span class="hljs-keyword">int</span>&gt; f;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> b ? gcd(b, a % b) : a;&#125;<br><br>pii <span class="hljs-keyword">operator</span> - (<span class="hljs-keyword">const</span> pii &amp;a, <span class="hljs-keyword">const</span> pii &amp;b) &#123;<span class="hljs-keyword">return</span> &#123;a.fr - b.fr, a.sc - b.sc&#125;;&#125;<br>pii <span class="hljs-keyword">operator</span> / (<span class="hljs-keyword">const</span> pii &amp;a, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;k) &#123;<span class="hljs-keyword">return</span> &#123;a.fr / k, a.sc / k&#125;;&#125;<br><br>pii a[N];<br><br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-keyword">int</span> s[N][N], cnt[M];<br><br><span class="hljs-keyword">int</span> n, idcnt, ans, res;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">c2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">return</span> x * (x - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;res -= c2(cnt[x]); ++cnt[x]; res += c2(cnt[x]);&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;res -= c2(cnt[x]); --cnt[x]; res += c2(cnt[x]);&#125;<br><br><span class="hljs-comment">// (m - 1)!! = 2027025 </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p == n / <span class="hljs-number">2</span>) &#123;ans = max(ans, res); <span class="hljs-keyword">return</span>;&#125;<br>    <span class="hljs-keyword">int</span> A = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br>        <span class="hljs-keyword">if</span> (!vis[i]) &#123;vis[i] = <span class="hljs-literal">true</span>; A = i; <span class="hljs-keyword">break</span>;&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = A + <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span> (!vis[i]) &#123;<br>            vis[i] = <span class="hljs-literal">true</span>; add(s[A][i]); dfs(p + <span class="hljs-number">1</span>);<br>            vis[i] = <span class="hljs-literal">false</span>; del(s[A][i]);<br>        &#125;<br>    vis[A] = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;a[i].fr = rd(); a[i].sc = rd();&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= n; ++j) &#123;<br>            pii tmp = (a[i] &lt; a[j] ? a[j] - a[i] : a[i] - a[j]);<br>            tmp = tmp / gcd(<span class="hljs-built_in">abs</span>(tmp.fr), <span class="hljs-built_in">abs</span>(tmp.sc));<br>            <span class="hljs-keyword">if</span> (!f[tmp]) f[tmp] = ++idcnt;<br>            s[i][j] = f[tmp];<br>        &#125;<br>    dfs(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="c---medical-checkup">*C - Medical Checkup</h2><blockquote><p><span class="math inline">\(n\)</span> 个人去依次做检查，第 <spanclass="math inline">\(i\)</span> 个人检查每个项目都需要 <spanclass="math inline">\(t_i\)</span> 分钟，必须严格按照 <spanclass="math inline">\(1\dots \infty\)</span> 的顺序做检查。</p><p>问 <span class="math inline">\(T\)</span>时刻每个人都在做或等待做第几个检查。</p></blockquote><p>观察发现对于每个人，从他前面的 <span class="math inline">\(\maxt_i\)</span> 那个人开始，做检查的时间是连续的没有间隔了。</p><p>可以当作从 <span class="math inline">\(\arg\max t_i\)</span>开始的火车，每节长度为 <span class="math inline">\(t_i\)</span>，从某时刻进入一个隧道每秒前进一，隧道每 <spanclass="math inline">\(\max t_i\)</span> 一个关卡。</p><p>换句话说，除了第一个检查，后面的每个检查都需要 <spanclass="math inline">\(\max t_i\)</span> 的时间进行，所以答案就是 <spanclass="math inline">\(\displaystyle \lfloor\frac{T - \sum_{j=1}^it_j}{\max t_i}\rfloor + 2\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), t = rd(), mx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> nw = rd(); mx = max(mx, nw);<br>        <span class="hljs-keyword">if</span> (t &gt;= <span class="hljs-number">0</span>) t -= nw; <span class="hljs-comment">// t is the starting time of the second check</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, t &lt; <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : t / mx + <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="e---black-or-white">*E - Black or White</h2><blockquote><p>给两个长度为 <span class="math inline">\(n\)</span> 的 <spanclass="math inline">\(01\)</span> 序列 <spanclass="math inline">\(S,T\)</span> ，每次可以把第一个序列连续至多 <spanclass="math inline">\(k\)</span> 个位置刷成 <spanclass="math inline">\(0\)</span> 或 <spanclass="math inline">\(1\)</span> 。</p><p>问把第一个序列改成第二个最少操作多少次。</p></blockquote><p>设 <span class="math inline">\(f[i]\)</span> 表示把前 <spanclass="math inline">\(i\)</span> 个刷成正确的最小操作次数。</p><ul><li><span class="math inline">\(S[i]=T[i],\ f[i] \leftarrow f[i -1]\)</span></li><li>枚举刷 <span class="math inline">\(i\)</span> 的那一刷是从第 <spanclass="math inline">\(j\)</span> 个开始的，<spanclass="math inline">\(f[i]\leftarrow\min\{f[j]+cost(j+1,i)\}\)</span></li></ul><p>考虑把一个长度不超过 <span class="math inline">\(k\)</span>的序列刷出来的最小代价，发现是每次把左右两个一起刷，代价即 段数 <spanclass="math inline">\(/2 + 1\)</span> 。</p><p><span class="math inline">\(f[i] = f[j] + (sum[i] - sum[j + 1] + 1) /2 + 1\)</span> 按照 <span class="math inline">\(2 * f[j] - sum[j +1]\)</span> 决策单调性，单调队列优化一下。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500007</span><br><br><span class="hljs-keyword">char</span> s[N], t[N];<br><br><span class="hljs-keyword">int</span> sum[N], f[N];<br><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; pos;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    pos.push_back(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>); <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, t + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) sum[i] = sum[i - <span class="hljs-number">1</span>] + (t[i] != t[i - <span class="hljs-number">1</span>]);<br><br>    <span class="hljs-comment">// the number of segments in [l, r] : sum[r] - sum[l + 1] + 1</span><br>    <span class="hljs-keyword">auto</span> val = [&amp;](<span class="hljs-keyword">int</span> p) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * f[p] - sum[p + <span class="hljs-number">1</span>];&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (s[i] == t[i]) f[i] = f[i - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">while</span> (i - pos.front() &gt; m) pos.pop_front();<br>            f[i] = f[pos.front()] + (sum[i] - sum[pos.front() + <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (!pos.empty() &amp;&amp; val(pos.back()) &gt;= val(i)) pos.pop_back();<br>        pos.push_back(i);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f[n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><h2 id="f---pizza-delivery">*F - Pizza Delivery</h2><blockquote><p>给定一张有向图，问把每条边翻转后（临时修改），<spanclass="math inline">\(1\)</span> 到 <spanclass="math inline">\(2\)</span> 最短路是否变长 / 不变 / 变短。</p></blockquote><p>原图跑出来 <span class="math inline">\(1\)</span> 的单源最短路 <spanclass="math inline">\(dis[1][u]\)</span> ，反图跑出来 <spanclass="math inline">\(2\)</span> 的单源最短路 <spanclass="math inline">\(dis[2][u]\)</span> 。</p><p>原图最短路是 <span class="math inline">\(dis[1][2]\)</span> ，翻转<span class="math inline">\((u\to v,w)\)</span> 后经过这条边的最短路是<span class="math inline">\(dis[1][v] + dis[2][u] + w\)</span> 。</p><p>变短可以直接判断。然后如果不是所有最短路都必须经过原来的 <spanclass="math inline">\((u\to v,w)\)</span>，那么最短路不变，否则是变长。</p><p>求最短路同时求出 <span class="math inline">\(cnt[1][u]\)</span>表示原图 <span class="math inline">\(1\)</span> 到 <spanclass="math inline">\(u\)</span> 的最短路条数，<spanclass="math inline">\(cnt[2][u]\)</span> 表示反图 <spanclass="math inline">\(2\)</span> 到 <spanclass="math inline">\(u\)</span> 的最短路条数。</p><p>判断最短路必经边可以哈希（取模）最短路计数。最短路必经边的条件：</p><ol type="1"><li>在最短路上： <span class="math inline">\(dis[1][u]+dis[2][v] + w ==dis[1][2]\)</span></li><li>所有最短路都经过：<span class="math inline">\(cnt[1][u]\timescnt[2][v] \equiv cnt[1][2]\pmod {a\ prime\ number}\)</span></li></ol><p>最后考虑一下多条完全相同且在最短路上的重边是否会有问题（即认为每条都是必经边）？</p><p>答案是不会有问题，因为最短路条数是 <spanclass="math inline">\(cnt[1][u]\times cnt[2][v]\times k\)</span>，可以理解为乘法原理。</p><p>upd：当然第二问也可以<strong>只保留 <spanclass="math inline">\(1\)</span> 到 <spanclass="math inline">\(2\)</span>最短路</strong>中的边，然后建图求桥。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmin</span><span class="hljs-params">(T &amp;a, T b)</span> </span>&#123;<span class="hljs-keyword">return</span> a &gt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>;&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br><span class="hljs-keyword">int</span> n, m, tot, hd[N], hdr[N];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> to, nxt, w;&#125; e[N &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span> </span>&#123;<br>e[++tot] = &#123;v, hd[u], w&#125;; hd[u] = tot;<br>e[++tot] = &#123;u, hdr[v], w&#125;; hdr[v] = tot;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 1000000007</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;a = (a + b &gt;= mod ? a + b - mod : a + b);&#125;<br><br><span class="hljs-keyword">bool</span> use[N];<br><br><span class="hljs-keyword">int</span> cnt[<span class="hljs-number">2</span>][N];<br><br>ll dis[<span class="hljs-number">2</span>][N];<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;ll, <span class="hljs-keyword">int</span>&gt; cur;<br><br><span class="hljs-built_in">priority_queue</span>&lt;cur, <span class="hljs-built_in">vector</span>&lt;cur&gt;, greater&lt;cur&gt;&gt; q;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dij</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> *h, <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br><span class="hljs-built_in">memset</span>(use, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(use));<br>dis[id][u] = <span class="hljs-number">0</span>; cnt[id][u] = <span class="hljs-number">1</span>; q.push(mp(<span class="hljs-number">0</span>, u)); <br><span class="hljs-keyword">while</span> (!q.empty()) &#123;<br><span class="hljs-keyword">int</span> u = q.top().second; q.pop();<br><span class="hljs-keyword">if</span> (use[u]) <span class="hljs-keyword">continue</span>; use[u] = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[u], v; i; i = e[i].nxt)<br><span class="hljs-keyword">if</span> (getmin(dis[id][v = e[i].to], dis[id][u] + e[i].w)) &#123;<br>cnt[id][v] = cnt[id][u]; q.push(mp(dis[id][v], v));<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dis[id][v] == dis[id][u] + e[i].w) add(cnt[id][v], cnt[id][u]);<br>&#125;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(), m = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br><span class="hljs-keyword">int</span> u = rd(), v = rd(), w = rd(); add(u, v, w);<br>&#125;<br><span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(dis));<br>dij(<span class="hljs-number">1</span>, hd, <span class="hljs-number">0</span>); dij(<span class="hljs-number">2</span>, hdr, <span class="hljs-number">1</span>);<br>ll mnd = dis[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br><span class="hljs-keyword">int</span> u = e[i * <span class="hljs-number">2</span>].to, v = e[i * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>].to, w = e[i * <span class="hljs-number">2</span>].w;<br><span class="hljs-keyword">if</span> (dis[<span class="hljs-number">0</span>][v] + dis[<span class="hljs-number">1</span>][u] + w &lt; mnd) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;HAPPY&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dis[<span class="hljs-number">0</span>][u] + dis[<span class="hljs-number">1</span>][v] + w == mnd &amp;&amp; <span class="hljs-number">1l</span>l * cnt[<span class="hljs-number">0</span>][u] * cnt[<span class="hljs-number">1</span>][v] % mod == cnt[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;SAD&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;SOSO&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>UPD：</strong>看了下 jiangly的代码，发现了一个神奇的方法求最短路必经边，尝试描述一下原理：</p><p>对于最短路图上的每条边差分，起点点权 <spanclass="math inline">\(+1\)</span> ，终点点权 <spanclass="math inline">\(-1\)</span> ，然后<strong>按照 Dijkstra</strong>的顺序求前缀和。</p><p>那么如果一条边 <span class="math inline">\((u,v,w)\)</span><strong>在 <span class="math inline">\(1\)</span> 到 <spanclass="math inline">\(2\)</span> 最短路上</strong> 且 <spanclass="math inline">\(val[u]=1\)</span> ，那么这条边是最短路必经边。</p><p><span class="math inline">\(val[u]\)</span> 的含义是只考虑<strong>Dijkstra</strong> 顺序中在 <spanclass="math inline">\(u\)</span>之前的所有点，延伸出的最短路当前收敛到了多少条。</p><p>也就是当前最短路能走就走，只走 <strong>Dijkstra</strong> 顺序中在<span class="math inline">\(u\)</span>之前的点，然后最终有多少条边可以继续往下走。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmin</span><span class="hljs-params">(T &amp;a, T b)</span> </span>&#123;<span class="hljs-keyword">return</span> a &gt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>;&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br><span class="hljs-keyword">int</span> n, m, tot, hd[N], hdr[N];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> to, nxt, w;&#125; e[N &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span> </span>&#123;<br>    e[++tot] = &#123;v, hd[u], w&#125;; hd[u] = tot;<br>    e[++tot] = &#123;u, hdr[v], w&#125;; hdr[v] = tot;<br>&#125;<br><br><span class="hljs-keyword">bool</span> use[N];<br><br><span class="hljs-keyword">int</span> pos[N], sum[N];<br><br>ll dis[<span class="hljs-number">2</span>][N];<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;ll, <span class="hljs-keyword">int</span>&gt; cur;<br><br><span class="hljs-built_in">priority_queue</span>&lt;cur, <span class="hljs-built_in">vector</span>&lt;cur&gt;, greater&lt;cur&gt;&gt; q;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dij</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> *h, <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(use, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(use));<br>    dis[id][u] = <span class="hljs-number">0</span>; q.push(mp(<span class="hljs-number">0</span>, u)); <br>    <span class="hljs-keyword">while</span> (!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.top().second; q.pop();<br>        <span class="hljs-keyword">if</span> (use[u]) <span class="hljs-keyword">continue</span>; use[u] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (!id) pos[u] = ++pos[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[u], v; i; i = e[i].nxt)<br>            <span class="hljs-keyword">if</span> (getmin(dis[id][v = e[i].to], dis[id][u] + e[i].w)) q.push(mp(dis[id][v], v));<br>    &#125;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), v = rd(), w = rd(); add(u, v, w);<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(dis));<br>    dij(<span class="hljs-number">1</span>, hd, <span class="hljs-number">0</span>); dij(<span class="hljs-number">2</span>, hdr, <span class="hljs-number">1</span>);<br>    ll mnd = dis[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = hd[u], v; i; i = e[i].nxt)<br>            <span class="hljs-keyword">if</span> (dis[<span class="hljs-number">0</span>][u] + e[i].w + dis[<span class="hljs-number">1</span>][v = e[i].to] == mnd) &#123;++sum[pos[u]]; --sum[pos[v]];&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) sum[i] += sum[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = e[i * <span class="hljs-number">2</span>].to, v = e[i * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>].to, w = e[i * <span class="hljs-number">2</span>].w;<br>        <span class="hljs-keyword">if</span> (dis[<span class="hljs-number">0</span>][v] + dis[<span class="hljs-number">1</span>][u] + w &lt; mnd) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;HAPPY&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dis[<span class="hljs-number">0</span>][u] + dis[<span class="hljs-number">1</span>][v] + w == mnd &amp;&amp; sum[pos[u]] == <span class="hljs-number">1</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;SAD&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;SOSO&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="g---rendezvous-on-a-tetrahedron">G - Rendezvous on aTetrahedron</h2><blockquote><p>两只蚂蚁从正四面体一个顶点开始爬，给定初始面、方向、长度。</p><p>爬行路径过程中保证和边角度不变，保证除了开始不会经过任何顶点。问最后两只蚂蚁是否在同一个面。</p></blockquote><p>角度不变相当于在四面体展开的图形上走直线，模拟即可。每次新走到的面都可以用上一个面的三个点判断得出。</p><p>讨论比较繁琐，解三角形需要灵活运用一下三角函数公式。<spanclass="math inline">\([0,\pi]\)</span> 求角度用 <spanclass="math inline">\(\arccos\)</span> 不要用 <spanclass="math inline">\(\arcsin\)</span> 。</p><p><del>感觉三角函数递归套起来精度炸飞了。不知道怎么过的</del></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.141592653589793</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> sin60 = <span class="hljs-built_in">sqrt</span>(<span class="hljs-number">3</span>) / <span class="hljs-number">2.0</span>;<br><br><span class="hljs-comment">// A = 0 | B = 1 | C = 2 | D = 3 || sum = 6</span><br><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">simulate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> tar, <span class="hljs-keyword">double</span> pos, <span class="hljs-keyword">double</span> ang, <span class="hljs-keyword">double</span> rem)</span> </span>&#123;<br>    <span class="hljs-comment">//printf(&quot;%d %d %d %.3lf %.3lf %.3lf\n&quot;, x, y, tar, pos, ang, rem); </span><br>    <span class="hljs-keyword">double</span> angtar = <span class="hljs-built_in">acos</span>((<span class="hljs-number">2</span> * pos - <span class="hljs-number">1</span>) / <span class="hljs-number">2.0</span> / <span class="hljs-built_in">sqrt</span>(pos * pos + <span class="hljs-number">1</span> - pos)); <br>    <span class="hljs-keyword">if</span> (ang &lt; angtar) &#123;<br>        <span class="hljs-keyword">double</span> len = pos * sin60 / <span class="hljs-built_in">sin</span>(pi * <span class="hljs-number">2</span> / <span class="hljs-number">3</span> - ang);<br>        <span class="hljs-keyword">if</span> (rem &lt;= len) <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&#123;x, y, tar&#125;;<br>        <span class="hljs-keyword">return</span> simulate(x, tar, <span class="hljs-number">6</span> - x - y - tar, <span class="hljs-built_in">sin</span>(ang) / <span class="hljs-built_in">sin</span>(pi * <span class="hljs-number">2</span> / <span class="hljs-number">3</span> - ang) * pos, pi / <span class="hljs-number">3</span> + ang, rem - len);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">double</span> len = (<span class="hljs-number">1</span> - pos) * sin60 / <span class="hljs-built_in">sin</span>(ang - pi / <span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">if</span> (rem &lt;= len) <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&#123;x, y, tar&#125;;<br>        <span class="hljs-keyword">return</span> simulate(tar, y, <span class="hljs-number">6</span> - x - y - tar, <span class="hljs-number">1</span> - <span class="hljs-built_in">sin</span>(ang) / <span class="hljs-built_in">sin</span>(ang - pi / <span class="hljs-number">3</span>) * (<span class="hljs-number">1</span> - pos), ang - pi / <span class="hljs-number">3</span>, rem - len);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">auto</span> rdv = [&amp;]() &#123;<br>        <span class="hljs-keyword">char</span> c = getchar();<br>        <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isalpha</span>(c)) c = getchar();<br>        <span class="hljs-keyword">return</span> c - <span class="hljs-string">&#x27;A&#x27;</span>;<br>    &#125;;<br><br>    <span class="hljs-keyword">auto</span> getpos = [&amp;]() &#123;<br>        <span class="hljs-keyword">int</span> x = rdv(), y = rdv();<br>        <span class="hljs-keyword">double</span> ang = rd() * pi / <span class="hljs-number">180</span>, l = rd();<br>        <span class="hljs-keyword">double</span> step1 = sin60 / <span class="hljs-built_in">sin</span>(pi * <span class="hljs-number">2</span> / <span class="hljs-number">3</span> - ang); <span class="hljs-comment">// The Law of Sines</span><br>        <span class="hljs-keyword">if</span> (step1 &gt;= l) <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&#123;<span class="hljs-number">0</span>, x, y&#125;;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> simulate(x, y, <span class="hljs-number">6</span> - x - y, <span class="hljs-built_in">sin</span>(ang) / <span class="hljs-built_in">sin</span>(pi * <span class="hljs-number">2</span> / <span class="hljs-number">3</span> - ang), pi / <span class="hljs-number">3</span> + ang, l - step1);  <br>    &#125;;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; pos1 = getpos(); sort(pos1.begin(), pos1.end());<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; pos2 = getpos(); sort(pos2.begin(), pos2.end());<br>    <span class="hljs-built_in">puts</span>(pos1 == pos2 ? <span class="hljs-string">&quot;YES&quot;</span> : <span class="hljs-string">&quot;NO&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="h---homework">*H - Homework</h2><blockquote><p><span class="math inline">\(n\)</span> 个作业，每个作业有释放时间<span class="math inline">\(r_i\)</span> 截止时间 <spanclass="math inline">\(d_i\)</span> 种类 <spanclass="math inline">\(A/B\)</span> 。</p><p>每天 <span class="math inline">\(x\)</span>先选择一个类别，然后如果该类还有没完成且可以完成的任务（ <spanclass="math inline">\(x\in [r_i,d_i]\)</span> ），那么做掉 <spanclass="math inline">\(d_i\)</span> 最小且编号最小的。</p><p>问最多 / 最少能完成多少个作业。</p></blockquote><p>注意到 “做掉 <span class="math inline">\(d_i\)</span>最小且编号最小的” 是正确的贪心结构（是随便选的方案里的最优解）。</p><p>最多就是做一个二分图匹配。每天 <span class="math inline">\(x\)</span>可以匹配 <span class="math inline">\(x\in [r_i,d_i]\)</span> 的所有<span class="math inline">\(i\)</span> 。</p><p>最少考虑开摆的策略：如果那天存在一类作业当天都做完了，那我自然选择这一类任务；否则就是挑某一类做掉一个。</p><p>用最小割描述这个贪心，割的含义就是完成这个任务：</p><ul><li><p>每天最多完成一个作业，拆点 <span class="math inline">\((x_l\tox_r,1)\)</span> 。</p></li><li><p>每个 <span class="math inline">\(A\)</span> 类任务：<spanclass="math inline">\((S\to task_i, 1);\ \forall x\in[r_i,d_i],(task_i\to x_l,1)\)</span></p></li><li><p>每个 <span class="math inline">\(B\)</span> 类任务：<spanclass="math inline">\(\forall x\in [r_i,d_i],(x_r\to task_i,1);\(task_i\to T, 1)\)</span></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmin</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> (a &gt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmax</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> (a &lt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>);&#125;<br> <br><span class="hljs-comment">// F is the type of flow</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> V, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> E, <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">F</span>, <span class="hljs-title">const</span> <span class="hljs-title">F</span> <span class="hljs-title">flowInf</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">struct</span> <span class="hljs-title">Flow</span> &#123;</span><br> <br>    <span class="hljs-keyword">int</span> tot = <span class="hljs-number">1</span>, S, T, hd[V], cur[V], dis[V];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> to, nxt; F cap;&#125; e[E &lt;&lt; <span class="hljs-number">1</span>];<br> <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;tot = <span class="hljs-number">1</span>; <span class="hljs-built_in">memset</span>(hd, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(hd));&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, F w)</span> </span>&#123;<br>        e[++tot].nxt = hd[u], hd[u] = tot, e[tot].to = v, e[tot].cap = w;<br>        e[++tot].nxt = hd[v], hd[v] = tot, e[tot].to = u, e[tot].cap = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> q[V], qhd, qtl; <br>        <span class="hljs-built_in">memcpy</span>(cur, hd, <span class="hljs-keyword">sizeof</span>(hd));<br>        <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(dis));<br>        q[qhd = qtl = <span class="hljs-number">1</span>] = S; dis[S] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (qhd &lt;= qtl) &#123;<br>            <span class="hljs-keyword">int</span> u = q[qhd++];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = hd[u], v; i; i = e[i].nxt)<br>                <span class="hljs-keyword">if</span> (dis[v = e[i].to] == <span class="hljs-number">-1</span> &amp;&amp; e[i].cap != <span class="hljs-number">0</span>) &#123;<br>                    dis[v] = dis[u] + <span class="hljs-number">1</span>; q[++qtl] = v;<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dis[T] != <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-function">F <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, F rem)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (u == T) <span class="hljs-keyword">return</span> rem;<br>        F flow = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = cur[u], v; i &amp;&amp; rem; i = e[i].nxt) &#123;<br>            cur[u] = i; v = e[i].to;<br>            F nw = min(rem, e[i].cap);<br>            <span class="hljs-keyword">if</span> (nw != <span class="hljs-number">0</span> &amp;&amp; dis[v] == dis[u] + <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">int</span> ret = dfs(v, nw);<br>                flow += ret; rem -= ret; <br>                e[i].cap -= ret; e[i ^ <span class="hljs-number">1</span>].cap += ret;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flow == <span class="hljs-number">0</span>) dis[u] = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">return</span> flow;<br>    &#125;<br>    <span class="hljs-function">F <span class="hljs-title">dinic</span><span class="hljs-params">(<span class="hljs-keyword">int</span> source, <span class="hljs-keyword">int</span> sink)</span> </span>&#123;<br>        S = source; T = sink; F flow = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (bfs()) flow += dfs(S, flowInf);<br>        <span class="hljs-keyword">return</span> flow;<br>    &#125;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1207</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 1000007</span><br><br>Flow&lt;N, M, <span class="hljs-keyword">int</span>, <span class="hljs-number">1000000000</span>&gt; f;<br><br><span class="hljs-keyword">int</span> l[N], r[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    <span class="hljs-keyword">int</span> S = N - <span class="hljs-number">1</span>, T = N - <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">400</span>; ++i) f.add(S, i, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        l[i] = rd(); r[i] = rd(); f.add(<span class="hljs-number">400</span> + i, T, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = l[i]; j &lt;= r[i]; ++j) f.add(j, <span class="hljs-number">400</span> + i, <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f.dinic(S, T)); f.clear();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">400</span>; ++i) f.add(i, <span class="hljs-number">400</span> + i, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        f.add(S, <span class="hljs-number">800</span> + i, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = l[i]; j &lt;= r[i]; ++j) f.add(<span class="hljs-number">800</span> + i, j, <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = m + <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        f.add(<span class="hljs-number">800</span> + i, T, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = l[i]; j &lt;= r[i]; ++j) f.add(<span class="hljs-number">400</span> + j, <span class="hljs-number">800</span> + i, <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f.dinic(S, T));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><p><strong>UPD：</strong> 网络流感觉理论复杂度不对，看了下 jiangly的代码果然有复杂度正确的 dp 做法。</p><h2 id="i---starting-a-scenic-railroad-service">I - Starting a ScenicRailroad Service</h2><p>策略 1 就是冲突最大的人的冲突次数 <spanclass="math inline">\(+1\)</span> ，排序维护一下即可；策略 2就是任意时刻上车的最多人数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmin</span><span class="hljs-params">(T &amp;a, T b)</span> </span>&#123;<span class="hljs-keyword">return</span> a &gt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>;&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N  200007</span><br><br><span class="hljs-keyword">int</span> sum[N];<br><br>pii s[N];<br><br><span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;, greater&lt;<span class="hljs-keyword">int</span>&gt;&gt; q;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">int</span> l = rd(), r = rd() - <span class="hljs-number">1</span>;<br>s[i] = <span class="hljs-built_in">make_pair</span>(l, r); ++sum[l]; --sum[r + <span class="hljs-number">1</span>];<br>&#125;<br>sort(s + <span class="hljs-number">1</span>, s + <span class="hljs-number">1</span> + n);<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">int</span> l = i, r = n;<br><span class="hljs-keyword">while</span> (!q.empty() &amp;&amp; q.top() &lt; s[i].first) q.pop();<br><span class="hljs-keyword">while</span> (l &lt; r) &#123;<br><span class="hljs-keyword">int</span> mid = (l + r + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>s[mid].first &lt;= s[i].second ? l = mid : r = mid - <span class="hljs-number">1</span>;<br>&#125;<br>q.push(s[i].second);<br>ans = max(ans, r - i + (<span class="hljs-keyword">int</span>)q.size());<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ans);<br>ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) &#123;sum[i] += sum[i - <span class="hljs-number">1</span>]; ans = max(ans, sum[i]);&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="j---string-puzzle">*J - String Puzzle</h2><blockquote><p>一个长度为 <span class="math inline">\(n\ (n\le 10^9)\)</span>的未知串，给定 <span class="math inline">\(a\)</span>个位置上的字符，<span class="math inline">\(b\)</span> 个信息，<spanclass="math inline">\(q\)</span> 次询问是否能知道某个位置的值。</p><p>一条信息：<span class="math inline">\(1\le h &lt; l\le r\len\)</span> ，表示 <span class="math inline">\(S[h,h+(r-l)] =S[l,r]\)</span> ，<strong>且所有信息的 <spanclass="math inline">\([l,r]\)</span> 无交</strong>。</p></blockquote><p>首先肯定想先把所有应该相同的位置都找出来，但位置太多了，如果 border太短可能整个串都要处理。</p><p>那么一个经典的思路就是把信息记录在某个特定的位置，所有等价位置都可以找到这个位置，然后打标记/查询。</p><p>不妨把这个位置定为可能的最靠前的位置。那么由于 <spanclass="math inline">\([l,r]\)</span>无交，每个位置利用哪条信息跳是确定的。</p><p>可以发现 <span class="math inline">\(S[h,l-1]\)</span> 是 <spanclass="math inline">\(S[h,r]\)</span> 天然的 border ，我们直接把 <spanclass="math inline">\(p\in[l,r]\)</span> 跳到 <spanclass="math inline">\(h+(p-h)\mod (l-h)\)</span> 。</p><p>可以发现这样每个信息最多用到一次，查询最靠前的等价位置复杂度就是<span class="math inline">\(O(b)\)</span> 的。模拟即可。</p><p>（当然也可以用 <code>set</code> 维护信息，每次<code>lower_bound</code> 找到 <spanclass="math inline">\(p\in[l,r]\)</span>那个信息，但是复杂度不会变好就没用）</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1007</span><br><br><span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">char</span>&gt; hint[N];<br><br><span class="hljs-keyword">int</span> y[N], h[N], tot;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">segpair</span>&#123;</span><span class="hljs-keyword">int</span> l, r, h;&#125; s[N];<br><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">char</span>&gt; f;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(), a = rd(), b = rd(), q = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= a; ++i) &#123;<br><span class="hljs-keyword">int</span> p = rd();<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isalpha</span>(c)) c = getchar();<br>hint[i] = &#123;p, c&#125;;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= b; ++i) &#123;y[i] = rd(); h[i] = rd();&#125;<br>y[b + <span class="hljs-number">1</span>] = n + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= b; ++i) <span class="hljs-keyword">if</span> (h[i]) s[++tot] = &#123;y[i], y[i + <span class="hljs-number">1</span>] - <span class="hljs-number">1</span>, h[i]&#125;;<br><br><span class="hljs-keyword">auto</span> find = [&amp;](<span class="hljs-keyword">int</span> p) &#123;<br><span class="hljs-keyword">if</span> (!tot) <span class="hljs-keyword">return</span> p;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = tot; i; --i) &#123;<br><span class="hljs-keyword">if</span> (p &gt; s[i].r) <span class="hljs-keyword">return</span> p;<br><span class="hljs-keyword">if</span> (p &lt; s[i].l) <span class="hljs-keyword">continue</span>;<br>p = s[i].h + (p - s[i].h) % (s[i].l - s[i].h);<br>&#125;<br><span class="hljs-keyword">return</span> p;<br>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= a; ++i) f[find(hint[i].first)] = hint[i].second;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; ++i) &#123;<br><span class="hljs-keyword">int</span> pos = find(rd());<br><span class="hljs-built_in">putchar</span>(f.find(pos) == f.end() ? <span class="hljs-string">&#x27;?&#x27;</span> : f[pos]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Um_nik 队用了一个奇怪的科技把所有信息拆成 <spanclass="math inline">\(\log (r-l)\)</span> 个 <spanclass="math inline">\([h,h+(r-l)]\)</span> 和 <spanclass="math inline">\([l,r]\)</span> 无交的信息：</p><p>设 <span class="math inline">\(len = l-h\)</span> ，第一组 <spanclass="math inline">\([h,h+len-1],[l,l+len-1]\)</span> ;</p><p>第二组将 <span class="math inline">\(len\)</span> 倍长，<spanclass="math inline">\([h,h+2\times len-1],[l+len,l + 3\times len -1]\)</span> ;</p><p>第三组再倍长，以次类推，然后最后再剩下一小段。简单说就是按照 border的<span class="math inline">\(2^k\)</span> 倍长划分串。</p><p>这样子每组都没有交了，放到这个题就可以直接跳。不知道有啥用，简单记录一下。</p>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Official Contests</category>
      
      <category>ICPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Geometry</tag>
      
      <tag>Shortest Path</tag>
      
      <tag>Flows</tag>
      
      <tag>Tricks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-2023 ICPC North Western Russia Regional</title>
    <link href="/official/icpc/22-nerc-northwestern-russia/"/>
    <url>/official/icpc/22-nerc-northwestern-russia/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>比赛地址 ：<a href="https://codeforces.com/gym/104012">Codeforces Gym104012</a></p><p>待补：DFGHJM</p><h2 id="a---absolutely-flat">A - Absolutely Flat</h2><p>签到题。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ii</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a[<span class="hljs-number">4</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i) a[i] = ii();<br>    <span class="hljs-keyword">int</span> b = ii();<br>    <span class="hljs-built_in">std</span>::sort(a, a + <span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">if</span> (a[<span class="hljs-number">0</span>] == a[<span class="hljs-number">1</span>] &amp;&amp; a[<span class="hljs-number">0</span>] == a[<span class="hljs-number">2</span>] &amp;&amp; a[<span class="hljs-number">0</span>] == a[<span class="hljs-number">3</span>])<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[<span class="hljs-number">0</span>] + b == a[<span class="hljs-number">1</span>] &amp;&amp; a[<span class="hljs-number">0</span>] + b == a[<span class="hljs-number">2</span>] &amp;&amp; a[<span class="hljs-number">0</span>] + b == a[<span class="hljs-number">3</span>])<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="b---bricks-in-the-wall">B - Bricks in the Wall</h2><blockquote><p>给一个矩阵由 <code>#</code> 和 <code>.</code>组成，执行两次操作：在某一行或某一列中选择一段连续的 <code>.</code>，将其改为 <code>#</code> 。</p><p>求两次操作能修改的最大 <code>.</code> 的个数。</p></blockquote><p>分类讨论，两次都选行/列肯定不会冲突，所以维护最大和次大即可。</p><p>如果选一行一列，交点处如果是 <code>#</code>也直接选最大和次大即可，否则要枚举断掉哪个方向。</p><p>每行每列的线段开个 <code>set</code> 维护即可。复杂度 <spanclass="math inline">\(\mathcal{O}(nm\log \max(n,m))\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 2000007</span><br><br><span class="hljs-keyword">bool</span> mp[N];<br><br><span class="hljs-keyword">int</span> u[N], d[N], l[N], r[N];<br><br><span class="hljs-built_in">multiset</span>&lt;<span class="hljs-keyword">int</span>, greater&lt;<span class="hljs-keyword">int</span>&gt; &gt; R[N], C[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n, m; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br><span class="hljs-keyword">auto</span> p = [&amp;](<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y) &#123;<span class="hljs-keyword">return</span> (x - <span class="hljs-number">1</span>) * m + y;&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) R[i].clear();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) C[j].clear();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) &#123;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">while</span> (c != <span class="hljs-string">&#x27;.&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;#&#x27;</span>) c = getchar();<br><span class="hljs-keyword">int</span> pos = p(i, j);<br>mp[pos] = (c == <span class="hljs-string">&#x27;#&#x27;</span>);<br>u[pos] = d[pos] = l[pos] = r[pos] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>, pos; j &lt;= m; ++j) <br><span class="hljs-keyword">if</span> (!mp[pos = p(i, j)]) &#123;<br>u[pos] = (i &gt; <span class="hljs-number">1</span> ? u[p(i - <span class="hljs-number">1</span>, j)] + <span class="hljs-number">1</span> : <span class="hljs-number">1</span>);<br>l[pos] = (j &gt; <span class="hljs-number">1</span> ? l[p(i, j - <span class="hljs-number">1</span>)] + <span class="hljs-number">1</span> : <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i; --i)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m, pos; j; --j) <br><span class="hljs-keyword">if</span> (!mp[pos = p(i, j)]) &#123;<br>d[pos] = (i &lt; n ? d[p(i + <span class="hljs-number">1</span>, j)] + <span class="hljs-number">1</span> : <span class="hljs-number">1</span>);<br>r[pos] = (j &lt; m ? r[p(i, j + <span class="hljs-number">1</span>)] + <span class="hljs-number">1</span> : <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, pos; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">if</span> (!mp[pos = p(i, <span class="hljs-number">1</span>)]) R[i].insert(r[pos]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; m; ++j)<br><span class="hljs-keyword">if</span> (mp[p(i, j)] &amp;&amp; !mp[pos = p(i, j + <span class="hljs-number">1</span>)]) R[i].insert(r[pos]);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>, pos; j &lt;= m; ++j) &#123;<br><span class="hljs-keyword">if</span> (!mp[pos = p(<span class="hljs-number">1</span>, j)]) C[j].insert(d[pos]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i)<br><span class="hljs-keyword">if</span> (mp[p(i, j)] &amp;&amp; !mp[pos = p(i + <span class="hljs-number">1</span>, j)]) C[j].insert(d[pos]);<br>&#125;<br><span class="hljs-keyword">int</span> mx = <span class="hljs-number">0</span>, mxx = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">auto</span> upd = [&amp;](<span class="hljs-keyword">int</span> x) &#123;<br><span class="hljs-keyword">if</span> (mx &lt; x) &#123;mxx = mx; mx = x;&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mxx &lt; x) mxx = x;<br>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">int</span> sz = R[i].size();<br><span class="hljs-keyword">if</span> (sz) upd(*R[i].begin());<br><span class="hljs-keyword">if</span> (sz &gt; <span class="hljs-number">1</span>) upd(*++R[i].begin());<br>&#125;<br><span class="hljs-keyword">int</span> ans = mx + mxx;<br>mx = mxx = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) &#123;<br><span class="hljs-keyword">int</span> sz = C[j].size();<br><span class="hljs-keyword">if</span> (sz) upd(*C[j].begin());<br><span class="hljs-keyword">if</span> (sz &gt; <span class="hljs-number">1</span>) upd(*++C[j].begin());<br>&#125;<br>ans = max(ans, mx + mxx);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>, pos; j &lt;= m; ++j) <br><span class="hljs-keyword">if</span> (!mp[pos = p(i, j)]) <br>                ans = max(ans, u[pos] + d[pos] + l[pos] + r[pos] - <span class="hljs-number">2</span> - min(&#123;u[pos], d[pos], l[pos], r[pos]&#125;));<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>, pos; j &lt;= m; ++j) &#123;<br><span class="hljs-keyword">if</span> (!mp[pos = p(i, j)]) &#123;<br><span class="hljs-keyword">int</span> lr = l[pos] + r[pos] - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> ud = u[pos] + d[pos] - <span class="hljs-number">1</span>;<br><span class="hljs-comment">// cut lr</span><br>R[i].erase(R[i].lower_bound(lr));<br>R[i].insert(l[pos] - <span class="hljs-number">1</span>); R[i].insert(r[pos] - <span class="hljs-number">1</span>);<br>mx = <span class="hljs-number">0</span>; mxx = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> sz = R[i].size();<br><span class="hljs-keyword">if</span> (sz) upd(*R[i].begin());<br><span class="hljs-keyword">if</span> (sz &gt; <span class="hljs-number">1</span>) upd(*++R[i].begin());<br>sz = C[j].size();<br><span class="hljs-keyword">if</span> (sz) upd(*C[j].begin());<br><span class="hljs-keyword">if</span> (sz &gt; <span class="hljs-number">1</span>) upd(*++C[j].begin());<br>ans = max(ans, mx + mxx);<br>R[i].erase(R[i].lower_bound(l[pos] - <span class="hljs-number">1</span>));<br>R[i].erase(R[i].lower_bound(r[pos] - <span class="hljs-number">1</span>));<br>R[i].insert(lr);<br><span class="hljs-comment">// cut ud</span><br>C[j].erase(C[j].lower_bound(ud));<br>C[j].insert(u[pos] - <span class="hljs-number">1</span>); C[j].insert(d[pos] - <span class="hljs-number">1</span>);<br>mx = <span class="hljs-number">0</span>; mxx = <span class="hljs-number">0</span>;<br>sz = R[i].size();<br><span class="hljs-keyword">if</span> (sz) upd(*R[i].begin());<br><span class="hljs-keyword">if</span> (sz &gt; <span class="hljs-number">1</span>) upd(*++R[i].begin());<br>sz = C[j].size();<br><span class="hljs-keyword">if</span> (sz) upd(*C[j].begin());<br><span class="hljs-keyword">if</span> (sz &gt; <span class="hljs-number">1</span>) upd(*++C[j].begin());<br>ans = max(ans, mx + mxx);<br>C[j].erase(C[j].lower_bound(u[pos] - <span class="hljs-number">1</span>));<br>C[j].erase(C[j].lower_bound(d[pos] - <span class="hljs-number">1</span>));<br>C[j].insert(ud);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>mx = <span class="hljs-number">0</span>; mxx = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> sz = R[i].size();<br><span class="hljs-keyword">if</span> (sz) upd(*R[i].begin());<br><span class="hljs-keyword">if</span> (sz &gt; <span class="hljs-number">1</span>) upd(*++R[i].begin());<br>sz = C[j].size();<br><span class="hljs-keyword">if</span> (sz) upd(*C[j].begin());<br><span class="hljs-keyword">if</span> (sz &gt; <span class="hljs-number">1</span>) upd(*++C[j].begin());<br>ans = max(ans, mx + mxx);<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> t; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= t; ++i) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="c---computer-network">C - Computer Network</h2><p>签到。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ii</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = ii();<br>    <span class="hljs-keyword">int</span> k = ii();<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-keyword">int</span>&gt; vec;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; ++i) vec.push(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> a[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) a[i] = ii();<br>    <span class="hljs-built_in">std</span>::sort(a, a + n);<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans&#123;&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> x = -vec.top();<br>        vec.pop();<br>        <span class="hljs-keyword">int</span> y = -x - a[i];<br>        ans += x + a[i];<br>        vec.push(y);<br>    &#125;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="d---dice-grid">*D - Dice Grid</h2><h2 id="e---easily-distinguishable-triangles">*E - EasilyDistinguishable Triangles</h2><blockquote><p>给一个矩阵由 <code>#.?</code> 组成，<code>#</code>代表黑色，<code>.</code> 代表白色，你需要将 <code>?</code>的一个角（一半面积）染成黑色。</p><p>使得最终对于每个三角形，他所染黑的两条边不和任何其他黑色边界相邻。求方案数。</p></blockquote><p>玩一下发现行列是独立的，换句话说，染色相当于从左右中选一个边染色，上下中选一个边染色。</p><p>行列单独计数，以某行为例，如果左右都是黑色的就不行，一侧黑色方案数为<span class="math inline">\(1\)</span> ，没有黑色方案数为 <spanclass="math inline">\(len+1\)</span> 。</p><p>对每个行 / 列连通块执行上述过程即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 998244353</span><br><br><span class="hljs-keyword">char</span> mp[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n, ans = <span class="hljs-number">1</span>; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, mp[i] + <span class="hljs-number">1</span>); mp[i][<span class="hljs-number">0</span>] = mp[i][n + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;.&#x27;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>, l = <span class="hljs-number">0</span>; j &lt;= n + <span class="hljs-number">1</span>; ++j) <br><span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;?&#x27;</span> &amp;&amp; mp[i][j - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;?&#x27;</span>) l = j - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mp[i][j] != <span class="hljs-string">&#x27;?&#x27;</span> &amp;&amp; mp[i][j - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;?&#x27;</span>) &#123;<br><span class="hljs-keyword">int</span> cnt = (mp[i][l] == <span class="hljs-string">&#x27;#&#x27;</span>) + (mp[i][j] == <span class="hljs-string">&#x27;#&#x27;</span>);<br><span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">2</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>ans = <span class="hljs-number">1l</span>l * ans * (cnt ? <span class="hljs-number">1</span> : j - l) % mod;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) &#123;<br>mp[<span class="hljs-number">0</span>][j] = mp[n + <span class="hljs-number">1</span>][j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, l = <span class="hljs-number">0</span>; i &lt;= n + <span class="hljs-number">1</span>; ++i) <br><span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;?&#x27;</span> &amp;&amp; mp[i - <span class="hljs-number">1</span>][j] != <span class="hljs-string">&#x27;?&#x27;</span>) l = i - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mp[i][j] != <span class="hljs-string">&#x27;?&#x27;</span> &amp;&amp; mp[i - <span class="hljs-number">1</span>][j] == <span class="hljs-string">&#x27;?&#x27;</span>) &#123;<br><span class="hljs-keyword">int</span> cnt = (mp[l][j] == <span class="hljs-string">&#x27;#&#x27;</span>) + (mp[i][j] == <span class="hljs-string">&#x27;#&#x27;</span>);<br><span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">2</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>ans = <span class="hljs-number">1l</span>l * ans * (cnt ? <span class="hljs-number">1</span> : i - l) % mod;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="i---iq-game">*I - IQ Game</h2><blockquote><p><span class="math inline">\(n\le 10^9\)</span> 个点围成一圈，有 <spanclass="math inline">\(k\le 200\)</span> 个是黑点，其余是白点，且 <spanclass="math inline">\(k\)</span> 个点中有一个是炸弹。</p><p>每轮随机选一个点，然后找到他顺时针方向的第一个黑点，如果是炸弹游戏结束，否则将这个黑点变白。</p><p>问游戏进行的期望轮数。</p></blockquote><p>首先要有一个核心思路，对于值恒正的随机变量 <spanclass="math inline">\(x\)</span> ，有 <spanclass="math inline">\(E(x)=\sum_{i=1}^{\infty} P(x\ge i)\)</span> 。</p><p>注意到游戏 <span class="math inline">\(k\)</span>轮之后必定结束，所以只要求出 <span class="math inline">\(0\le i&lt;k\)</span> 轮游戏不结束的概率即可。</p><p>考虑将换从炸弹处断开，按照逆时针方向以炸弹为起点向后延申，以特殊点分段。</p><p>那么游戏不结束的要求就是：第一段里的点不能选，第二段最多选一个，<strong>前三段</strong>最多选两个，以此类推。</p><p>发现要求是前 <span class="math inline">\(i\)</span> 段最多选 <spanclass="math inline">\(i-1\)</span> 个，设 <spanclass="math inline">\(f[i][j]\)</span> 表示在前 <spanclass="math inline">\(i\)</span> 段选了 <spanclass="math inline">\(j\)</span> 次，没有违背要求的概率，答案就是 <spanclass="math inline">\(\sum_{j=0}^{k-1} f[n][j]\)</span> 。</p><p>转移枚举最后一段选了几个，然后再将这些插入到此前的操作序列中，即<span class="math inline">\(f[i][j] = \sum_{k=0}^j f[i-1][j-k]\times{j\choose k}\times (\frac{len_i}{n})^k\)</span></p><p>直接做复杂度 <span class="math inline">\(\mathcal{O}(n^3)\)</span>的可过，不过转移是个卷积的形式，可以优化到 <spanclass="math inline">\(\mathcal{O}(n^2\log n)\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 207</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 998244353</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> t)</span> </span>&#123;<br><span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (; t; t &gt;&gt;= <span class="hljs-number">1</span>, x = <span class="hljs-number">1l</span>l * x * x % mod)<br><span class="hljs-keyword">if</span> (t &amp; <span class="hljs-number">1</span>) res = <span class="hljs-number">1l</span>l * res * x % mod;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br>ll pos[N], p[N][N], c[N][N], f[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(), m = rd(), s = rd();<br><span class="hljs-keyword">int</span> invn = fpow(n, mod - <span class="hljs-number">2</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; ++i) &#123;<br>c[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; ++j) c[i][j] = (c[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + c[i - <span class="hljs-number">1</span>][j]) % mod;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>pos[i] = rd(); <span class="hljs-keyword">if</span> (pos[i] &gt; s) pos[i] -= n;<br>&#125;<br>pos[<span class="hljs-number">0</span>] = s - n;<br>sort(pos + <span class="hljs-number">1</span>, pos + <span class="hljs-number">1</span> + m);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>p[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>p[i][<span class="hljs-number">1</span>] = <span class="hljs-number">1l</span>l * (pos[m - i + <span class="hljs-number">1</span>] - pos[m - i]) * invn % mod;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>; j &lt;= m; ++j) p[i][j] = p[i][j - <span class="hljs-number">1</span>] * p[i][<span class="hljs-number">1</span>] % mod;<br>&#125;<br>f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; ++j)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt;= j; ++k) <br>f[i][j] = (f[i][j] + c[j][k] * f[i - <span class="hljs-number">1</span>][j - k] % mod * p[i][k]) % mod;<br>ll ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; ++j) ans = (ans + f[m][j]) % mod;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="k---k-shaped-figures">K - K-Shaped Figures</h2><blockquote><p>给定平面上 <span class="math inline">\(n\le 10^3\)</span>个线段，问有多少个 <span class="math inline">\(K\)</span>，定义三条线段构成了一个 <code>K</code> ：</p><ul><li>其中两条交于一点，且这一点在第三条线段内（不能是端点）</li><li>前两条线在第三条线的同侧，且三条线两两不共线。</li></ul></blockquote><h3 id="做法一">做法一</h3><p>自然的枚举这个中心点，找出来穿过该点的线段 <spanclass="math inline">\(\{A\}\)</span>，和以该点为端点的线段 <spanclass="math inline">\(\{B\}\)</span> ，都按该点为中心极角序排序。</p><p>然后对于每个穿过该点的线段 <span class="math inline">\(A\)</span>，线段两侧的 <span class="math inline">\(B\)</span>线段下标一定依极角序连续，双指针找出来这个区间即可。</p><p>对于不能共线，问题相当于计数给定 <spanclass="math inline">\(n\)</span>个集合，先选两个集合，再从这两个集合中各自选一个数的方案数。</p><p>考虑减掉不合法的方案数，则答案为 <span class="math inline">\({\suma_i\choose 2} - \sum {a_i\choose 2}\)</span> ，分两项维护即可。</p><p>为了避免讨论，我们需要保证任意时刻直线每一侧都有点，因此加入四个垂直方向的虚拟点即可。</p><p>注意到双指针旋转时，如果角度超过了 <spanclass="math inline">\(180^\circ\)</span>可能会出现问题，所以再插入垂直方向的四条直线即可。</p><p>复杂度为 <span class="math inline">\(\mathcal{O}(n^2\log n)\)</span>。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> letp const P</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span> &#123;</span><br>ll x, y;<br>P(ll x = <span class="hljs-number">0</span>, ll y = <span class="hljs-number">0</span>) : x(x), y(y) &#123;&#125;<br>P <span class="hljs-keyword">operator</span> + (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x + p.x, y + p.y&#125;;&#125;<br>P <span class="hljs-keyword">operator</span> - (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x - p.x, y - p.y&#125;;&#125;<br>ll <span class="hljs-keyword">operator</span> | (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x * p.x + y * p.y;&#125; <span class="hljs-comment">// dot</span><br>ll <span class="hljs-keyword">operator</span> ^ (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x * p.y - y * p.x;&#125; <span class="hljs-comment">// cross</span><br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x &lt; p.x || (x == p.x &amp;&amp; y &lt; p.y);&#125;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> == (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x == p.x &amp;&amp; y == p.y;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ori</span><span class="hljs-params">(letp &amp;p)</span> <span class="hljs-keyword">const</span> </span>&#123;ll t = (*<span class="hljs-keyword">this</span>) ^ p; <span class="hljs-keyword">return</span> (t &gt; <span class="hljs-number">0</span>) - (t &lt; <span class="hljs-number">0</span>);&#125;<br>&#125;;<br><br><span class="hljs-built_in">vector</span>&lt;P&gt; pt;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">argcmp</span> &#123;</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(letp &amp;a, letp &amp;b)</span> <span class="hljs-keyword">const</span> </span>&#123;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> quad = [](letp &amp;a) &#123;<br><span class="hljs-keyword">if</span> (a.y &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (a.y &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br><span class="hljs-keyword">if</span> (a.x &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">if</span> (a.x &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> qa = quad(a), qb = quad(b);<br><span class="hljs-keyword">if</span> (qa != qb) <span class="hljs-keyword">return</span> qa &lt; qb;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> t = (a ^ b);<br><span class="hljs-keyword">return</span> t &gt; <span class="hljs-number">0</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span> &#123;</span><br>P a, b;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">is_on</span><span class="hljs-params">(letp &amp;p)</span> <span class="hljs-keyword">const</span> </span>&#123;<br><span class="hljs-keyword">if</span> (p == a || p == b) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> (p - a).ori(p - b) == <span class="hljs-number">0</span> &amp;&amp; ((p - a) | (p - b)) &lt; <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ori</span><span class="hljs-params">(letp &amp;p)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> (b - a).ori(p - a);&#125;<br>&#125; s[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;P, S&gt;&gt; Cr;<br><br><span class="hljs-built_in">vector</span>&lt;P&gt; out;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;P, <span class="hljs-keyword">int</span>&gt;&gt; Out;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">c2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1l</span>l * x * (x - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(); pt.clear();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>P a, b; a.x = rd(); a.y = rd(); b.x = rd(); b.y = rd();<br>pt.push_back(a); pt.push_back(b); s[i] = &#123;a, b&#125;; <br>&#125;<br>sort(pt.begin(), pt.end());<br>pt.erase(unique(pt.begin(), pt.end()), pt.end());<br><br>ll ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : pt) &#123;<br>Cr.clear(); out.clear(); Out.clear();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">int</span> fl = s[i].is_on(p);<br><span class="hljs-keyword">if</span> (fl == <span class="hljs-number">1</span>) &#123;<br>Cr.push_back(<span class="hljs-built_in">make_pair</span>(s[i].a, S&#123;s[i].a, s[i].b&#125;));<br>Cr.push_back(<span class="hljs-built_in">make_pair</span>(s[i].b, S&#123;s[i].b, s[i].a&#125;));<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fl == <span class="hljs-number">-1</span>) &#123;<br>out.push_back(p == s[i].a ? s[i].b : s[i].a);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (Cr.empty()) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span> (out.empty()) <span class="hljs-keyword">continue</span>;<br>Cr.push_back(<span class="hljs-built_in">make_pair</span>(P&#123;p.x - <span class="hljs-number">100000000</span>, p.y&#125;, S&#123;P&#123;p.x - <span class="hljs-number">100000000</span>, p.y&#125;, P&#123;p.x + <span class="hljs-number">1</span>, p.y&#125;&#125;));<br>Cr.push_back(<span class="hljs-built_in">make_pair</span>(P&#123;p.x + <span class="hljs-number">100000000</span>, p.y&#125;, S&#123;P&#123;p.x + <span class="hljs-number">100000000</span>, p.y&#125;, P&#123;p.x - <span class="hljs-number">1</span>, p.y&#125;&#125;));<br>Cr.push_back(<span class="hljs-built_in">make_pair</span>(P&#123;p.x, p.y - <span class="hljs-number">100000000</span>&#125;, S&#123;P&#123;p.x, p.y - <span class="hljs-number">100000000</span>&#125;, P&#123;p.x, p.y + <span class="hljs-number">1</span>&#125;&#125;));<br>Cr.push_back(<span class="hljs-built_in">make_pair</span>(P&#123;p.x, p.y + <span class="hljs-number">100000000</span>&#125;, S&#123;P&#123;p.x, p.y + <span class="hljs-number">100000000</span>&#125;, P&#123;p.x, p.y - <span class="hljs-number">1</span>&#125;&#125;));<br><span class="hljs-keyword">auto</span> cmp = [&amp;](P &amp;a, P &amp;b) &#123;<span class="hljs-keyword">return</span> argcmp()(a - p, b - p);&#125;;<br><span class="hljs-keyword">auto</span> cmpCr = [&amp;](<span class="hljs-built_in">pair</span>&lt;P, S&gt; &amp;a, <span class="hljs-built_in">pair</span>&lt;P, S&gt; &amp;b) &#123;<span class="hljs-keyword">return</span> cmp(a.first, b.first);&#125;;<br><span class="hljs-keyword">auto</span> cmpOut = [&amp;](<span class="hljs-built_in">pair</span>&lt;P, <span class="hljs-keyword">int</span>&gt; &amp;a, <span class="hljs-built_in">pair</span>&lt;P, <span class="hljs-keyword">int</span>&gt; &amp;b) &#123;<span class="hljs-keyword">return</span> cmp(a.first, b.first);&#125;;<br><br>sort(Cr.begin(), Cr.end(), cmpCr);<br>sort(out.begin(), out.end(), cmp);<br><span class="hljs-keyword">auto</span> para = [&amp;](P &amp;a, P &amp;b) &#123;<span class="hljs-keyword">return</span> ((a - p) ^ (b - p)) == <span class="hljs-number">0</span> &amp;&amp; ((a - p) | (b - p)) &gt; <span class="hljs-number">0</span>;&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : out)<br><span class="hljs-keyword">if</span> (Out.empty() || !para(Out.back().first, x)) Out.push_back(<span class="hljs-built_in">make_pair</span>(x, <span class="hljs-number">1</span>));<br><span class="hljs-keyword">else</span> ++Out[Out.size() - <span class="hljs-number">1</span>].second;<br>Out.push_back(<span class="hljs-built_in">make_pair</span>(P&#123;p.x + <span class="hljs-number">1</span>, p.y&#125;, <span class="hljs-number">0</span>));<br>Out.push_back(<span class="hljs-built_in">make_pair</span>(P&#123;p.x - <span class="hljs-number">1</span>, p.y&#125;, <span class="hljs-number">0</span>));<br>Out.push_back(<span class="hljs-built_in">make_pair</span>(P&#123;p.x, p.y + <span class="hljs-number">1</span>&#125;, <span class="hljs-number">0</span>));<br>Out.push_back(<span class="hljs-built_in">make_pair</span>(P&#123;p.x, p.y - <span class="hljs-number">1</span>&#125;, <span class="hljs-number">0</span>));<br>sort(Out.begin(), Out.end(), cmpOut);<br><span class="hljs-keyword">int</span> sz = Out.size();<br><span class="hljs-keyword">auto</span> nxt = [&amp;](<span class="hljs-keyword">int</span> x) &#123;<span class="hljs-keyword">return</span> x == sz - <span class="hljs-number">1</span> ? <span class="hljs-number">0</span> : x + <span class="hljs-number">1</span>;&#125;;<br><span class="hljs-keyword">auto</span> pre = [&amp;](<span class="hljs-keyword">int</span> x) &#123;<span class="hljs-keyword">return</span> x == <span class="hljs-number">0</span> ? sz - <span class="hljs-number">1</span> : x - <span class="hljs-number">1</span>;&#125;;<br><span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">auto</span> pos = [&amp;](S &amp;l, P &amp;x) &#123;<span class="hljs-keyword">return</span> l.ori(x) &gt; <span class="hljs-number">0</span>;&#125;;<br>ll sum = <span class="hljs-number">0</span>, del = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!pos(Cr[<span class="hljs-number">0</span>].second, Out[r].first)) r = nxt(r);<br><span class="hljs-keyword">while</span> (pos(Cr[<span class="hljs-number">0</span>].second, Out[r].first)) r = nxt(r);<br>r = pre(r); l = r;<br><span class="hljs-keyword">while</span> (pos(Cr[<span class="hljs-number">0</span>].second, Out[l].first)) l = pre(l);<br>l = nxt(l);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = l; i != nxt(r); i = nxt(i)) &#123;<br>sum += Out[i].second; del += c2(Out[i].second);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [tmp, s] : Cr) &#123;<br><span class="hljs-keyword">while</span> (pos(s, Out[nxt(r)].first)) &#123;<br>r = nxt(r); sum += Out[r].second; del += c2(Out[r].second);<br>&#125;<br><span class="hljs-keyword">while</span> (!pos(s, Out[l].first)) &#123;<br>sum -= Out[l].second; del -= c2(Out[l].second); l = nxt(l);<br>&#125;<br><span class="hljs-keyword">if</span> (max(<span class="hljs-built_in">abs</span>(tmp.x), <span class="hljs-built_in">abs</span>(tmp.y)) &lt;= <span class="hljs-number">10000000</span>) ans += c2(sum) - del;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> t; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= t; ++i) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="做法二">做法二</h3><p>因为这题是要求全部的 <span class="math inline">\(K\)</span>的个数，所以其实暴力的复杂度是对的。</p><p>先枚举中心点，再枚举穿过他的线，再枚举所有以它为端点的线计算答案，计算方式与上一做法相同。</p><p>同向去重需要一些技巧，比如 <code>unordered_map</code> 以方向向量除<span class="math inline">\(\gcd\)</span> 做下标即可统计。</p><p>考虑以枚举点为端点的线段数的和，看似是 <spanclass="math inline">\(\mathcal{O}(n^2)\)</span> 实际上是 <spanclass="math inline">\(\mathcal{O}(n)\)</span> 的，所以总复杂度是 <spanclass="math inline">\(\mathcal{O}(n^2)\)</span> 的。</p><p>实际上由于 <code>unordered_map</code> 比 <code>sort</code>常数还大，所以跑起来并不快。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> b ? gcd(b, a % b) : a;&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N    1007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> letp const P</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span> &#123;</span><br>ll x, y;<br>P(ll x = <span class="hljs-number">0</span>, ll y = <span class="hljs-number">0</span>) : x(x), y(y) &#123;&#125;<br>P <span class="hljs-keyword">operator</span> + (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x + p.x, y + p.y&#125;;&#125;<br>P <span class="hljs-keyword">operator</span> - (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x - p.x, y - p.y&#125;;&#125;<br>P <span class="hljs-keyword">operator</span> / (<span class="hljs-keyword">int</span> t) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x / t, y / t&#125;;&#125;<br>ll <span class="hljs-keyword">operator</span> | (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x * p.x + y * p.y;&#125; <span class="hljs-comment">// dot</span><br>ll <span class="hljs-keyword">operator</span> ^ (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x * p.y - y * p.x;&#125; <span class="hljs-comment">// cross</span><br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x &lt; p.x || (x == p.x &amp;&amp; y &lt; p.y);&#125;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> == (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x == p.x &amp;&amp; y == p.y;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ori</span><span class="hljs-params">(letp &amp;p)</span> <span class="hljs-keyword">const</span> </span>&#123;ll t = (*<span class="hljs-keyword">this</span>) ^ p; <span class="hljs-keyword">return</span> (t &gt; <span class="hljs-number">0</span>) - (t &lt; <span class="hljs-number">0</span>);&#125;<br>&#125;;<br><br><span class="hljs-built_in">vector</span>&lt;P&gt; pt;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">argcmp</span> &#123;</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(letp &amp;a, letp &amp;b)</span> <span class="hljs-keyword">const</span> </span>&#123;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> quad = [](letp &amp;a) &#123;<br><span class="hljs-keyword">if</span> (a.y &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (a.y &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br><span class="hljs-keyword">if</span> (a.x &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">if</span> (a.x &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> qa = quad(a), qb = quad(b);<br><span class="hljs-keyword">if</span> (qa != qb) <span class="hljs-keyword">return</span> qa &lt; qb;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> t = (a ^ b);<br><span class="hljs-keyword">return</span> t &gt; <span class="hljs-number">0</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span> &#123;</span><br>P a, b;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">is_on</span><span class="hljs-params">(letp &amp;p)</span> <span class="hljs-keyword">const</span> </span>&#123;<br><span class="hljs-keyword">if</span> (p == a || p == b) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> (p - a).ori(p - b) == <span class="hljs-number">0</span> &amp;&amp; ((p - a) | (p - b)) &lt; <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ori</span><span class="hljs-params">(letp &amp;p)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> (b - a).ori(p - a);&#125;<br>&#125; s[N];<br><br><span class="hljs-built_in">vector</span>&lt;P&gt; B;<br><br><span class="hljs-built_in">vector</span>&lt;S&gt; A;<br><br><span class="hljs-built_in">unordered_map</span>&lt;ll, <span class="hljs-keyword">int</span>&gt; cnt;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">trans</span><span class="hljs-params">(P x)</span> </span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> ll bs = <span class="hljs-number">10000000</span>;<br><span class="hljs-keyword">return</span> (x.x + bs) * <span class="hljs-number">2</span> * bs + (x.y + bs);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">c2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1l</span>l * x * (x - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(); pt.clear();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>P a, b; a.x = rd(); a.y = rd(); b.x = rd(); b.y = rd();<br>pt.push_back(a); pt.push_back(b); s[i] = &#123;a, b&#125;; <br>&#125;<br>sort(pt.begin(), pt.end());<br>pt.erase(unique(pt.begin(), pt.end()), pt.end());<br>ll ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : pt) &#123;<br>A.clear(); B.clear();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br><span class="hljs-keyword">if</span> (p == s[i].a || p == s[i].b) &#123;<br>P dlt = (p == s[i].a ? s[i].b : s[i].a) - p;<br>dlt = dlt / gcd(<span class="hljs-built_in">abs</span>(dlt.x), <span class="hljs-built_in">abs</span>(dlt.y));<br>B.push_back(dlt);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i].is_on(p)) A.push_back(s[i]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> seg : A) &#123;<br>cnt.clear();<br><span class="hljs-keyword">int</span> suml = <span class="hljs-number">0</span>, sumr = <span class="hljs-number">0</span>, dell = <span class="hljs-number">0</span>, delr = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">auto</span> addl = [&amp;](ll x) &#123;<br>suml -= cnt[x]; dell -= c2(cnt[x]);<br>++cnt[x];<br>suml += cnt[x]; dell += c2(cnt[x]);<br>&#125;;<br><span class="hljs-keyword">auto</span> addr = [&amp;](ll x) &#123;<br>sumr -= cnt[x]; delr -= c2(cnt[x]);<br>++cnt[x];<br>sumr += cnt[x]; delr += c2(cnt[x]);<br>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> dlt : B) &#123;<br><span class="hljs-keyword">int</span> dir = seg.ori(dlt + p);<br><span class="hljs-keyword">if</span> (dir == <span class="hljs-number">1</span>) addl(trans(dlt));<br><span class="hljs-keyword">if</span> (dir == <span class="hljs-number">-1</span>) addr(trans(dlt));<br>&#125;<br>ans += c2(suml) + c2(sumr) - dell - delr;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> t; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= t; ++i) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="l---limited-swaps">L - Limited Swaps</h2><p>签到。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ii</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = ii();<br>    <span class="hljs-keyword">int</span> a[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) a[i] = ii();<br>    <span class="hljs-keyword">int</span> b[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) b[i] = ii();<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ans;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt; n; ++j)<br>            <span class="hljs-keyword">if</span> (a[j] == b[i])<br>                k = j;<br>        <span class="hljs-keyword">for</span> (; k &gt; i; --k)<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(a[k - <span class="hljs-number">1</span>] - a[k]) &lt; <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ans.push_back(k);<br>                <span class="hljs-built_in">std</span>::swap(a[k - <span class="hljs-number">1</span>], a[k]);<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> m = ans.size();<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i)<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="hljs-string">&quot; \n&quot;</span>[i == m - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="m---mex-and-cards">M - Mex and Cards</h2><blockquote><p>给定一个数集，开始 <span class="math inline">\(i\)</span> 有 <spanclass="math inline">\(a_i\)</span>个，把数集分成若干个集合，最大化所有分出来的集合 MEX 的和。</p><p>支持每次插入 / 删除一个数字，维护答案。</p></blockquote><p>线段树。讨论一下即可。可以做到一个 <spanclass="math inline">\(\log\)</span> ，回头再补。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200000</span>,maxt=maxn&lt;&lt;<span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">int</span> n,te,a[maxn+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> MIN[maxt+<span class="hljs-number">5</span>];<span class="hljs-built_in">pair</span>&lt;LL,<span class="hljs-keyword">int</span>&gt; res[maxt+<span class="hljs-number">5</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Miner</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span> </span>&#123;<span class="hljs-keyword">return</span> a[x]&lt;a[y] || a[x]==a[y] &amp;&amp; x&gt;y?x:y;&#125;<br>pair&lt;LL,int&gt; Find(int L,int R,int p,int who)&#123;<br><span class="hljs-keyword">if</span> (L==R) <span class="hljs-keyword">return</span> a[L]&lt;=a[who]?mp((LL)(a[who]-a[L])*(L<span class="hljs-number">-1</span>),L):mp(<span class="hljs-number">0L</span>L,who);<br><span class="hljs-keyword">int</span> mid=L+(R-L&gt;&gt;<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (a[who]&lt;a[MIN[p&lt;&lt;<span class="hljs-number">1</span>]]) <span class="hljs-keyword">return</span> Find(mid+<span class="hljs-number">1</span>,R,p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,who); <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">pair</span>&lt;LL,<span class="hljs-keyword">int</span>&gt; ls=Find(L,mid,p&lt;&lt;<span class="hljs-number">1</span>,who);<br><span class="hljs-keyword">return</span> mp(ls.fr+res[p].fr,res[p].sc);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> p=<span class="hljs-number">1</span>)</span></span>&#123;<br><span class="hljs-keyword">if</span> (l==r) &#123;MIN[p]=l;<span class="hljs-keyword">return</span>;&#125;<br><span class="hljs-keyword">int</span> mid=l+(r-l&gt;&gt;<span class="hljs-number">1</span>);<br>Build(l,mid,p&lt;&lt;<span class="hljs-number">1</span>);Build(mid+<span class="hljs-number">1</span>,r,p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>);<br>MIN[p]=Miner(MIN[p&lt;&lt;<span class="hljs-number">1</span>],MIN[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>res[p]=Find(mid+<span class="hljs-number">1</span>,r,p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,MIN[p&lt;&lt;<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> l=<span class="hljs-number">1</span>,<span class="hljs-keyword">int</span> r=n,<span class="hljs-keyword">int</span> p=<span class="hljs-number">1</span>)</span></span>&#123;<br><span class="hljs-keyword">if</span> (l==r) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">int</span> mid=l+(r-l&gt;&gt;<span class="hljs-number">1</span>);<br>pos&lt;=mid?Update(pos,l,mid,p&lt;&lt;<span class="hljs-number">1</span>):Update(pos,mid+<span class="hljs-number">1</span>,r,p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>);<br>MIN[p]=Miner(MIN[p&lt;&lt;<span class="hljs-number">1</span>],MIN[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>res[p]=Find(mid+<span class="hljs-number">1</span>,r,p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,MIN[p&lt;&lt;<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);n++;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>a[<span class="hljs-number">0</span>]=<span class="hljs-number">1e9</span>;Build(<span class="hljs-number">1</span>,n);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,Find(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>).fr);<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;te);te;te--)&#123;<br><span class="hljs-keyword">int</span> tp,x;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;tp,&amp;x);x++;<br>a[x]+=(tp==<span class="hljs-number">1</span>?<span class="hljs-number">1</span>:<span class="hljs-number">-1</span>);Update(x);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,Find(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>).fr);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="n---new-time">N - New Time</h2><p>签到。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> a,b,c,d,ans;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d:%d%d:%d&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d);<br><span class="hljs-keyword">if</span> (b&lt;=d)&#123;<br>ans+=d-b;<br><span class="hljs-keyword">if</span> (a&lt;=c) ans+=c-a;<br><span class="hljs-keyword">else</span> ans+=<span class="hljs-number">24</span>-a+c;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>ans+=<span class="hljs-number">60</span>-b+d;<br>a=(a+<span class="hljs-number">1</span>)%<span class="hljs-number">24</span>;<br><span class="hljs-keyword">if</span> (a&lt;=c) ans+=c-a;<br><span class="hljs-keyword">else</span> ans+=<span class="hljs-number">24</span>-a+c;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Official Contests</category>
      
      <category>ICPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Geometry</tag>
      
      <tag>STL</tag>
      
      <tag>Probabilities</tag>
      
      <tag>Tricks</tag>
      
      <tag>Segment Tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022 CCPC Guangzhou Site</title>
    <link href="/official/ccpc/22-guangzhou/"/>
    <url>/official/ccpc/22-guangzhou/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>比赛地址 ：<a href="https://codeforces.com/gym/104053">Codeforces Gym104053</a></p><p>待补：ADFGJ</p><h2 id="b---ayano-and-sequences">B - Ayano and sequences</h2><p>数据结构题，胖胖补掉了。<ahref="https://zigzagk.top/2022/11/15/2022CCPCGuangzhouB">链接</a></p><h2 id="c---customs-controls-2">*C - Customs Controls 2</h2><blockquote><p>给定一个 DAG ，保证所有点都能从 <spanclass="math inline">\(1\)</span> 到达，且都能到达 <spanclass="math inline">\(n\)</span> 。</p><p>要求给每个点分配一个点权，使得从 <spanclass="math inline">\(1\)</span> 到 <spanclass="math inline">\(n\)</span> 的所有路径经过的点权和相同。</p></blockquote><p>定义 <span class="math inline">\(dis[u]\)</span> 表示从 <spanclass="math inline">\(1\)</span> 到 <spanclass="math inline">\(u\)</span> 的距离，如果要符合最终要求，显然首先<span class="math inline">\(dis[u]\)</span> 的值要唯一。</p><p>考虑对于每个点 <span class="math inline">\(v\)</span> ，图中存在<span class="math inline">\(u\to v\)</span> 的边，那么这样的 <spanclass="math inline">\(u\)</span> 的 <spanclass="math inline">\(dis[u]\)</span> 也必须相同。</p><p>并查集把这样的点缩点，重建图，因为点权是正的，因此如果图中存在环就无解。</p><p>否则按照从 <span class="math inline">\(1\)</span> 开始的拓扑序设定<span class="math inline">\(dis[u]\)</span> 即可，<spanclass="math inline">\(v\)</span> 的点权就是 <spanclass="math inline">\(dis[v] - dis[u]\)</span> 的值（原图中存在 <spanclass="math inline">\(u\to v\)</span> ）。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DSU</span> &#123;</span><br><span class="hljs-keyword">int</span> f[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reset</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= x; ++i) f[i] = i;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">return</span> x == f[x] ? x : f[x] = find(f[x]);&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>u = find(u); v = find(v);<br><span class="hljs-keyword">return</span> (u == v ? <span class="hljs-literal">false</span> : (f[u] = v, <span class="hljs-literal">true</span>));<br>&#125; <br>&#125; dsu;<br><br><span class="hljs-keyword">int</span> deg[N], tag[N], val[N];<br><br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; in[N], out[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(), m = rd();<br>dsu.reset(n);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;deg[i] = <span class="hljs-number">0</span>; in[i].clear(); out[i].clear();&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br><span class="hljs-keyword">int</span> u = rd(), v = rd(); in[v].push_back(u);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u) <br><span class="hljs-keyword">if</span> (!in[u].empty()) &#123;<br><span class="hljs-keyword">int</span> sy = in[u][<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : in[u]) dsu.merge(x, sy);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u) &#123;<br><span class="hljs-keyword">int</span> U = dsu.find(u);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : in[u]) &#123;<br><span class="hljs-keyword">int</span> V = dsu.find(v);<br>++deg[U]; out[V].push_back(U);<br>&#125;<br>&#125;<br><span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>, cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br><span class="hljs-keyword">if</span> (dsu.find(i) == i) &#123;<br>++tot;<br><span class="hljs-keyword">if</span> (!deg[i]) q.push(i);<br>&#125;<br><span class="hljs-keyword">while</span> (!q.empty()) &#123;<br>--tot;<br><span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>tag[u] = ++cnt;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : out[u]) &#123;<br>--deg[v];<br><span class="hljs-keyword">if</span> (!deg[v]) q.push(v);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (tot) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>); <span class="hljs-keyword">return</span>;&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br>val[i] = tag[dsu.find(i)];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">int</span> ans = val[i];<br><span class="hljs-keyword">if</span> (!in[i].empty()) ans -= val[in[i][<span class="hljs-number">0</span>]];<br><span class="hljs-keyword">if</span> (i &lt; n) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ans);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="e---elevator">E - Elevator</h2><p>签到题，逆序数。要把 <span class="math inline">\(x\)</span>前面的变成 <span class="math inline">\(&gt; x\)</span> ，后面的变成<span class="math inline">\(\ge x\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; s, s1;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500007</span><br><br><span class="hljs-keyword">int</span> a[N], c[N];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (; p &lt; N; p += lowbit(p)) ++c[p];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;<br><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (; p; p -= lowbit(p)) res += c[p];<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br>ll presum[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(), m = rd() - <span class="hljs-number">2</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>a[i] = rd(); s.push_back(a[i]);<br>&#125;<br>sort(s.begin(), s.end()); s1 = s;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) presum[i] = presum[i - <span class="hljs-number">1</span>] + s1[i - <span class="hljs-number">1</span>];<br>s.erase(unique(s.begin(), s.end()), s.end());<br><span class="hljs-keyword">auto</span> calc = [&amp;](<span class="hljs-keyword">int</span> x) &#123;<br><span class="hljs-keyword">return</span> lower_bound(s.begin(), s.end(), x) - s.begin() + <span class="hljs-number">1</span>;<br>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">int</span> nw = calc(a[i]);<br>ll tot = sum(nw); add(nw);<br><span class="hljs-keyword">int</span> p = lower_bound(s1.begin(), s1.end(), a[i]) - s1.begin() + <span class="hljs-number">1</span>;<br>tot += <span class="hljs-number">1l</span>l * p * a[i] - presum[p];<br><span class="hljs-keyword">if</span> (tot &gt; m) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, tot);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="h---gamex">H - GameX</h2><blockquote><p>给定一个数集，双方轮流操作 <span class="math inline">\(k\)</span>轮，每个人往数集里加入一个非负整数。</p><p>先手想让最终数集 MEX 是偶数，后手想要是奇数，问最终结果。</p></blockquote><p>先手想让最终结果是偶数，则必不会加入偶数，只加入奇数；同理后手只会加入偶数。</p><p>再注意到如果小的奇数还没加，加大的奇数是没用的，所以一定会从小到大加。模拟即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 2000007</span><br><br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-keyword">int</span> a[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>s.clear();<br><span class="hljs-keyword">int</span> n = rd(), k = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>a[i] = rd(); vis[a[i]] = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">int</span> A = <span class="hljs-number">1</span>, B = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i) &#123;<br><span class="hljs-keyword">while</span> (vis[A]) A += <span class="hljs-number">2</span>; vis[A] = <span class="hljs-literal">true</span>; s.push_back(A);<br><span class="hljs-keyword">while</span> (vis[B]) B += <span class="hljs-number">2</span>; vis[B] = <span class="hljs-literal">true</span>; s.push_back(B);<br>&#125;<br><span class="hljs-keyword">int</span> mx = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (vis[mx]) ++mx;<br><span class="hljs-built_in">puts</span>((mx &amp; <span class="hljs-number">1</span>) ? <span class="hljs-string">&quot;Bob&quot;</span> : <span class="hljs-string">&quot;Alice&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) vis[a[i]] =<span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : s) vis[x] = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="i---infection">*I - Infection</h2><blockquote><p>给一棵树，每个点有 <span class="math inline">\(\frac{a_i}{\suma_i}\)</span> 的概率被选作根，然后被染黑。</p><p>若 <span class="math inline">\(u\)</span> 父节点被染黑，则 <spanclass="math inline">\(u\)</span> 被染黑的概率为 <spanclass="math inline">\(p_u = \frac{b_u}{c_u}\)</span> ，问染黑 <spanclass="math inline">\(k=1,2,\dots, n\)</span> 个点的概率模 <spanclass="math inline">\(10^9+7\)</span> 。</p></blockquote><p>考虑一个树上连通点集对答案的贡献： <span class="math display">\[contri_S = \sum_{root\in S}\bigg(\frac{a_{root}}{\sum a}\prod_{u\inS,u\ne root} p_u\prod_{(u,v)\in Tree, v\not\in S,u\in S}(1-p_v)\bigg)\]</span> 设 <span class="math inline">\(F[i][j]\)</span> 表示以 <spanclass="math inline">\(i\)</span> 为根的点集中有 <spanclass="math inline">\(j\)</span> 个点，且未选定初始感染点的贡献和。<span class="math inline">\(G[i][j]\)</span>表示已选定初始感染点的贡献和。</p><p>树形背包转移，复杂度 <spanclass="math inline">\(\mathcal{O}(n^2)\)</span> 。每个点把 <spanclass="math inline">\(G\)</span>数组贡献到答案中即可。树形背包实现还是很精细的...</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N   2007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 1000000007</span><br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> t = mod - <span class="hljs-number">2</span>)</span> </span>&#123;<br><span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (; t; t &gt;&gt;= <span class="hljs-number">1</span>, x = <span class="hljs-number">1l</span>l * x * x % mod)<br><span class="hljs-keyword">if</span> (t &amp; <span class="hljs-number">1</span>) res = <span class="hljs-number">1l</span>l * res * x % mod;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-comment">// f[u][v] : choose j nodes in subtree u, without root</span><br><span class="hljs-comment">// g[u][v] : choose j nodes in subtree u, already choose a root</span><br><br><span class="hljs-keyword">int</span> a[N], p[N], sz[N], f[N][N], g[N][N], ans[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa, <span class="hljs-keyword">int</span> pfa)</span> </span>&#123;<br>f[u][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa) &#123;<br>            dfs(v, u, p[u]);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = sz[u] + sz[v]; j &gt;= <span class="hljs-number">0</span>; --j) &#123; <br>            <span class="hljs-comment">// 这里本来应该开一个另外的数组来存值，最后再赋值回去的，但是注意到k=0的转移非常好写就直接赋值了</span><br>            <span class="hljs-comment">// failed at v</span><br>            f[u][j] = (ll)f[u][j] * (mod + <span class="hljs-number">1</span> - p[v]) % mod; <br>            g[u][j] = (ll)g[u][j] * (mod + <span class="hljs-number">1</span> - p[v]) % mod;<br>            <span class="hljs-comment">// choose k nodes in subtree v</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = max(<span class="hljs-number">1</span>, j - sz[u]); k &lt;= min(j, sz[v]); ++k) &#123;<br>                    f[u][j] = (f[u][j] + (ll)f[u][j - k] * f[v][k]) % mod;<br>                    g[u][j] = (g[u][j] + (ll)g[u][j - k] * f[v][k] + (ll)f[u][j - k] * g[v][k]) % mod;<br>            &#125;<br>           &#125;<br>           sz[u] += sz[v];<br>        &#125;<br>    ++sz[u];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = sz[u]; j; --j) &#123;<br>    f[u][j] = (ll)f[u][j - <span class="hljs-number">1</span>] * p[u] % mod;<br>    g[u][j] = (ll)f[u][j - <span class="hljs-number">1</span>] * a[u] % mod;<br>    <span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">1</span>) g[u][j] = (g[u][j] + (ll)g[u][j - <span class="hljs-number">1</span>] * p[u]) % mod;<br>    ans[j] = (ans[j] + (ll)g[u][j] * (mod + <span class="hljs-number">1</span> - pfa)) % mod; <span class="hljs-comment">// 注意要保证父亲没有选</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br><span class="hljs-keyword">int</span> u = rd(), v = rd(); <br>e[u].push_back(v); e[v].push_back(u);<br>&#125;<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>a[i] = rd(); sum += a[i];<br>p[i] = rd(); p[i] = (ll)p[i] * fpow(rd()) % mod;<br>&#125;<br>sum = fpow(sum);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i] = (ll)a[i] * sum % mod;<br>dfs(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="k---middle-point-graph">K - Middle Point Graph</h2><blockquote><p>给一幅图，对每个顶点，在三维立方体区域 <spanclass="math inline">\([0,0,0]\sim[1,1,1]\)</span> 中随机一个坐标。</p><p>对每条边，定义他的坐标是连接的两个顶点的中点。这样就得到了 <spanclass="math inline">\(n+m\)</span> 个坐标。</p><p>问这 <span class="math inline">\(n+m\)</span>个坐标中，选出四点共平面的方案数的期望。</p></blockquote><p>首先得知道三维空间里随机一个平面的概率是 <spanclass="math inline">\(0\)</span>，因为是连续概率。所以四个点都取自原图顶点的期望是 <spanclass="math inline">\(0\)</span> 。</p><p>所以哪些点共面其实是确定的。分讨组成情况即可。我的分讨和题解不太一样：</p><ul><li>一条边的两顶点 + 中点 +额外的一个点：额外的点在哪里都和一条线共面，方案数是 <spanclass="math inline">\(m(n+m-3)\)</span> 。</li><li>三个点通过两条边相连，选择两条边终点 + 外侧的两个端点：方案数是<span class="math inline">\(\sum_u \frac{deg_u(deg_u- 1)}{2}\)</span>，即每个点选两条边。</li><li>三元环三条边中点 + 某个顶点：方案数是 <spanclass="math inline">\(3\times\)</span> 三元环个数。</li><li>四元环的四个中点：方案数是四元环个数。</li></ul><p>求三元环和四元环的复杂度是 <spanclass="math inline">\(\mathcal{O}(m\sqrt m)\)</span>的，科技不再赘述。</p><p>其实如果讨论情况想不全的话，可以暴力随机统计然后找规律（注释掉的代码就是赛时找规律用的）。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOD=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500007</span><br><br><span class="hljs-comment">// struct vec &#123;</span><br><span class="hljs-comment">// double x, y, z;</span><br><span class="hljs-comment">// vec operator + (const vec &amp;b) &#123;return &#123;x + b.x, y + b.y, z + b.z&#125;;&#125;</span><br><span class="hljs-comment">// vec operator - (const vec &amp;b) &#123;return &#123;x - b.x, y - b.y, z - b.z&#125;;&#125;</span><br><span class="hljs-comment">// vec operator / (const double &amp;b) &#123;return &#123;x / b, y / b, z / b&#125;;&#125;</span><br><span class="hljs-comment">// &#125; p[N];</span><br><br><span class="hljs-comment">// bool det(vec a, vec b, vec c) &#123;</span><br><span class="hljs-comment">// double res = a.x * b.y * c.z +</span><br><span class="hljs-comment">//  b.x * c.y * a.z + </span><br><span class="hljs-comment">//  c.x * a.y * b.z - </span><br><span class="hljs-comment">//  a.x * c.y * b.z -</span><br><span class="hljs-comment">//  b.x * a.y * c.z - </span><br><span class="hljs-comment">//  c.x * b.y * a.z;</span><br><span class="hljs-comment">// return abs(res) &lt;= 1e-8; </span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// inline double randp() &#123;</span><br><span class="hljs-comment">// return 1.0 * rand() / RAND_MAX;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// inline void work() &#123;</span><br><span class="hljs-comment">// int n = rd(), m = rd();</span><br><span class="hljs-comment">// int k = n;</span><br><span class="hljs-comment">// for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class="hljs-comment">// p[i].x = randp();</span><br><span class="hljs-comment">// p[i].y = randp();</span><br><span class="hljs-comment">// p[i].z = randp();</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// for (int i = 1; i &lt;= m; ++i) &#123;</span><br><span class="hljs-comment">// int u = rd(), v = rd();</span><br><span class="hljs-comment">// p[++n] = (p[u] + p[v]) / 2;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// int ans = 0;</span><br><span class="hljs-comment">// for (int a = 1; a &lt;= k; ++a)</span><br><span class="hljs-comment">// for (int b = a + 1; b &lt;= k; ++b)</span><br><span class="hljs-comment">// for (int c = b + 1; c &lt;= n; ++c)</span><br><span class="hljs-comment">// for (int d = c + 1; d &lt;= n; ++d) </span><br><span class="hljs-comment">// if (det(p[b] - p[a], p[c] - p[a], p[d] - p[a])) &#123;</span><br><span class="hljs-comment">// ++ans; printf(&quot;%d %d %d %d\n&quot;, a, b, c, d);</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// printf(&quot;%d\n&quot;, ans);</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-keyword">int</span> n,m,X[N],Y[N],d[N],ti,vis[N],cnt[N];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N],h[N];<br>ll ans3,ans4;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;i,<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;j)</span> </span>&#123;<span class="hljs-keyword">return</span> d[i]&lt;d[j] || (d[i]==d[j] &amp;&amp; i&lt;j);&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">workz</span><span class="hljs-params">()</span></span>&#123;<br>n=rd();m=rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) d[i]=<span class="hljs-number">0</span>,cnt[i]=<span class="hljs-number">0</span>,e[i].clear(),h[i].clear();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>X[i]=rd();Y[i]=rd();d[X[i]]++;d[Y[i]]++;<br>h[X[i]].push_back(Y[i]);h[Y[i]].push_back(X[i]);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++) cmp(X[i],Y[i])?e[X[i]].push_back(Y[i]):e[Y[i]].push_back(X[i]);<br>ans3=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>ti++;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x:e[X[i]]) vis[x]=ti;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x:e[Y[i]]) <span class="hljs-keyword">if</span> (vis[x]==ti) ans3++;<br>&#125;<br>ans4=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x=<span class="hljs-number">1</span>;x&lt;=n;x++)&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y:h[x])<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> z:e[y])<br><span class="hljs-keyword">if</span> (cmp(x,z)) ans4+=cnt[z],cnt[z]++;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y:h[x])<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> z:e[y])<br>cnt[z]=<span class="hljs-number">0</span>;<br>&#125;<br>ll ans=(ll)m*(n+m<span class="hljs-number">-3</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) ans+=(ll)d[i]*(d[i]<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>;<br>ans+=<span class="hljs-number">3</span>*ans3;ans+=ans4;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans%MOD);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) workz();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="l---station-of-fate">L - Station of Fate</h2><blockquote><p><span class="math inline">\(n\)</span> 个人分成 <spanclass="math inline">\(m\)</span> 个可区分的非空队列的方案数。</p></blockquote><p>顺序有 <span class="math inline">\(n!\)</span> 种，插板法划分成 <spanclass="math inline">\(m\)</span> 个非空序列，总方案数为 <spanclass="math inline">\(n!{n-1\choose m - 1}\)</span></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 998244353</span><br><br><span class="hljs-keyword">int</span> fac[N], ifac[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (; t; t &gt;&gt;= <span class="hljs-number">1</span>, x = <span class="hljs-number">1l</span>l * x * x % mod)<br>        <span class="hljs-keyword">if</span> (t &amp; <span class="hljs-number">1</span>) res = <span class="hljs-number">1l</span>l * res * x % mod;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1l</span>l * fac[n] * ifac[m] % mod * ifac[n - m] % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-number">1l</span>l * fac[n] * C(n - <span class="hljs-number">1</span>, m - <span class="hljs-number">1</span>) % mod);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    fac[<span class="hljs-number">0</span>] = ifac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) fac[i] = <span class="hljs-number">1l</span>l * fac[i - <span class="hljs-number">1</span>] * i % mod;<br>    ifac[N - <span class="hljs-number">1</span>] = fpow(fac[N - <span class="hljs-number">1</span>], mod - <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = N - <span class="hljs-number">2</span>; i; --i) ifac[i] = <span class="hljs-number">1l</span>l * ifac[i + <span class="hljs-number">1</span>] * (i + <span class="hljs-number">1</span>) % mod;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Official Contests</category>
      
      <category>CCPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Geometry</tag>
      
      <tag>Graphs</tag>
      
      <tag>Constructive Algorithm</tag>
      
      <tag>Probabilities</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020-2021 ICPC Asia Yinchuan Regional</title>
    <link href="/official/icpc/20-asia-yinchuan/"/>
    <url>/official/icpc/20-asia-yinchuan/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>比赛地址 ：<a href="https://codeforces.com/gym/104022">Codeforces Gym104022</a></p><p>待补：CFIL</p><h2 id="a---best-player">A - Best Player</h2><blockquote><p>给定一个三维点集，问去掉哪一维之后本质不同的点最多。</p></blockquote><p>模拟。<code>map&lt;pair&lt;int, int&gt;, bool&gt;</code> 去重。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 107</span><br><br><span class="hljs-keyword">int</span> x[N], y[N], z[N];<br><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;, <span class="hljs-keyword">bool</span>&gt; vis;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>x[i] = rd(); y[i] = rd(); z[i] = rd();<br>&#125;<br><span class="hljs-keyword">int</span> X = <span class="hljs-number">0</span>, Y = <span class="hljs-number">0</span>, Z = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>pii nw = <span class="hljs-built_in">make_pair</span>(y[i], z[i]);<br><span class="hljs-keyword">if</span> (vis[nw]) <span class="hljs-keyword">continue</span>;<br>vis[nw] = <span class="hljs-literal">true</span>; ++X;<br>&#125;<br>vis.clear();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>pii nw = <span class="hljs-built_in">make_pair</span>(x[i], y[i]);<br><span class="hljs-keyword">if</span> (vis[nw]) <span class="hljs-keyword">continue</span>;<br>vis[nw] = <span class="hljs-literal">true</span>; ++Z;<br>&#125;<br>vis.clear();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>pii nw = <span class="hljs-built_in">make_pair</span>(x[i], z[i]);<br><span class="hljs-keyword">if</span> (vis[nw]) <span class="hljs-keyword">continue</span>;<br>vis[nw] = <span class="hljs-literal">true</span>; ++Y;<br>&#125;<br><span class="hljs-keyword">if</span> (X &gt;= Y &amp;&amp; X &gt;= Z) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;X&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Y &gt;= X &amp;&amp; Y &gt;= Z) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Y&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Z&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="b---the-great-wall">*B - The Great Wall</h2><blockquote><p>一个长度为 <span class="math inline">\(n\ (1\le n\le 10^4)\)</span>的数列 <span class="math inline">\(a_1,a_2,\dots,a_n\)</span>，划分成<span class="math inline">\(k\)</span> 段，假设第 <spanclass="math inline">\(i\)</span> 段是 <spanclass="math inline">\([l_i,r_i]\)</span> ，最大化： <spanclass="math display">\[\sum_{i=1}^k\bigg(\max_{l_i\le j\le r_i} a_j-\min_{l_i\le j\le r_i}a_j\bigg)\]</span> 对 <span class="math inline">\(k=1,2,\dots,n\)</span>求出答案。</p></blockquote><p>Trick 题，需要转换一下。注意到 <span class="math display">\[\max_{l_i\le j\le r_i} a_j-\min_{l_i\le j\le r_i} a_j = \max_{l_i\lej,k\le r_i}\big(a_j-a_k\big)\]</span>目标优化的方向（要求差值和最大）和差值优化方向（差值最大）相同，所以问题可以变成最大化每段内任选两个的差值和。</p><p>设 <code>f[i][j][0/1/2/3]</code> 表示前 <spanclass="math inline">\(i\)</span> 个分了 <spanclass="math inline">\(j\)</span> 段，当前一个都没选 / 只选了一个 <spanclass="math inline">\(-a_k\)</span> / 只选了一个 <spanclass="math inline">\(+a_j\)</span> / 两个都选了的最大和。</p><p>注意初始化为 <span class="math inline">\(-\infty\)</span> （因为<code>f[i][j][1]</code> 状态可能有负值），转移要考虑 <spanclass="math inline">\(j=k\)</span> （选在同一个数）的情况。</p><p>空间比较紧，需要把第一维滚动数组。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmax</span><span class="hljs-params">(T &amp;a, T b)</span> </span>&#123;<span class="hljs-keyword">return</span> a &lt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>;&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 10007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-keyword">int</span> a[N], f[<span class="hljs-number">2</span>][N][<span class="hljs-number">4</span>];<br><br><span class="hljs-comment">// 1 : - a[y]</span><br><span class="hljs-comment">// 2 : a[x]</span><br><span class="hljs-comment">// 3 : a[x] - a[y]</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i] = rd();<br><span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0xcf</span>, <span class="hljs-keyword">sizeof</span>(f));<br>f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">int</span> nw = (i &amp; <span class="hljs-number">1</span>);<br><span class="hljs-keyword">int</span> pre = <span class="hljs-number">1</span> - nw;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; ++k) f[nw][j][k] = f[pre][j][k];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) &#123;<br>getmax(f[nw][j][<span class="hljs-number">0</span>], f[pre][j - <span class="hljs-number">1</span>][<span class="hljs-number">3</span>]);<br>getmax(f[nw][j][<span class="hljs-number">1</span>], max(f[pre][j][<span class="hljs-number">0</span>], f[pre][j - <span class="hljs-number">1</span>][<span class="hljs-number">3</span>]) - a[i]);<br>getmax(f[nw][j][<span class="hljs-number">2</span>], max(f[pre][j][<span class="hljs-number">0</span>], f[pre][j - <span class="hljs-number">1</span>][<span class="hljs-number">3</span>]) + a[i]);<br>getmax(f[nw][j][<span class="hljs-number">3</span>], max(&#123;f[pre][j - <span class="hljs-number">1</span>][<span class="hljs-number">3</span>], f[pre][j][<span class="hljs-number">1</span>] + a[i], f[pre][j][<span class="hljs-number">2</span>] - a[i]&#125;));<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f[n &amp; <span class="hljs-number">1</span>][j][<span class="hljs-number">3</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="d---farm">*D - Farm</h2><blockquote><p><span class="math inline">\(n\ (n\le 10^5)\)</span> 个点的图，有<span class="math inline">\(m\ (m\le 5\times 10^5)\)</span>条边可以选择是否加入，求连通最小代价。</p><p>此外有 <span class="math inline">\(q\ (q\le 16)\)</span>个要求，每个要求 <span class="math inline">\(a_i\)</span> 和 <spanclass="math inline">\(b_i\)</span> 两条边中至少有一条被加入。</p></blockquote><p>先把要求涉及到的 <span class="math inline">\(2q\)</span>条边加入到图中，在此基础上跑 Kruskal ，新加入的边集称作 <code>out</code>。</p><p><code>out</code> 中的边一定是存在在最终答案中的。再把图清空，只加入<code>out</code> 中的边，然后按照连通性缩点。</p><p>这样子顶点最多只有 <span class="math inline">\(64\)</span>个，有意义的边最多只有 <span class="math inline">\(\frac{64\times63}{2}=2016\)</span> 条。</p><p>然后 <span class="math inline">\(2^q\)</span>枚举每个条件至少选了哪一个，然后暴力把这些边加入，然后对这 <spanclass="math inline">\(2016\)</span> 条边再跑 Kruskal 即可。</p><p>因为每次不用重新排序，所以复杂度是 <spanclass="math inline">\(\mathcal{O}(2^q\times 2016+m\log m)\)</span>的，约 <span class="math inline">\(2\times 10^8\)</span>几乎没常数。</p><p>*坑：缩点之后每条边的顶点要维护，不能用的时候再 <code>find</code>，因为每次并查集不是所有点都恢复，<code>find</code>会找到错误的位置。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 500007</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(s) (s).begin(), (s).end()</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span><span class="hljs-keyword">int</span> u, v, w;&#125; e[M];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; vertex, sel;<br><br><span class="hljs-built_in">vector</span>&lt;edge&gt; E, out;<br><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;, <span class="hljs-keyword">bool</span>&gt; vis;<br><br><span class="hljs-keyword">int</span> f[N], id[<span class="hljs-number">20</span>][<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">return</span> x == f[x] ? x : f[x] = find(f[x]);&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>    u = find(u); v = find(v);<br>    <span class="hljs-keyword">return</span> u == v ? <span class="hljs-literal">false</span> : (f[u] = v, <span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) f[i] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), v = rd(), w = rd();<br>        E.push_back(e[i] = &#123;u, v, w&#125;);<br>    &#125;<br>    sort(all(E), [&amp;](edge &amp;a, edge &amp;b)&#123;<span class="hljs-keyword">return</span> a.w &lt; b.w;&#125;);<br>    <span class="hljs-keyword">int</span> q = rd(), cnt = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; q; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">1</span>; ++j) &#123;<br>            id[i][j] = rd(); cnt -= merge(e[id[i][j]].u, e[id[i][j]].v);<br>        &#125;<br><br>    <span class="hljs-keyword">int</span> add = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> ed : E) <br>        <span class="hljs-keyword">if</span> (merge(ed.u, ed.v)) &#123;--cnt; add += ed.w; out.push_back(ed);&#125;<br>    <span class="hljs-keyword">if</span> (cnt) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125; <span class="hljs-comment">// not connected</span><br>    <br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">1e9</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) f[i] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> ed : out) merge(ed.u, ed.v);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-keyword">if</span> (f[i] == i) vertex.push_back(i);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        e[i].u = find(e[i].u); e[i].v = find(e[i].v);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> ed : E) &#123; <span class="hljs-comment">// reduction</span><br>        <span class="hljs-keyword">int</span> u = find(ed.u), v = find(ed.v);<br>        <span class="hljs-keyword">if</span> (u == v || vis[<span class="hljs-built_in">make_pair</span>(u, v)]) <span class="hljs-keyword">continue</span>;<br>        vis[<span class="hljs-built_in">make_pair</span>(u, v)] = <span class="hljs-literal">true</span>; E[cnt++] = &#123;u, v, ed.w&#125;; <br>    &#125;<br>    E.resize(cnt);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">1</span> &lt;&lt; q); ++i) &#123;<br>        <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">0</span>; sel.clear();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : vertex) f[x] = x;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; q; ++j) sel.push_back(id[j][(i &gt;&gt; j) &amp; <span class="hljs-number">1</span>]);<br>        sort(all(sel));<br>        sel.erase(unique(all(sel)), sel.end());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> ID : sel) &#123;tmp += e[ID].w; merge(e[ID].u, e[ID].v);&#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> ed : E) <span class="hljs-keyword">if</span> (merge(ed.u, ed.v)) tmp += ed.w;<br>        ans = min(ans, tmp);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans + add);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="e---isomerism">E - Isomerism</h2><p>阅读理解，胖胖做的。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> te,A,B,C,D;<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-keyword">int</span>&gt; f;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">readi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x)</span></span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> s;<br><span class="hljs-built_in">cin</span>&gt;&gt;s;<br>x=f[s];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>f[<span class="hljs-string">&quot;-F&quot;</span>]=<span class="hljs-number">8</span>;<br>f[<span class="hljs-string">&quot;-Cl&quot;</span>]=<span class="hljs-number">7</span>;<br>f[<span class="hljs-string">&quot;-Br&quot;</span>]=<span class="hljs-number">6</span>;<br>f[<span class="hljs-string">&quot;-I&quot;</span>]=<span class="hljs-number">5</span>;<br>f[<span class="hljs-string">&quot;-CH3&quot;</span>]=<span class="hljs-number">4</span>;<br>f[<span class="hljs-string">&quot;-CH2CH3&quot;</span>]=<span class="hljs-number">3</span>;<br>f[<span class="hljs-string">&quot;-CH2CH2CH3&quot;</span>]=<span class="hljs-number">2</span>;<br>f[<span class="hljs-string">&quot;-H&quot;</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;te);te;te--)&#123;<br>readi(A);readi(B);readi(C);readi(D);<br><span class="hljs-keyword">if</span> (A==C || B==D) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;None&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (A==B || A==D || B==C || C==D)&#123;<br><span class="hljs-keyword">if</span> (A==B || C==D) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Cis&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Trans&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (A&gt;C &amp;&amp; B&gt;D || A&lt;C &amp;&amp; B&lt;D) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Zasamman&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Entgegen&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="g---photograph">G - Photograph</h2><blockquote><p><span class="math inline">\(n\ (n\le 10^5)\)</span> 个人编号 <spanclass="math inline">\(1\sim n\)</span> ，编号为 <spanclass="math inline">\(i\)</span> 的人身高 <spanclass="math inline">\(h_i\)</span> ，现在要去拍合照。</p><p>给定一个 <span class="math inline">\(1\sim n\)</span> 的排列 <spanclass="math inline">\(p\)</span> ，代表 <spanclass="math inline">\(n\)</span> 个人来的顺序，初始没人，第 <spanclass="math inline">\(i\)</span> 个加入的是编号为 <spanclass="math inline">\(p_i\)</span> 的人。</p><p>每个人加入之后，都要新拍一张照片，也就是一共会拍 <spanclass="math inline">\(n\)</span> 张照片。</p><p>拍照片时，所有人会按照<strong>编号</strong>从小到大排列，然后定义照片的和谐度为相邻两个人身高差值的平方和。</p><p>形式化的，对于第 <span class="math inline">\(k\)</span>张照片，假设将 <span class="math inline">\(p_1,p_2,\dots,p_k\)</span>从小到大排序后为 <span class="math inline">\(q_1,q_2,\dots, q_k\)</span>，和谐度为 <spanclass="math inline">\(\sum_{i=1}^{k-1}(h_{q_i}-h_{q_{i+1}})^2\)</span></p><p>现请你求出 <span class="math inline">\(n\)</span>张照片的和谐度之和。</p><p>接下来，<span class="math inline">\(Q\ (Q\le 100)\)</span>次询问，每次将序列向左 Shift <spanclass="math inline">\((k+lastans)\)</span> 次，再求答案。</p></blockquote><p>时间倒流，开始所有人都在，每次相当于把两个区间合并，链表维护。复杂度<span class="math inline">\(O(nQ)\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 10007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><br><span class="hljs-keyword">int</span> h[N], p[N], l[N], r[N];<br><br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(), q = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) h[i] = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) p[i] = rd();<br>ll ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">auto</span> sqr = [&amp;](<span class="hljs-keyword">int</span> x) &#123;<span class="hljs-keyword">return</span> x * x;&#125;;<br><span class="hljs-keyword">auto</span> pre = [&amp;](<span class="hljs-keyword">int</span> x) &#123;<span class="hljs-keyword">return</span> x == <span class="hljs-number">1</span> ? n : x - <span class="hljs-number">1</span>;&#125;;<br><span class="hljs-keyword">auto</span> work = [&amp;](<span class="hljs-keyword">int</span> x) &#123;<br>x = pre(x);<br>s.clear(); ans = <span class="hljs-number">0</span>;<br>ll nw = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>l[i] = i - <span class="hljs-number">1</span>; r[i] = i + <span class="hljs-number">1</span>;<br>nw += sqr(h[i + <span class="hljs-number">1</span>] - h[i]);<br>&#125;<br>l[n] = n - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>ans += nw;<br><span class="hljs-keyword">int</span> id = p[x];<br><span class="hljs-keyword">if</span> (l[id]) nw -= sqr(h[id] - h[l[id]]);<br><span class="hljs-keyword">if</span> (r[id]) nw -= sqr(h[id] - h[r[id]]);<br><span class="hljs-keyword">if</span> (l[id] &amp;&amp; r[id]) nw += sqr(h[l[id]] - h[r[id]]);<br>r[l[id]] = r[id];<br>l[r[id]] = l[id]; <br>x = pre(x);<br>&#125; <br>&#125;;<br><span class="hljs-keyword">int</span> st = <span class="hljs-number">1</span>;<br>work(st); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; ++i) &#123;<br><span class="hljs-keyword">int</span> k = (rd() + ans) % n;<br>st = (st + k - <span class="hljs-number">1</span>) % n + <span class="hljs-number">1</span>;<br>work(st); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="h---absolute-space">**H - Absolute Space</h2><blockquote><p>构造一个大小不超过 <span class="math inline">\(100\)</span>的点集，满足对于其中任意一个点，集合中恰好都有 <spanclass="math inline">\(n\ (n\le 10)\)</span> 个点与他距离为 <spanclass="math inline">\(1\)</span> 。</p></blockquote><p>首先对于 <span class="math inline">\(n\le 4\)</span> 的情况：长度为<span class="math inline">\(1\)</span>的线段；正三角形；正四面体；正八面体；</p><p>对于 <span class="math inline">\(n=k&gt;4\)</span>的情况，很容易想到把 <span class="math inline">\(k-1\)</span>的解复制一份，使得每个点和原本的距离为 <spanclass="math inline">\(1\)</span> ，但点数会超。</p><p>理性思考一下，这个过程其实是 <span class="math inline">\(n=1\)</span>的解和 <span class="math inline">\(n=k-1\)</span>的解的闵可夫斯基和。那换成 <span class="math inline">\(n=x\)</span> 和<span class="math inline">\(n=k-x\)</span> 合并可不可以呢？</p><p><strong>正确性</strong>：假设 <span class="math inline">\(A\)</span>是 <span class="math inline">\(n=k_1\)</span> 的解，<spanclass="math inline">\(B\)</span> 是 <spanclass="math inline">\(n=k_2\)</span> 的解，现在相当于证明 <spanclass="math inline">\(\forall p_a\in A,p_b\in B\)</span> ： <spanclass="math display">\[\sum_{a\in A,b\in B} [dis(a + b, p_a + p_b) = 1]=k_1+k_2\]</span> 首先注意到：1. <span class="math inline">\(a=pa\)</span>，会有 <span class="math inline">\(k_2\)</span> 个 <spanclass="math inline">\(b\)</span> 符合条件；2. <spanclass="math inline">\(b=pb\)</span> ，会有 <spanclass="math inline">\(k_1\)</span> 个 <spanclass="math inline">\(a\)</span> 符合条件;</p><p>且这两个情况交集为空，所以已经构成了所求的 <spanclass="math inline">\(k_1+k_2\)</span> 个点。</p><p>对于其他情况，只需要把 <span class="math inline">\(A\)</span> 或<span class="math inline">\(B\)</span>里所有点整体沿着三个轴都随机旋转一个角度，就可以避免恰好凑出距离 <spanclass="math inline">\(=1\)</span> 的情况。</p><p><strong>合法性</strong>：最小化闵可夫斯基和大小 <spanclass="math inline">\(=size[k-x]\times size[x]\)</span>时，所需的点数分别为：<spanclass="math inline">\(12,16,24,36,64,96\)</span> 刚好。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-4</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> z(x)   (abs((x)) &lt;= eps)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x) * (x)) </span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> letp const P</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span> &#123;</span><br>    <span class="hljs-keyword">double</span> x, y, z;<br>    P <span class="hljs-keyword">operator</span> + (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x + p.x, y + p.y, z + p.z&#125;;&#125; <br>    P <span class="hljs-keyword">operator</span> - (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x - p.x, y - p.y, z - p.z&#125;;&#125; <br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> == (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x == p.x &amp;&amp; y == p.y &amp;&amp; z == p.z;&#125;<br>    <span class="hljs-function">P <span class="hljs-title">rotx</span><span class="hljs-params">(<span class="hljs-keyword">double</span> ang)</span> <span class="hljs-keyword">const</span> </span>&#123; <br>        <span class="hljs-keyword">double</span> cosa = <span class="hljs-built_in">cos</span>(ang), sina = <span class="hljs-built_in">sin</span>(ang);<br>        <span class="hljs-keyword">return</span> &#123;x, y * cosa - z * sina, y * sina + z * cosa&#125;;<br>    &#125;<br>    <span class="hljs-function">P <span class="hljs-title">roty</span><span class="hljs-params">(<span class="hljs-keyword">double</span> ang)</span> <span class="hljs-keyword">const</span> </span>&#123; <br>        <span class="hljs-keyword">double</span> cosa = <span class="hljs-built_in">cos</span>(ang), sina = <span class="hljs-built_in">sin</span>(ang);<br>        <span class="hljs-keyword">return</span> &#123;x * cosa - z * sina, y, x * sina + z * cosa&#125;;<br>    &#125; <br>    <span class="hljs-function">P <span class="hljs-title">rotz</span><span class="hljs-params">(<span class="hljs-keyword">double</span> ang)</span> <span class="hljs-keyword">const</span> </span>&#123; <br>        <span class="hljs-keyword">double</span> cosa = <span class="hljs-built_in">cos</span>(ang), sina = <span class="hljs-built_in">sin</span>(ang);<br>        <span class="hljs-keyword">return</span> &#123;x * cosa - y * sina, x * sina + y * cosa, z&#125;;<br>    &#125; <br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">double</span> <span class="hljs-title">dis</span><span class="hljs-params">(letp &amp;p)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(sqr(x - p.x) + sqr(y - p.y) + sqr(z - p.z));<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;P&gt; &amp;s, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : s) &#123;<br>        <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : s) &#123; <br>            <span class="hljs-keyword">if</span> (x == y) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">double</span> d = x.dis(y);<br>            <span class="hljs-keyword">if</span> (z(d)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> (z(d - <span class="hljs-number">1.0</span>)) ++cnt;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (cnt != n) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-built_in">vector</span>&lt;P&gt; <span class="hljs-title">random_rotate</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;P&gt; &amp;s)</span> </span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;P&gt; res = s;<br>    <span class="hljs-keyword">double</span> ang = <span class="hljs-number">360.0</span> * rand() / RAND_MAX;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;x : res) x = x.rotx(ang); <br>    ang = <span class="hljs-number">360.0</span> * rand() / RAND_MAX;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;x : res) x = x.roty(ang); <br>    ang = <span class="hljs-number">360.0</span> * rand() / RAND_MAX;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;x : res) x = x.rotz(ang); <br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-built_in">vector</span>&lt;P&gt; ans[<span class="hljs-number">11</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ans[<span class="hljs-number">1</span>].pb(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;); ans[<span class="hljs-number">1</span>].pb(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;);<br>    ans[<span class="hljs-number">2</span>] = ans[<span class="hljs-number">1</span>]; ans[<span class="hljs-number">2</span>].pb(&#123;<span class="hljs-number">0.5</span>, <span class="hljs-built_in">sqrt</span>(<span class="hljs-number">3</span>) / <span class="hljs-number">2</span>, <span class="hljs-number">0</span>&#125;);<br>    ans[<span class="hljs-number">3</span>] = ans[<span class="hljs-number">2</span>]; ans[<span class="hljs-number">3</span>].pb(&#123;<span class="hljs-number">0.5</span>, <span class="hljs-built_in">sqrt</span>(<span class="hljs-number">3</span>) / <span class="hljs-number">6</span>, <span class="hljs-built_in">sqrt</span>(<span class="hljs-number">6</span>) / <span class="hljs-number">3</span>&#125;);<br>    ans[<span class="hljs-number">4</span>].pb(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;); ans[<span class="hljs-number">4</span>].pb(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;); <br>    ans[<span class="hljs-number">4</span>].pb(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;); ans[<span class="hljs-number">4</span>].pb(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;);<br>    ans[<span class="hljs-number">4</span>].pb(&#123;<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-built_in">sqrt</span>(<span class="hljs-number">2</span>) / <span class="hljs-number">2</span>&#125;); ans[<span class="hljs-number">4</span>].pb(&#123;<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, -<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">2</span>) / <span class="hljs-number">2</span>&#125;);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">5</span>; i &lt;= <span class="hljs-number">10</span>; ++i) &#123;<br>        <span class="hljs-keyword">int</span> x = <span class="hljs-number">1</span>, nw = <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; i; ++j)<br>            <span class="hljs-keyword">if</span> (ans[j].size() * ans[i - j].size() &lt; nw) &#123;<br>                nw = ans[j].size() * ans[i - j].size(); x = j;<br>            &#125;<br>        <span class="hljs-built_in">vector</span>&lt;P&gt; p;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            ans[i].clear();<br>            p = random_rotate(ans[x]);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> a : p)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> b : ans[i - x]) ans[i].pb(a + b);<br>            <span class="hljs-keyword">if</span> (check(ans[i], i)) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, (<span class="hljs-keyword">int</span>)ans[n].size());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : ans[n]) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10lf %.10lf %.10lf\n&quot;</span>, x.x, x.y, x.z);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="j---lets-play-jigsaw-puzzles">J - Let's Play JigsawPuzzles!</h2><blockquote><p>一个 <span class="math inline">\(m\times m\)</span> 的矩阵填入 <spanclass="math inline">\(1\sim m^2\)</span>，给定每个权值的四邻接情况，恢复矩阵。</p></blockquote><p>确定左上角之后 BFS 即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-keyword">int</span> adj[N * N][<span class="hljs-number">4</span>], ans[N][N];<br><br><span class="hljs-built_in">queue</span>&lt;pii&gt; q;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, m = n * n; i &lt;= m; ++i) <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; ++j) adj[i][j] = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, m = n * n; i &lt;= m; ++i)<br><span class="hljs-keyword">if</span> (adj[i][<span class="hljs-number">0</span>] == <span class="hljs-number">-1</span> &amp;&amp; adj[i][<span class="hljs-number">2</span>] == <span class="hljs-number">-1</span>) &#123;<br>ans[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = i; q.push(mp(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)); <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">while</span> (!q.empty()) &#123;<br><span class="hljs-keyword">auto</span> [x, y] = q.front(); q.pop();<br><span class="hljs-keyword">int</span> num = ans[x][y];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; ++j)<br><span class="hljs-keyword">if</span> (adj[num][j] != <span class="hljs-number">-1</span>) &#123;<br><span class="hljs-keyword">int</span> tx = x + dx[j];<br><span class="hljs-keyword">int</span> ty = y + dy[j];<br><span class="hljs-keyword">if</span> (ans[tx][ty]) <span class="hljs-keyword">continue</span>;<br>ans[tx][ty] = adj[num][j]; <br>q.push(mp(tx, ty));<br>&#125; <br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans[i][<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>; j &lt;= n; ++j) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, ans[i][j]);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="k---browser-games">K - Browser Games</h2><blockquote><p>给定 <span class="math inline">\(n\)</span> 个串 <spanclass="math inline">\(S_1,S_2,\dots,S_n\)</span> ，对每个 <spanclass="math inline">\(k=1,2,\dots,n\)</span> ，问最少选多少个字符串<span class="math inline">\(|\{T_i\}|\)</span> ，使得：</p><ul><li>对任意 <span class="math inline">\(1\le i\le k\)</span> ，存在一个<span class="math inline">\(T_j\)</span> ，使得 <spanclass="math inline">\(T_j\)</span> 是 <spanclass="math inline">\(S_i\)</span> 的前缀</li><li>对任意 <span class="math inline">\(k&lt; i\le n\)</span>，不存在一个 <span class="math inline">\(T_j\)</span> ，使得 <spanclass="math inline">\(T_j\)</span> 是 <spanclass="math inline">\(S_i\)</span> 的前缀</li></ul></blockquote><p>考虑把 Trie树建出来，然后倒着一个一个撤销。初始答案就是根结点儿子个数。</p><p>每次撤销一个串，路径上的节点以后就都不能选了，且路径上所有点的其他分支都得被覆盖过。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 50007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">trans</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (c &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) <span class="hljs-keyword">return</span> c - <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;.&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">26</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">27</span>;<br>&#125;<br><br><span class="hljs-keyword">int</span> tot = <span class="hljs-number">1</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><span class="hljs-keyword">bool</span> tag, vis; <span class="hljs-keyword">int</span> fa, tr[<span class="hljs-number">28</span>];&#125; c[<span class="hljs-number">3000007</span>];<br><br><span class="hljs-keyword">int</span> Ans;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *s, <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> nw = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; nw = c[nw].tr[s[i++]])<br>        <span class="hljs-keyword">if</span> (!c[nw].tr[s[i]]) c[c[nw].tr[s[i]] = ++tot].fa = nw;<br>    <span class="hljs-keyword">return</span> nw;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nw, <span class="hljs-keyword">int</span> *s, <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (nw != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (c[nw].tag) &#123;c[nw].tag = <span class="hljs-literal">false</span>; --Ans;&#125; <span class="hljs-comment">// 若原本有标记则要撤销</span><br>        <span class="hljs-keyword">if</span> (!c[nw].vis) &#123; <span class="hljs-comment">// 若第一次经过该点，则对所有其他儿子打标记</span><br>            c[nw].vis = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">28</span>; ++i)<br>                <span class="hljs-keyword">if</span> (c[nw].tr[i] &amp;&amp; !c[c[nw].tr[i]].vis) &#123;++Ans; c[c[nw].tr[i]].tag = <span class="hljs-literal">true</span>;&#125;<br>        &#125;<br>        --len;<br>        nw = c[nw].fa;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">char</span> S[N];<br><br><span class="hljs-keyword">int</span> s[N][<span class="hljs-number">60</span>], pos[N];<br><br><span class="hljs-keyword">int</span> len[N], ans[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, S + <span class="hljs-number">1</span>);<br>        len[i] = <span class="hljs-built_in">strlen</span>(S + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= len[i]; ++j) s[i][j] = trans(S[j]);<br>        pos[i] = insert(s[i], len[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">28</span>; ++i)<br>        <span class="hljs-keyword">if</span> (c[<span class="hljs-number">1</span>].tr[i]) &#123;++Ans; c[c[<span class="hljs-number">1</span>].tr[i]].tag = <span class="hljs-literal">true</span>;&#125;<br>    ans[n] = Ans;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i; --i) &#123;<br>        del(pos[i], s[i], len[i]);<br>        ans[i - <span class="hljs-number">1</span>] = Ans;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="m---tower-of-the-sorcerer">M - Tower of the Sorcerer</h2><p>上取整整除分块 + 不可重 ST 表。赛后 1min 过了。</p>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Official Contests</category>
      
      <category>ICPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Graphs</tag>
      
      <tag>Dynamic Programming</tag>
      
      <tag>String</tag>
      
      <tag>Minkowski Sum</tag>
      
      <tag>Tricks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022 CCPC Weihai Site</title>
    <link href="/official/ccpc/22-weihai/"/>
    <url>/official/ccpc/22-weihai/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>比赛地址 ：<a href="https://codeforces.com/gym/104023">Codeforces Gym104023</a></p><p>待补：HLM</p><h1 id="a---duna">A - Duna</h1><p>签到题。答案是五个位置各自的人数和那过冠军的人数的 <spanclass="math inline">\(\min\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 10007</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getid</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> s;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> totid;<br><span class="hljs-keyword">static</span> <span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; id;<br><span class="hljs-built_in">cin</span> &gt;&gt; s;<br><span class="hljs-keyword">if</span> (!id[s]) id[s] = ++totid;<br><span class="hljs-keyword">return</span> id[s];<br>&#125;<br><br><span class="hljs-keyword">bool</span> champ[N];<br><br><span class="hljs-keyword">int</span> cnt[<span class="hljs-number">6</span>], tot;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n; <span class="hljs-built_in">cin</span> &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">5</span>; ++j) champ[getid()] = <span class="hljs-literal">true</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">int</span> id = getid(), pos; <span class="hljs-built_in">cin</span> &gt;&gt; pos;<br>tot += champ[id]; cnt[pos]++; <br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; ++i) tot = min(tot, cnt[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, tot);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="b---recruitment">B - Recruitment</h1><blockquote><p>有一个长度为 <span class="math inline">\(n\)</span>的序列，初始由加号连接。每次把一个加号改成乘号，到最后全部变为乘号，一共有<span class="math inline">\(n\)</span> 个表达式。</p><p>给定 <span class="math inline">\(n\)</span> 个表达式的结果 <spanclass="math inline">\((s_i\le 10^9)\)</span>，构造初始序列和修改过程。</p></blockquote><p>注意到最后的值就是全部的乘积，所以不是 <spanclass="math inline">\(1\)</span> 的数字个数最多只有 <spanclass="math inline">\(30\)</span> 个。</p><p>注意到把 <span class="math inline">\(+1\)</span> 变成 <spanclass="math inline">\(\times 1\)</span>会让结果变小，且此条件是充要条件，所以先把所有的 <spanclass="math inline">\(1\)</span> 找出来，放到最后。</p><p>然后缩减数列，只会剩下 <span class="math inline">\(30\)</span>个，最后一个数就是所有的乘积，然后倒着每次尝试分解，搜索分解的树结构即可。</p><p><strong>错误 1：</strong> <span class="math inline">\(2+2=2\times2\)</span> 所以缩减数列的时候不能简单的判断相邻不同</p><p><strong>错误 2：</strong> 在 <code>auto</code> 遍历 <code>STL</code>的时候不能修改，所以不能在循环中修改数集 / 将数集传引用来<code>dfs</code> 导致被修改 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br><span class="hljs-keyword">bool</span> del[N];<br><br><span class="hljs-keyword">int</span> a[N], res[N], op[N];<br><br><span class="hljs-keyword">int</span> A, B;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> dlt)</span> </span>&#123;<br><span class="hljs-keyword">int</span> lim = <span class="hljs-built_in">sqrt</span>(n);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= lim; ++i)<br><span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) <br><span class="hljs-keyword">if</span> (n - i - n / i == dlt) &#123;A = i; B = n / i; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">int</span> nodecnt, totlim;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><span class="hljs-keyword">int</span> ls = <span class="hljs-number">0</span>, rs = <span class="hljs-number">0</span>, x = <span class="hljs-number">0</span>, tim = <span class="hljs-number">0</span>;&#125; c[N];<br><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">multiset</span>&lt;<span class="hljs-keyword">int</span>&gt;, <span class="hljs-keyword">bool</span>&gt; vis;<br><br>pii lim[N];<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; leaf, <span class="hljs-built_in">multiset</span>&lt;<span class="hljs-keyword">int</span>&gt; val)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (vis[val]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; nxtleaf = leaf;<br><span class="hljs-built_in">multiset</span>&lt;<span class="hljs-keyword">int</span>&gt; nxtval = val;<br>vis[val] = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (p == totlim + <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : leaf) &#123;<br><span class="hljs-keyword">if</span> (check(c[x].x, lim[p].fr)) &#123;<br>nxtleaf.erase(x);<br>nxtval.erase(nxtval.lower_bound(c[x].x));<br>c[x].tim = lim[p].sc;<br>c[c[x].ls = ++nodecnt].x = A;<br>c[c[x].rs = ++nodecnt].x = B;<br>nxtleaf.insert(nodecnt - <span class="hljs-number">1</span>); <br>nxtleaf.insert(nodecnt);<br>nxtval.insert(A); <br>nxtval.insert(B);<br><span class="hljs-keyword">if</span> (dfs(p + <span class="hljs-number">1</span>, nxtleaf, nxtval)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>nxtval.erase(nxtval.lower_bound(c[nodecnt].x));<br>nxtval.erase(nxtval.lower_bound(c[nodecnt - <span class="hljs-number">1</span>].x));<br>nxtleaf.erase(nodecnt);<br>nxtleaf.erase(nodecnt - <span class="hljs-number">1</span>);<br>c[x].tim = c[x].ls = c[x].rs = <span class="hljs-number">0</span>;<br>nodecnt -= <span class="hljs-number">2</span>;<br>nxtval.insert(c[x].x);<br>nxtleaf.insert(x);<br>&#125; <br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">int</span> id = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (!c[u].ls) &#123;res[++id] = c[u].x; <span class="hljs-keyword">return</span>;&#125;<br>build(c[u].ls);<br>op[c[u].tim] = id; <br>build(c[u].rs);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i] = rd();<br><span class="hljs-keyword">int</span> tot = n, cnt1 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i; --i) <br><span class="hljs-keyword">if</span> (a[i] &gt; a[i + <span class="hljs-number">1</span>]) &#123;del[i] = <span class="hljs-literal">true</span>; ++cnt1; res[tot--] = <span class="hljs-number">1</span>; op[i] = tot;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br><span class="hljs-keyword">if</span> (i &lt; n &amp;&amp; a[i] &gt; a[i + <span class="hljs-number">1</span>]) &#123;a[i] -= cnt1; --cnt1;&#125;<br><span class="hljs-keyword">else</span> a[i] -= cnt1;<br>c[nodecnt = <span class="hljs-number">1</span>].x = a[n];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i; --i)   <br><span class="hljs-keyword">if</span> (!del[i]) lim[++totlim] = <span class="hljs-built_in">make_pair</span>(a[i + <span class="hljs-number">1</span>] - a[i], i);<br><span class="hljs-keyword">if</span> (!dfs(<span class="hljs-number">1</span>, <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;&#123;<span class="hljs-number">1</span>&#125;, <span class="hljs-built_in">multiset</span>&lt;<span class="hljs-keyword">int</span>&gt;&#123;a[n]&#125;)) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>build(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, res[i]); <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);         <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, op[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="c---grass-5">C - Grass 5</h1><blockquote><p>给定 <span class="math inline">\(n\)</span> 个点，问能否选五个点<span class="math inline">\(ABCDE\)</span> 使得 <spanclass="math inline">\(BCDE\)</span> 和 <spanclass="math inline">\(A\)</span> 构成的线段两两只交在 <spanclass="math inline">\(A\)</span> 。</p></blockquote><p>玩一下发现只要不共线总能找到解，于是找到不共线的五个点之后暴力枚举答案。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 25007</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> letp const P</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span> &#123;</span><br>ll x, y;<br>P <span class="hljs-keyword">operator</span> - (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x - p.x, y - p.y&#125;;&#125;<br>ll <span class="hljs-keyword">operator</span> | (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x * p.x + y * p.y;&#125; <span class="hljs-comment">// dot</span><br>ll <span class="hljs-keyword">operator</span> ^ (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x * p.y - y * p.x;&#125; <span class="hljs-comment">// cross</span><br>&#125; a[N], p[<span class="hljs-number">6</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;a[i].x = rd(); a[i].y = rd();&#125;<br><span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">4</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>); <span class="hljs-keyword">return</span>;&#125;<br><span class="hljs-keyword">int</span> tot = <span class="hljs-number">2</span>;<br>p[<span class="hljs-number">1</span>] = a[<span class="hljs-number">1</span>]; p[<span class="hljs-number">2</span>] = a[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">bool</span> fl = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span>; i &lt;= n &amp;&amp; tot &lt; <span class="hljs-number">5</span>; ++i) <br><span class="hljs-keyword">if</span> (fl || tot &lt; <span class="hljs-number">4</span>) &#123;<br>p[++tot] = a[i];<br><span class="hljs-keyword">if</span> (((p[i] - p[<span class="hljs-number">1</span>]) ^ (p[<span class="hljs-number">2</span>] - p[<span class="hljs-number">1</span>])) != <span class="hljs-number">0</span>) fl = <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (((a[i] - p[<span class="hljs-number">1</span>]) ^ (p[<span class="hljs-number">2</span>] - p[<span class="hljs-number">1</span>])) != <span class="hljs-number">0</span>) &#123;<br>fl = <span class="hljs-literal">true</span>; p[++tot] = a[i];<br>&#125;<br><span class="hljs-keyword">if</span> (tot &lt; <span class="hljs-number">5</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>); <span class="hljs-keyword">return</span>;&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; ++i) &#123;<br><span class="hljs-keyword">bool</span> fl = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">5</span>; ++j)<br><span class="hljs-keyword">if</span> (j != i) <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">5</span>; ++k)<br><span class="hljs-keyword">if</span> (k != i &amp;&amp; k != j) <br><span class="hljs-keyword">if</span> (((p[k] - p[i]) ^ (p[j] - p[i])) == <span class="hljs-number">0</span> &amp;&amp; ((p[k] - p[i]) | (p[j] - p[i])) &gt;= <span class="hljs-number">0</span>) &#123;<br>fl = <span class="hljs-literal">false</span>; <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (fl) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld %lld\n&quot;</span>, p[i].x, p[i].y);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">5</span>; ++j)<br><span class="hljs-keyword">if</span> (j != i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld %lld\n&quot;</span>, p[j].x, p[j].y);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="d.-sternhalma">D. Sternhalma</h1><p>胖胖说是签到题。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">5</span>,maxs=<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">19</span>;<br><br><span class="hljs-keyword">int</span> te,num[maxn+<span class="hljs-number">5</span>];<span class="hljs-keyword">char</span> s[maxn+<span class="hljs-number">5</span>][maxn+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> pic[maxn+<span class="hljs-number">5</span>][maxn+<span class="hljs-number">5</span>],cnt,ID[maxn+<span class="hljs-number">5</span>][maxn+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> m,SA[maxs+<span class="hljs-number">5</span>],f[maxs+<span class="hljs-number">5</span>],si[maxs+<span class="hljs-number">5</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getop</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">char</span> ch=getchar();<span class="hljs-keyword">while</span> (ch!=<span class="hljs-string">&#x27;.&#x27;</span> &amp;&amp; ch!=<span class="hljs-string">&#x27;#&#x27;</span>) ch=getchar();<span class="hljs-keyword">return</span> ch==<span class="hljs-string">&#x27;#&#x27;</span>;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Fix</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x,<span class="hljs-keyword">int</span> y)</span> </span>&#123;<span class="hljs-keyword">if</span> (y&gt;x) x=y;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gettl</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">if</span> (num[x]&gt;num[x<span class="hljs-number">-1</span>]) <span class="hljs-keyword">return</span> ID[x<span class="hljs-number">-1</span>][y<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> ID[x<span class="hljs-number">-1</span>][y];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gettr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">if</span> (num[x]&gt;num[x<span class="hljs-number">-1</span>]) <span class="hljs-keyword">return</span> ID[x<span class="hljs-number">-1</span>][y];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> ID[x<span class="hljs-number">-1</span>][y+<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getl</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span> </span>&#123;<span class="hljs-keyword">return</span> ID[x][y<span class="hljs-number">-1</span>];&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span> </span>&#123;<span class="hljs-keyword">return</span> ID[x][y+<span class="hljs-number">1</span>];&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getdl</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">if</span> (num[x]&gt;num[x+<span class="hljs-number">1</span>]) <span class="hljs-keyword">return</span> ID[x+<span class="hljs-number">1</span>][y<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> ID[x+<span class="hljs-number">1</span>][y];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getdr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">if</span> (num[x]&gt;num[x+<span class="hljs-number">1</span>]) <span class="hljs-keyword">return</span> ID[x+<span class="hljs-number">1</span>][y];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> ID[x+<span class="hljs-number">1</span>][y+<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;i,<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;j)</span> </span>&#123;<span class="hljs-keyword">return</span> si[i]&lt;si[j] || si[i]==si[j] &amp;&amp; i&lt;j;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">memset</span>(ID,<span class="hljs-number">255</span>,<span class="hljs-keyword">sizeof</span>(ID));<br>num[<span class="hljs-number">1</span>]=<span class="hljs-number">3</span>;num[<span class="hljs-number">2</span>]=<span class="hljs-number">4</span>;num[<span class="hljs-number">3</span>]=<span class="hljs-number">5</span>;num[<span class="hljs-number">4</span>]=<span class="hljs-number">4</span>;num[<span class="hljs-number">5</span>]=<span class="hljs-number">3</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=num[i];j++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;pic[i][j]),ID[i][j]=cnt++;<br><span class="hljs-built_in">memset</span>(f,<span class="hljs-number">192</span>,<span class="hljs-keyword">sizeof</span>(f));<br>f[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;maxs;i++) SA[++m]=i,si[i]=si[i&gt;&gt;<span class="hljs-number">1</span>]+(i&amp;<span class="hljs-number">1</span>);<br>sort(SA+<span class="hljs-number">1</span>,SA+<span class="hljs-number">1</span>+m,cmp);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>,i=SA[k];k&lt;maxs;k++,i=SA[k])<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x=<span class="hljs-number">1</span>;x&lt;=<span class="hljs-number">5</span>;x++)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> y=<span class="hljs-number">1</span>;y&lt;=num[x];y++)<br><span class="hljs-keyword">if</span> (i&gt;&gt;ID[x][y]&amp;<span class="hljs-number">1</span>)&#123;<br>Fix(f[i],f[i^(<span class="hljs-number">1</span>&lt;&lt;ID[x][y])]);<br><span class="hljs-keyword">int</span> tl=gettl(x,y),tr=gettr(x,y);<br><span class="hljs-keyword">int</span> dl=getdl(x,y),dr=getdr(x,y);<br><span class="hljs-keyword">int</span> l=getl(x,y),r=getr(x,y);<br><span class="hljs-keyword">if</span> (tl&gt;=<span class="hljs-number">0</span> &amp;&amp; dr&gt;=<span class="hljs-number">0</span>)<br><span class="hljs-keyword">if</span> ((i&gt;&gt;tl&amp;<span class="hljs-number">1</span>)+(i&gt;&gt;dr&amp;<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>)<br>Fix(f[i],f[i^(<span class="hljs-number">1</span>&lt;&lt;tl)^(<span class="hljs-number">1</span>&lt;&lt;ID[x][y])^(<span class="hljs-number">1</span>&lt;&lt;dr)]+pic[x][y]);<br><span class="hljs-keyword">if</span> (l&gt;=<span class="hljs-number">0</span> &amp;&amp; r&gt;=<span class="hljs-number">0</span>)<br><span class="hljs-keyword">if</span> ((i&gt;&gt;l&amp;<span class="hljs-number">1</span>)+(i&gt;&gt;r&amp;<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>)<br>Fix(f[i],f[i^(<span class="hljs-number">1</span>&lt;&lt;l)^(<span class="hljs-number">1</span>&lt;&lt;ID[x][y])^(<span class="hljs-number">1</span>&lt;&lt;r)]+pic[x][y]);<br><span class="hljs-keyword">if</span> (tr&gt;=<span class="hljs-number">0</span> &amp;&amp; dl&gt;=<span class="hljs-number">0</span>)<br><span class="hljs-keyword">if</span> ((i&gt;&gt;tr&amp;<span class="hljs-number">1</span>)+(i&gt;&gt;dl&amp;<span class="hljs-number">1</span>))<br>Fix(f[i],f[i^(<span class="hljs-number">1</span>&lt;&lt;tr)^(<span class="hljs-number">1</span>&lt;&lt;ID[x][y])^(<span class="hljs-number">1</span>&lt;&lt;dl)]+pic[x][y]);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;te);te;te--)&#123;<br><span class="hljs-keyword">int</span> S=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=num[i];j++)<br>S|=getop()&lt;&lt;ID[i][j];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,f[S]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="e.-python-will-be-faster-than-c">E. Python Will be Faster thanC++</h1><p>签到题，发现 <span class="math inline">\(a_{n+i} = a_n +(a_n-a_{n-1})i\)</span> ，然后简单分类讨论一下。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000</span><br><br><span class="hljs-keyword">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n, k; <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; k;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br><span class="hljs-keyword">if</span> (a[i] &lt; k) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Python 3.%d will be faster than C++\n&quot;</span>, i);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">int</span> add = a[n] - a[n - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span> (add &gt;= <span class="hljs-number">0</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Python will never be faster than C++&quot;</span>);<br><span class="hljs-keyword">else</span> &#123;<br>k = a[n] - k; add = -add;<br><span class="hljs-keyword">int</span> ans = k / add;<br><span class="hljs-keyword">while</span> (ans * add &lt;= k) ++ans;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Python 3.%d will be faster than C++&quot;</span>, n + ans); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="f.-mooncake-delivery">F. Mooncake Delivery</h1><p>注意到路径中每次换颜色必定会把上一段颜色的权值全部收回，所以答案是（每一段权值+下一段起点权值）的<span class="math inline">\(\max\)</span> 。</p><p>所以其实有两幅图，先跑一遍 floyd，路径权值为边权的加法，得到每一段颜色相同的权值；</p><p>然后再枚举（起点 A，终点B，下一个颜色起点C）建出 A 到 C新的边，再跑一遍 floyd ，路径权值为边权的 <spanclass="math inline">\(\max\)</span> 。</p><p>最后再考虑上路径最后一段颜色相同的即可。所有过程复杂度均为 <spanclass="math inline">\(\mathcal{O}(n^3)\)</span> 。</p><p><strong>错误 1：</strong>因为路径可能只有一段，所以第二幅图要设置一下自己到自己距离为 <spanclass="math inline">\(0\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for(int (i) = (x); (i) &lt;= (y); ++(i))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, x, y) for(int (i) = (x); (i) &gt;= (y); --(i))</span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmin</span><span class="hljs-params">(T &amp;a, T b)</span> </span>&#123;<span class="hljs-keyword">return</span> a &gt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 307</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inf 4000000000000000000ll</span><br><br><span class="hljs-keyword">bool</span> e[N][N];<br><br><span class="hljs-keyword">int</span> col[N], w[N];<br><br>ll dis[N][N], mx[N][N], ans[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    rep(i, <span class="hljs-number">1</span>, n) rep(j, <span class="hljs-number">1</span>, n) &#123;e[i][j] = <span class="hljs-literal">false</span>; mx[i][j] = dis[i][j] = inf;&#125;<br>    rep(i, <span class="hljs-number">1</span>, n) col[i] = rd();<br>    rep(i, <span class="hljs-number">1</span>, n) &#123;w[i] = rd(); mx[i][i] = dis[i][i] = <span class="hljs-number">0</span>;&#125;<br>    rep(i, <span class="hljs-number">1</span>, m) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), v = rd(); <br>        e[u][v] = e[v][u] = <span class="hljs-literal">true</span>; <br>        dis[u][v] = w[v]; dis[v][u] = w[u];<br>    &#125;<br>    <span class="hljs-comment">// floyd for same color</span><br>    rep(k, <span class="hljs-number">1</span>, n) rep(u, <span class="hljs-number">1</span>, n) rep(v, <span class="hljs-number">1</span>, n) getmin(dis[u][v], dis[u][k] + dis[k][v]);<br>    rep(u, <span class="hljs-number">1</span>, n) rep(v, <span class="hljs-number">1</span>, n) dis[u][v] += w[u];<br>    <span class="hljs-comment">// new graph : a path of same color points + an another color point</span><br>    rep(u, <span class="hljs-number">1</span>, n) rep(k, <span class="hljs-number">1</span>, n) <br>        <span class="hljs-keyword">if</span> (col[u] == col[k]) rep(v, <span class="hljs-number">1</span>, n)<br>            <span class="hljs-keyword">if</span> (col[k] != col[v] &amp;&amp; e[k][v]) getmin(mx[u][v], dis[u][k] + w[v]);<br>    <span class="hljs-comment">// floyd on new graph</span><br>    rep(k, <span class="hljs-number">1</span>, n) rep(u, <span class="hljs-number">1</span>, n) rep(v, <span class="hljs-number">1</span>, n) getmin(mx[u][v], max(mx[u][k], mx[k][v]));<br>    <span class="hljs-comment">// consider adding a path of same color in the end</span><br>    rep(u, <span class="hljs-number">1</span>, n) rep(v, <span class="hljs-number">1</span>, n) &#123;<br>        ans[u][v] = mx[u][v];<br>        rep(k, <span class="hljs-number">1</span>, n) <span class="hljs-keyword">if</span> (col[v] == col[k]) getmin(ans[u][v], max(mx[u][k], dis[k][v]));<br>    &#125;<br>    rep(u, <span class="hljs-number">1</span>, n) &#123;<br>        rep(v, <span class="hljs-number">1</span>, n) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, ans[u][v]);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="g.-grade-2">G. Grade 2</h1><blockquote><p>给定 <span class="math inline">\(x\)</span> ，多次询问 <spanclass="math inline">\([l,r]\)</span> ，计算 <spanclass="math inline">\(\sum_{k=l}^r[\operatorname{gcd}(k x \oplus x,x)=1]\)</span></p></blockquote><p>柴老师发现循环节是 <span class="math inline">\(2^{\lceil \log_2x\rceil}\)</span> ，遂暴力（做差不用讨论写法很简单）。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>ll x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 10000007</span><br><br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<span class="hljs-keyword">return</span> b ? gcd(b, a % b) : a;&#125;<br><br><span class="hljs-keyword">int</span> sum[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = rd(), n = rd();<br><span class="hljs-keyword">int</span> period = <span class="hljs-number">2</span> &lt;&lt; __lg(x);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; period; ++i) <br>sum[i] = sum[i - <span class="hljs-number">1</span>] + (gcd((<span class="hljs-number">1l</span>l * i * x) ^ x, x) == <span class="hljs-number">1l</span>l);<br><span class="hljs-keyword">auto</span> calc = [&amp;](ll p) &#123;<br><span class="hljs-keyword">return</span> sum[period - <span class="hljs-number">1</span>] * (p / period) + sum[p % period];<br>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>ll l = rd(), r = rd();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, calc(r) - calc(l - <span class="hljs-number">1</span>));<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="i.-dragon-bloodline">I. Dragon Bloodline</h1><p>胖胖做的，贪心 + 卡常。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">50000</span>,LOG=<span class="hljs-number">20</span>;<br><br><span class="hljs-keyword">int</span> te,n,m;<br>LL a[maxn+<span class="hljs-number">5</span>],b[LOG+<span class="hljs-number">5</span>],sum;<br>LL now[maxn+<span class="hljs-number">5</span>],tem[LOG+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> K,ID[maxn+<span class="hljs-number">5</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;i,<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;j)</span> </span>&#123;<span class="hljs-keyword">return</span> now[i]&gt;now[j] || now[i]==now[j] &amp;&amp; i&gt;j;&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(LL mid)</span></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=LOG;i++) tem[i]=b[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) now[i]=a[i]*mid;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=LOG;j&gt;=<span class="hljs-number">0</span>;j--)&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n &amp;&amp; tem[j];i++)<br><span class="hljs-keyword">if</span> (now[i]&gt;=(<span class="hljs-number">1L</span>L&lt;&lt;j))&#123;<br>LL cnt=min(now[i]&gt;&gt;j,tem[j]);<br>now[i]-=cnt&lt;&lt;j;<br>tem[j]-=cnt;<br>&#125;<br><span class="hljs-keyword">if</span> (!tem[j]) <span class="hljs-keyword">continue</span>;<br>K=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-keyword">if</span> (now[i]) ID[++K]=i;<br><span class="hljs-keyword">if</span> (K&lt;=tem[j]) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>nth_element(ID+<span class="hljs-number">1</span>,ID+tem[j],ID+K+<span class="hljs-number">1</span>,cmp);<br>LL lim=now[ID[tem[j]]];<span class="hljs-keyword">int</span> y=ID[tem[j]];<br><span class="hljs-comment">// printf(&quot;[%d]\n&quot;,tem[j]);</span><br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=K;i++)<br><span class="hljs-keyword">if</span> (now[ID[i]]&gt;lim || now[ID[i]]==lim &amp;&amp; ID[i]&gt;=y) now[ID[i]]=<span class="hljs-number">0</span>,cnt++;<br><span class="hljs-comment">// printf(&quot;[%d]\n&quot;,cnt);</span><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-keyword">if</span> (now[i]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;te);te;te--)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>LL L=<span class="hljs-number">0</span>,R=<span class="hljs-number">0</span>;sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;a[i]),R=max(R,a[i]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=LOG;i++) b[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;b[i]),sum+=b[i]&lt;&lt;i;<br>R=sum/R;<br><span class="hljs-keyword">for</span> (LL mid=L+(R-L&gt;&gt;<span class="hljs-number">1</span>);L&lt;=R;mid=L+(R-L&gt;&gt;<span class="hljs-number">1</span>))<br>check(mid)?L=mid+<span class="hljs-number">1</span>:R=mid<span class="hljs-number">-1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,R);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="j.-eat-sleep-repeat">J. Eat, Sleep, Repeat</h1><blockquote><p>给定 <span class="math inline">\(n\)</span> 个数 <spanclass="math inline">\(a_1, a_2,\dots, a_n\)</span>，两人博弈每次可以让一个数字 <span class="math inline">\(-1\)</span>。</p><p>有若干限制 <span class="math inline">\(lim_{x_i}=y_i\)</span>表示集合中任意时刻 <span class="math inline">\(x_i\)</span>出现次数不能超过 <span class="math inline">\(y_i\)</span> 。</p><p>无法行动（都是 <span class="math inline">\(0\)</span>或移动后必定违反限制）的人输，问结果。</p></blockquote><p>注意到值域按照 <span class="math inline">\(lim_{x_i} = 0\)</span>分成了若干段（补一个 <span class="math inline">\(\lim_{-1}=0\)</span>），对于每段考虑：</p><p>从小到大扫描每一个限制，若果存在一个 <spanclass="math inline">\(x_i\)</span>没有限制，那么比他大的都可以变成他；否则按照限制容纳尽可能多的数。</p><p>所以操作次数是固定的，模拟即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br><span class="hljs-keyword">int</span> a[N];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-built_in">vector</span>&lt;pii&gt; lim, tmplim;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; tmp;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>lim.clear();<br><span class="hljs-keyword">int</span> n = rd(), k = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i] = rd();<br>sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i) &#123;<br><span class="hljs-keyword">int</span> x = rd(), y = rd();<br>lim.push_back(mp(x, y));<br>&#125; <br>lim.push_back(mp(<span class="hljs-number">1000000001</span>, <span class="hljs-number">0</span>));<br>sort(lim.begin(), lim.end());<br><span class="hljs-keyword">int</span> ptr = <span class="hljs-number">1</span>, den = <span class="hljs-number">-1</span>, mx = <span class="hljs-number">0</span>;<br>ll ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">auto</span> calc = [&amp;]()&#123;<br><span class="hljs-keyword">int</span> id = <span class="hljs-number">0</span>;<br>ll sum = <span class="hljs-number">0</span>, cnt = tmp.size();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : tmp) sum += x;<br>ll fin = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = den + <span class="hljs-number">1</span>, limid = tmplim.size(); i &lt;= mx; ++i, ++id) &#123;<br><span class="hljs-keyword">if</span> (id &gt;= limid) &#123;fin = i; <span class="hljs-keyword">break</span>;&#125;<br><span class="hljs-keyword">if</span> (tmplim[id].fr &gt; i) &#123;fin = i; <span class="hljs-keyword">break</span>;&#125;<br>ll t = min(cnt, (ll)tmplim[id].sc);<br>cnt -= t; sum -= t * i;<br><span class="hljs-keyword">if</span> (!cnt) <span class="hljs-keyword">break</span>;<br>&#125;<br>sum -= cnt * fin;<br>ans += sum;<br>tmp.clear();<br>tmplim.clear();<br>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [x, y] : lim) &#123;<br><span class="hljs-keyword">while</span> (ptr &lt;= n &amp;&amp; a[ptr] &lt; x) tmp.pb(a[ptr++]);<br><span class="hljs-keyword">if</span> (y == <span class="hljs-number">0</span>) &#123;mx = x - <span class="hljs-number">1</span>; calc(); den = x;&#125;<br><span class="hljs-keyword">else</span> tmplim.push_back(mp(x, y));<br>&#125;<br>tmplim.clear();<br>tmp.clear();<br><span class="hljs-built_in">puts</span>((ans &amp; <span class="hljs-number">1</span>) ? <span class="hljs-string">&quot;Pico&quot;</span> : <span class="hljs-string">&quot;FuuFuu&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="k.-i-wanna-maker">K. I Wanna Maker</h1><p>数据结构 + 数数。柴老师和胖胖做的。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100000</span>,maxq=maxn&lt;&lt;<span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">int</span> te,n,tp[maxn+<span class="hljs-number">5</span>],L[maxn+<span class="hljs-number">5</span>],R[maxn+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> lx,ly,rx,ry;<br>LL ans;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DATA</span> &#123;</span><span class="hljs-keyword">int</span> tp,x,y;&#125;;<br><span class="hljs-keyword">int</span> Q;DATA q[maxq+<span class="hljs-number">5</span>];<br><span class="hljs-built_in">multiset</span>&lt;<span class="hljs-keyword">int</span>&gt; S;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> DATA &amp;a,<span class="hljs-keyword">const</span> DATA &amp;b)</span> </span>&#123;<span class="hljs-keyword">return</span> a.x&lt;b.x;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;te);te;te--)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">bool</span> Z=<span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>LL k,x;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%lld%lld&quot;</span>,&amp;tp[i],&amp;k,&amp;x);<br><span class="hljs-keyword">if</span> (<span class="hljs-number">2</span>*x-k*(k<span class="hljs-number">-1</span>)&lt;=<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">if</span> (tp[i]==<span class="hljs-number">1</span>) Z=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> L[i]=<span class="hljs-number">1</span>,R[i]=<span class="hljs-number">0</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>L[i]=(<span class="hljs-number">2</span>*x-k*(k<span class="hljs-number">-1</span>))/(<span class="hljs-number">2</span>*k);<br>R[i]=(<span class="hljs-number">2</span>*x+k*(k<span class="hljs-number">-1</span>)+<span class="hljs-number">2</span>*k<span class="hljs-number">-1</span>)/(<span class="hljs-number">2</span>*k);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (Z) <span class="hljs-keyword">goto</span> zero;<br>ly=<span class="hljs-number">2e9</span>;rx=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">if</span> (tp[i]==<span class="hljs-number">1</span>) ly=min(ly,L[i]),rx=max(rx,R[i]);<br><span class="hljs-keyword">if</span> (ly&gt;rx) <span class="hljs-keyword">goto</span> infty;<br>lx=<span class="hljs-number">1</span>;ry=<span class="hljs-number">2e9</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">if</span> (tp[i]==<span class="hljs-number">2</span> &amp;&amp; L[i]&lt;=R[i])&#123;<br><span class="hljs-keyword">if</span> (ly&lt;=L[i] &amp;&amp; R[i]&lt;=rx) <span class="hljs-keyword">goto</span> zero;<br><span class="hljs-keyword">if</span> (L[i]&lt;ly &amp;&amp; R[i]&lt;=rx) lx=max(lx,L[i]+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (ly&lt;=L[i] &amp;&amp; R[i]&gt;rx) ry=min(ry,R[i]<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (lx&gt;ly || rx&gt;ry) <span class="hljs-keyword">goto</span> zero;<br><span class="hljs-keyword">if</span> (ry==<span class="hljs-number">2e9</span>) <span class="hljs-keyword">goto</span> infty;<br>Q=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">if</span> (tp[i]==<span class="hljs-number">2</span> &amp;&amp; L[i]&lt;=R[i])<br><span class="hljs-keyword">if</span> (lx&lt;=L[i] &amp;&amp; L[i]&lt;ly &amp;&amp; rx&lt;R[i] &amp;&amp; R[i]&lt;=ry)<br>q[++Q]=&#123;<span class="hljs-number">1</span>,lx,R[i]&#125;,q[++Q]=&#123;<span class="hljs-number">-1</span>,L[i]+<span class="hljs-number">1</span>,R[i]&#125;;<br>ans=(LL)(ly-lx+<span class="hljs-number">1</span>)*(ry-rx+<span class="hljs-number">1</span>);<br>sort(q+<span class="hljs-number">1</span>,q+<span class="hljs-number">1</span>+Q,cmp);<br>S.clear();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>,j=<span class="hljs-number">2</span>;i&lt;=Q;i=j)&#123;<br><span class="hljs-keyword">for</span> (j=i;j&lt;=Q &amp;&amp; q[i].x==q[j].x;j++)&#123;<br><span class="hljs-keyword">if</span> (q[j].tp==<span class="hljs-number">1</span>) S.insert(q[j].y);<br><span class="hljs-keyword">else</span> S.erase(S.lower_bound(q[j].y));<br>&#125;<br><span class="hljs-keyword">if</span> (!S.empty())&#123;<br>LL lenr=ry-(*S.begin())+<span class="hljs-number">1</span>;<br>LL lenl=(j&lt;=Q?q[j].x:ly+<span class="hljs-number">1</span>)-q[i].x;<br>ans-=lenl*lenr;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<span class="hljs-keyword">continue</span>;<br>zero:<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>);<span class="hljs-keyword">continue</span>;<br>infty:<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Official Contests</category>
      
      <category>CCPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Graphs</tag>
      
      <tag>Constructive Algorithm</tag>
      
      <tag>Counting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018-2019 ICPC Asia Nanjing Regional</title>
    <link href="/official/icpc/18-asia-nanjing/"/>
    <url>/official/icpc/18-asia-nanjing/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>比赛地址 ：<a href="https://codeforces.com/gym/101981">Codeforces Gym101981</a></p><p>还没补完：FHKLM</p><h2 id="a---adrien-and-austin">A - Adrien and Austin</h2><blockquote><p>给定数集 <span class="math inline">\(\{1,\dots, n\}\)</span>，每次只能删掉至多 <span class="math inline">\(k\)</span>个<strong>连续的</strong>数字，删空的人赢，问最终结果。</p></blockquote><p>若 <span class="math inline">\(k=1\)</span>直接判解；否则奇数删掉中位数，偶数删掉两个中位数，然后对称操作，先手一定赢。</p><p>想出来放 <span class="math inline">\(n=0\)</span> 的 corner case的出题人真是人才。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n, m; <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Austin&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br><span class="hljs-keyword">if</span> (m == <span class="hljs-number">1</span>) &#123;<span class="hljs-built_in">puts</span>((n &amp; <span class="hljs-number">1</span>) ? <span class="hljs-string">&quot;Adrien&quot;</span> : <span class="hljs-string">&quot;Austin&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Adrien&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="b---tournament">B - Tournament</h2><p>wqs 二分 + 凸优化。队友做过一摸一样的板子题。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">300000</span>;<br><br><span class="hljs-keyword">int</span> n,m,a[maxn+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> que[maxn+<span class="hljs-number">5</span>],l[maxn+<span class="hljs-number">5</span>],r[maxn+<span class="hljs-number">5</span>],p[maxn+<span class="hljs-number">5</span>];<br>LL sum[maxn+<span class="hljs-number">5</span>],f[maxn+<span class="hljs-number">5</span>];<span class="hljs-keyword">int</span> g[maxn+<span class="hljs-number">5</span>];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EOLN(x) ((x)==10 || (x)==13 || (x)==EOF)</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">readc</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">16</span>],*l=buf,*r=buf;<br><span class="hljs-keyword">return</span> l==r &amp;&amp; (r=(l=buf)+fread(buf,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">16</span>,<span class="hljs-built_in">stdin</span>),l==r)?EOF:*l++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">int</span> <span class="hljs-title">readi</span><span class="hljs-params">(T &amp;x)</span></span>&#123;<br>T tot=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=readc(),lst=<span class="hljs-string">&#x27;+&#x27;</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(ch)) &#123;<span class="hljs-keyword">if</span> (ch==EOF) <span class="hljs-keyword">return</span> EOF;lst=ch;ch=readc();&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(ch)) tot=(tot&lt;&lt;<span class="hljs-number">3</span>)+(tot&lt;&lt;<span class="hljs-number">1</span>)+(ch^<span class="hljs-number">48</span>),ch=readc();<br>lst==<span class="hljs-string">&#x27;-&#x27;</span>?x=-tot:x=tot;<span class="hljs-keyword">return</span> EOLN(ch);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> LL <span class="hljs-title">Sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R)</span></span>&#123;<br><span class="hljs-keyword">int</span> m=(L+R&gt;&gt;<span class="hljs-number">1</span>),A=m-L+<span class="hljs-number">1</span>,B=R-m;<br><span class="hljs-keyword">return</span> (LL)(A-B)*a[m]-(sum[m]-sum[L<span class="hljs-number">-1</span>])+(sum[R]-sum[m]);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> val(j,i) (mp(f[j]+Sum((j)+1,(i))+c,g[j]+1))</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(LL c)</span></span>&#123;<br>f[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;g[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> Head=<span class="hljs-number">1</span>,Tail=<span class="hljs-number">0</span>;<br>p[++Tail]=<span class="hljs-number">0</span>;l[Tail]=<span class="hljs-number">1</span>;r[Tail]=n;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-built_in">pair</span>&lt;LL,<span class="hljs-keyword">int</span>&gt; now=val(p[Head],i);<br>f[i]=now.fr;g[i]=now.sc;<br><span class="hljs-keyword">int</span> lst=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span> (Head&lt;=Tail)<br><span class="hljs-keyword">if</span> (val(p[Tail],l[Tail])&gt;val(i,l[Tail])) lst=l[Tail--]; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">int</span> L=l[Tail],R=r[Tail];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> mid=L+(R-L&gt;&gt;<span class="hljs-number">1</span>);L&lt;=R;mid=L+(R-L&gt;&gt;<span class="hljs-number">1</span>))<br>val(p[Tail],mid)&gt;val(i,mid)?R=mid<span class="hljs-number">-1</span>:L=mid+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (L&lt;=r[Tail]) lst=L,r[Tail]=L<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (~lst) p[++Tail]=i,l[Tail]=lst,r[Tail]=n;<br><span class="hljs-keyword">if</span> (Head&lt;=Tail) &#123;l[Head]++;<span class="hljs-keyword">if</span> (l[Head]&gt;r[Head]) Head++;&#125;<br>&#125;<br><span class="hljs-keyword">return</span> g[n]&lt;=m;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>readi(n);readi(m);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) readi(a[i]),sum[i]=sum[i<span class="hljs-number">-1</span>]+a[i];<br>LL L=<span class="hljs-number">0</span>,R=<span class="hljs-number">3e14</span>;<br><span class="hljs-keyword">for</span> (LL mid=L+(R-L&gt;&gt;<span class="hljs-number">1</span>);L&lt;=R;mid=L+(R-L&gt;&gt;<span class="hljs-number">1</span>))<br>check(mid)?R=mid<span class="hljs-number">-1</span>:L=mid+<span class="hljs-number">1</span>;<br>check(L);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,f[n]-L*m);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="c---cherry-and-chocolate">**C - Cherry and Chocolate</h2><blockquote><p>给一棵树，第一个人把某个点染成粉色，第二个人把另一个点染成棕色，第一个人再把另另一个点染成粉色。</p><p>定义树的权值为符合下述描述的节点 <spanclass="math inline">\(u\)</span> 的个数：从 <spanclass="math inline">\(u\)</span> 到棕色点的路径上经过某个粉色点。</p><p>第一个人想最大化权值，第二个人想最小化权值，问最终树的权值。</p></blockquote><p>我们称第一个粉色点为 <span class="math inline">\(x\)</span>，棕色点为 <span class="math inline">\(y\)</span> ，第二个粉色点为 <spanclass="math inline">\(z\)</span> 。</p><p>我们以第一个人的视角，假设 <span class="math inline">\(x,y\)</span>已经确定，那么令 <span class="math inline">\(x\)</span>为根，所有子树里除掉 <span class="math inline">\(y\)</span>所在的子树以外的全部的点都已经被赚到了。</p><p>所以 <span class="math inline">\(z\)</span> 一定会放在 <spanclass="math inline">\(y\)</span> 所在的子树中。把这个子树拎成以 <spanclass="math inline">\(y\)</span> 为根， <spanclass="math inline">\(z\)</span> 能赚回来的是某个子树大小，因此一定选<span class="math inline">\(y\)</span> 的某个儿子。</p><p>因此如果 <span class="math inline">\(y\)</span>所在的子树已经选定，为了让 <span class="math inline">\(z\)</span>捞回去的点数最少， <span class="math inline">\(y\)</span>一定会选在这个子树的重心上。</p><p>所以 <span class="math inline">\(y\)</span> 捞回来的值是 <spanclass="math inline">\(sz[\text{子树}]-mxs[\text{重心}]\)</span> ，会把<span class="math inline">\(y\)</span>选在使得这个权值最大的子树的重心上。</p><p>这样就可以 <span class="math inline">\(\mathcal{O}(n)\)</span>检查一个选定的 <span class="math inline">\(x\)</span>之后最终树的权值了。</p><p>那么考虑现在我们已经有了一个方案 <spanclass="math inline">\((x,y,z)\)</span> ，那么把 <spanclass="math inline">\(x\)</span> 朝远离 <spanclass="math inline">\(y\)</span> 的方向移动不会使答案变优。</p><p>因此每次需检查的范围都是当前 <span class="math inline">\(x\)</span>的某个子树，那么每次都选这个范围的重心，就只需要检查 <spanclass="math inline">\(\mathcal{O}(\log n)\)</span> 次。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmin</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> a &gt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmax</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> a &lt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>;&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br><span class="hljs-keyword">bool</span> tag[N]; <span class="hljs-comment">// [tag[u] = true] : should be tested to be the first pink point</span><br><br><span class="hljs-keyword">int</span> sz[N], mxs[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-keyword">int</span> n, rt, tot, mn;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getcentre</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>sz[u] = <span class="hljs-number">1</span>; mxs[u] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br><span class="hljs-keyword">if</span> (tag[v] &amp;&amp; v != fa) &#123;getcentre(v, u); sz[u] += sz[v]; mxs[u] = max(mxs[u], sz[v]);&#125;<br>mxs[u] = max(mxs[u], tot - sz[u]);<br>mn = min(mn, mxs[u]);<br>&#125;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; subtree[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getsz</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa, <span class="hljs-keyword">int</span> top)</span> </span>&#123;<br>sz[u] = <span class="hljs-number">1</span>; mxs[u] = <span class="hljs-number">0</span>; <br>subtree[top].push_back(u);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br><span class="hljs-keyword">if</span> (v != fa) &#123;getsz(v, u, top); sz[u] += sz[v]; mxs[u] = max(mxs[u], sz[v]);&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n = tot = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) tag[i] = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br><span class="hljs-keyword">int</span> u = rd(), v = rd();<br>e[u].push_back(v); e[v].push_back(u);<br>&#125; <br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (rt = <span class="hljs-number">1</span>; tag[rt]; ) &#123;<br><span class="hljs-comment">// find the centre</span><br>mn = <span class="hljs-number">1e9</span>; getcentre(rt, rt);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u)<br><span class="hljs-keyword">if</span> (tag[u] &amp;&amp; mxs[u] == mn) &#123;rt = u; <span class="hljs-keyword">break</span>;&#125;<br>tag[rt] = <span class="hljs-literal">false</span>; --tot;<br><span class="hljs-comment">// find the best brown point in the initial tree </span><br><span class="hljs-comment">// i.e. find a subtree whose centre maximize |subtree| - mxs[centre]</span><br><span class="hljs-keyword">int</span> res = n, pos = rt;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : e[rt]) &#123;<br>subtree[u].clear();<br>getsz(u, rt, u);<br><span class="hljs-keyword">int</span> bst = u;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : subtree[u]) mxs[v] = max(mxs[v], sz[u] - sz[v]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : subtree[u]) <span class="hljs-keyword">if</span> (mxs[v] &lt; mxs[bst]) bst = v;<br><span class="hljs-keyword">int</span> cur = n - sz[u] + mxs[bst];<br><span class="hljs-keyword">if</span> (getmin(res, cur)) pos = u;<br>&#125;<br>ans = max(ans, res);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : e[rt])<br><span class="hljs-keyword">if</span> (u != pos) <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : subtree[u]) <br><span class="hljs-keyword">if</span> (tag[v]) &#123;tag[v] = <span class="hljs-literal">false</span>; --tot;&#125;<br>rt = pos;<br>&#125; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="d---country-meow">D - Country Meow</h2><blockquote><p>求最小球覆盖的半径。</p></blockquote><p>板子题。换一换估价函数类似的题目也可以考虑三分套三分套三分。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> n, cnt, i;<br><span class="hljs-keyword">double</span> R, tmp;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-5</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span> &#123;</span><br><span class="hljs-keyword">double</span> x, y, z;<br>P()&#123;&#125;<br>P(<span class="hljs-keyword">double</span> _x, <span class="hljs-keyword">double</span> _y, <span class="hljs-keyword">double</span> _z) &#123;x = _x; y = _y; z = _z;&#125;<br>P <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> P &amp;b) &#123;<span class="hljs-keyword">return</span> P(x + b.x, y + b.y, z + b.z);&#125;<br>P <span class="hljs-keyword">operator</span> - (<span class="hljs-keyword">const</span> P &amp;b) &#123;<span class="hljs-keyword">return</span> P(x - b.x, y - b.y, z - b.z);&#125;<br>P <span class="hljs-keyword">operator</span> * (<span class="hljs-keyword">double</span> b) &#123;<span class="hljs-keyword">return</span> P(x * b, y * b, z * b);&#125;<br>P <span class="hljs-keyword">operator</span> / (<span class="hljs-keyword">double</span> b) &#123;<span class="hljs-keyword">return</span> P(x / b, y / b, z / b);&#125;<br>&#125; a[<span class="hljs-number">200007</span>], b[<span class="hljs-number">4</span>], O;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">dis</span><span class="hljs-params">(<span class="hljs-keyword">const</span> P &amp;a, <span class="hljs-keyword">const</span> P &amp;b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">dot</span><span class="hljs-params">(<span class="hljs-keyword">const</span> P &amp;a, <span class="hljs-keyword">const</span> P &amp;b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a.x * b.x + a.y * b.y + a.z * b.z;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ball</span><span class="hljs-params">()</span> </span>&#123;<br>P q[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">double</span> m[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>], f[<span class="hljs-number">3</span>], L[<span class="hljs-number">3</span>], det;<br><span class="hljs-keyword">int</span> i, j; O.x = O.y = O.z = R = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">switch</span>(cnt) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span> : O = b[<span class="hljs-number">0</span>]; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span> : O = (b[<span class="hljs-number">0</span>] + b[<span class="hljs-number">1</span>]) / <span class="hljs-number">2</span>; R = dis(O, b[<span class="hljs-number">0</span>]); <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span> : <br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; ++i) q[i] = b[i + <span class="hljs-number">1</span>] - b[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; ++i) <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>; ++j) m[i][j] = dot(q[i], q[j]) * <span class="hljs-number">2</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; ++i) f[i] = dot(q[i], q[i]);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(det = m[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] * m[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] - m[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] * m[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]) &lt; eps) <span class="hljs-keyword">return</span>;<br>L[<span class="hljs-number">0</span>] = (f[<span class="hljs-number">0</span>] * m[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] - f[<span class="hljs-number">1</span>] * m[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]) / det;<br>L[<span class="hljs-number">1</span>] = (f[<span class="hljs-number">1</span>] * m[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] - f[<span class="hljs-number">0</span>] * m[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]) / det;<br>O = b[<span class="hljs-number">0</span>] + q[<span class="hljs-number">0</span>] * L[<span class="hljs-number">0</span>] + q[<span class="hljs-number">1</span>] * L[<span class="hljs-number">1</span>];<br>R = dis(O, b[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span> : <br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i) q[i] = b[i + <span class="hljs-number">1</span>] - b[<span class="hljs-number">0</span> ], f[i] = dot(q[i], q[i]);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i) <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; ++j) m[i][j] = dot(q[i], q[j]) * <span class="hljs-number">2</span>;<br>det = m[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] * m[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] * m[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]<br>+ m[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] * m[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] * m[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]<br>+ m[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] * m[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] * m[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]<br>- m[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] * m[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] * m[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]<br>- m[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] * m[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] * m[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]<br>- m[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] * m[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] * m[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(det) &lt; eps) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; ++j) &#123;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i) m[i][j] = f[i];<br>L[j] = (m[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] * m[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] * m[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]<br>+ m[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] * m[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] * m[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]<br>+ m[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] * m[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] * m[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]<br>- m[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] * m[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] * m[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]<br>- m[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] * m[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] * m[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]<br>- m[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] * m[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] * m[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]) / det;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i) m[i][j] = dot(q[i], q[j]) * <span class="hljs-number">2</span>;<br>&#125;<br>O = b[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i) O = O + q[i] * L[i];<br>R = dis(O, b[<span class="hljs-number">0</span>]);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">minball</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>ball();<br><span class="hljs-keyword">if</span> (cnt &lt; <span class="hljs-number">4</span>) <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-keyword">if</span> (dis(O, a[i]) - R &gt; eps) &#123;<br>b[cnt++] = a[i]; minball(i); --cnt;<br><span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>P t = a[i];<br>memmove(&amp;a[<span class="hljs-number">1</span>], &amp;a[<span class="hljs-number">0</span>], <span class="hljs-keyword">sizeof</span>(P) * i);<br>a[<span class="hljs-number">0</span>] = t;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf%lf%lf&quot;</span>, &amp;a[i].x, &amp;a[i].y, &amp;a[i].z);<br>random_shuffle(a, a + n); R = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br><span class="hljs-keyword">if</span> (dis(O, a[i]) - R &gt; eps) cnt = <span class="hljs-number">1</span>, b[<span class="hljs-number">0</span>] = a[i], minball(i);<br><span class="hljs-comment">//printf(&quot;%.12lf %.12lf %.12lf %.12lf\n&quot;, O.x, O.y, O.z, R);</span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.12lf\n&quot;</span>, <span class="hljs-built_in">sqrt</span>(R));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="e---eva-and-euro-coins">*E - Eva and Euro coins</h2><blockquote><p>给定两个 <span class="math inline">\(01\)</span> 序列 <spanclass="math inline">\(A,B\)</span> ，每次可以把 <spanclass="math inline">\(A\)</span> 中连续 <spanclass="math inline">\(k\)</span>个<strong>相同的</strong>位置一起翻转，问是否能把 <spanclass="math inline">\(A\)</span> 变成 <spanclass="math inline">\(B\)</span> 。</p></blockquote><p>手玩一下发现：对于 <span class="math inline">\(k\)</span> 个 <spanclass="math inline">\(x=0/1\)</span> , <spanclass="math inline">\(xx\dots xxy\)</span> 和 <spanclass="math inline">\(y x x\dots x\)</span> 一定是可以互相转换的。</p><p>换言之， <span class="math inline">\(k\)</span>个相同的字符可以在序列里任意移动，而且与具体是 <spanclass="math inline">\(0/1\)</span> 无关。</p><p>所以把尽可能多的 <span class="math inline">\(k\)</span>个连续相同的扔掉，看剩下的是否相同即可。用栈维护（字符，个数）即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000007</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr  first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc  second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pci pair<span class="hljs-meta-string">&lt;char, int&gt;</span></span><br><br><span class="hljs-keyword">int</span> na, nb;<br><br>pci a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(), k = rd();<br><span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) c = getchar();<br><span class="hljs-keyword">if</span> (na &amp;&amp; a[na].fr == c) &#123;<br>++a[na].sc; <span class="hljs-keyword">if</span> (a[na].sc == k) --na;<br>&#125; <span class="hljs-keyword">else</span> a[++na] = mp(c, <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) c = getchar();<br><span class="hljs-keyword">if</span> (nb &amp;&amp; b[nb].fr == c) &#123;<br>++b[nb].sc; <span class="hljs-keyword">if</span> (b[nb].sc == k) --nb;<br>&#125; <span class="hljs-keyword">else</span> b[++nb] = mp(c, <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (na != nb) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= na; ++i)<br><span class="hljs-keyword">if</span> (a[i] != b[i]) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="f---frank">**F - Frank</h2><blockquote><p>DAG 随机游走。</p></blockquote><p>队友切了 貌似是 <span class="math inline">\(O(n^2)\)</span>支持修改一个方程并求解方程组。</p><p>一个相关套路题：<ahref="https://blog.csdn.net/zzkksunboy/article/details/76401063?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166753717516782427471427%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=166753717516782427471427&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-76401063-null-null.nonecase&amp;utm_term=%E8%AE%A1%E8%92%9C&amp;spm=1018.2226.3001.4450">连接1</a></p><h2 id="g---pyramid">G - Pyramid</h2><p>打表插值/找规律/推式子，柴老师推出来是 <spanclass="math inline">\({n+3\choose 4}\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 1000000007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inv24 41666667</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) &#123;<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-number">1l</span>l * (n + <span class="hljs-number">3</span>) * (n + <span class="hljs-number">2</span>) % mod * (n + <span class="hljs-number">1</span>) % mod * n % mod * inv24 % mod);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="h---huge-discount">*H - Huge Discount</h2><h2 id="i---magic-potion">I - Magic Potion</h2><p>最大流板子题。药水当作另一个源点。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmin</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> (a &gt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmax</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> (a &lt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>);&#125;<br><br><span class="hljs-comment">// F is the type of flow</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> V, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> E, <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">F</span>, <span class="hljs-title">const</span> <span class="hljs-title">F</span> <span class="hljs-title">flowInf</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">struct</span> <span class="hljs-title">Flow</span> &#123;</span><br><br>    <span class="hljs-keyword">int</span> tot = <span class="hljs-number">1</span>, S, T, hd[V], cur[V], dis[V];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> to, nxt; F cap;&#125; e[E &lt;&lt; <span class="hljs-number">1</span>];<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;tot = <span class="hljs-number">1</span>; <span class="hljs-built_in">memset</span>(hd, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(hd));&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, F w)</span> </span>&#123;<br>        e[++tot].nxt = hd[u], hd[u] = tot, e[tot].to = v, e[tot].cap = w;<br>        e[++tot].nxt = hd[v], hd[v] = tot, e[tot].to = u, e[tot].cap = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> q[V], qhd, qtl; <br>        <span class="hljs-built_in">memcpy</span>(cur, hd, <span class="hljs-keyword">sizeof</span>(hd));<br>        <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(dis));<br>        q[qhd = qtl = <span class="hljs-number">1</span>] = S; dis[S] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (qhd &lt;= qtl) &#123;<br>            <span class="hljs-keyword">int</span> u = q[qhd++];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = hd[u], v; i; i = e[i].nxt)<br>                <span class="hljs-keyword">if</span> (dis[v = e[i].to] == <span class="hljs-number">-1</span> &amp;&amp; e[i].cap != <span class="hljs-number">0</span>) &#123;<br>                    dis[v] = dis[u] + <span class="hljs-number">1</span>; q[++qtl] = v;<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dis[T] != <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-function">F <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, F rem)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (u == T) <span class="hljs-keyword">return</span> rem;<br>        F flow = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = cur[u], v; i &amp;&amp; rem; i = e[i].nxt) &#123;<br>            cur[u] = i; v = e[i].to;<br>            F nw = min(rem, e[i].cap);<br>            <span class="hljs-keyword">if</span> (nw != <span class="hljs-number">0</span> &amp;&amp; dis[v] == dis[u] + <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">int</span> ret = dfs(v, nw);<br>                flow += ret; rem -= ret; <br>                e[i].cap -= ret; e[i ^ <span class="hljs-number">1</span>].cap += ret;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flow == <span class="hljs-number">0</span>) dis[u] = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">return</span> flow;<br>    &#125;<br><br>    <span class="hljs-function">F <span class="hljs-title">dinic</span><span class="hljs-params">(<span class="hljs-keyword">int</span> source, <span class="hljs-keyword">int</span> sink)</span> </span>&#123;<br>        S = source; T = sink; F flow = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (bfs()) flow += dfs(S, flowInf);<br>        <span class="hljs-keyword">return</span> flow;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1007</span>;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">100007</span>;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">1e9</span>;<br><br>Flow&lt;N, M, <span class="hljs-keyword">int</span>, inf&gt; f;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> n = rd(), m = rd(), k = rd();<br><span class="hljs-keyword">int</span> S = <span class="hljs-number">0</span>, T = N - <span class="hljs-number">1</span>, P = N - <span class="hljs-number">2</span>;<br>f.add(S, P, k);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) f.add(i + n, T, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>f.add(S, i, <span class="hljs-number">1</span>); f.add(P, i, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = rd(); j; --j) f.add(i, rd() + n, <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f.dinic(S, T));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="j---prime-game">J - Prime Game</h2><blockquote><p>给定一个数列，定义一个区间的权值为区间所有数的乘积的质因子集大小，求所有区间权值和。</p></blockquote><p>对每个质数计算，用总区间数减掉不包含这个质数的区间数，复杂度 <spanclass="math inline">\(\mathcal{O}(n\log(\max a_i))\)</span>。分解质因数用线性筛出 <code>mindiv</code> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1000000</span>;<br><br><span class="hljs-keyword">int</span> n,a[maxn+<span class="hljs-number">5</span>];LL ans;<br><span class="hljs-keyword">int</span> p[maxn+<span class="hljs-number">5</span>],D[maxn+<span class="hljs-number">5</span>];<span class="hljs-keyword">bool</span> pri[maxn+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> lst[maxn+<span class="hljs-number">5</span>];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EOLN(x) ((x)==10 || (x)==13 || (x)==EOF)</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">readc</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">16</span>],*l=buf,*r=buf;<br><span class="hljs-keyword">return</span> l==r &amp;&amp; (r=(l=buf)+fread(buf,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">16</span>,<span class="hljs-built_in">stdin</span>),l==r)?EOF:*l++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">int</span> <span class="hljs-title">readi</span><span class="hljs-params">(T &amp;x)</span></span>&#123;<br>T tot=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=readc(),lst=<span class="hljs-string">&#x27;+&#x27;</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(ch)) &#123;<span class="hljs-keyword">if</span> (ch==EOF) <span class="hljs-keyword">return</span> EOF;lst=ch;ch=readc();&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(ch)) tot=(tot&lt;&lt;<span class="hljs-number">3</span>)+(tot&lt;&lt;<span class="hljs-number">1</span>)+(ch^<span class="hljs-number">48</span>),ch=readc();<br>lst==<span class="hljs-string">&#x27;-&#x27;</span>?x=-tot:x=tot;<span class="hljs-keyword">return</span> EOLN(ch);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Make</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span> (!pri[i]) p[++p[<span class="hljs-number">0</span>]]=i,D[i]=i;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>,t;j&lt;=p[<span class="hljs-number">0</span>] &amp;&amp; (t=i*p[j])&lt;=n;j++)<br>&#123;pri[t]=<span class="hljs-literal">true</span>;D[t]=p[j];<span class="hljs-keyword">if</span> (!(i%p[j])) <span class="hljs-keyword">break</span>;&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>readi(n);Make(maxn);<br>ans=(LL)n*(n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>*p[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>,x;i&lt;=n;i++)&#123;<br>readi(x);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> d=D[x];x&gt;<span class="hljs-number">1</span>;x/=d,d=D[x])&#123;<br><span class="hljs-keyword">int</span> len=i-lst[d]<span class="hljs-number">-1</span>;<br>ans-=(LL)len*(len+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>lst[d]=i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=p[<span class="hljs-number">0</span>];i++)&#123;<br><span class="hljs-keyword">int</span> len=n-lst[p[i]];<br>ans-=(LL)len*(len+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="k---kangaroo-puzzle">K - Kangaroo Puzzle</h2><blockquote><p>给一个 <span class="math inline">\(20\times 20\)</span>的网格图，每个位置是袋鼠/墙，保证袋鼠联通，构造一个LURD序列使得所有的袋鼠走到一起。</p></blockquote><p>网格太小想一想随机可过，输出 <spanclass="math inline">\(50000\)</span>个随机字符就过了。正解是考虑每次合并两个袋鼠，合在一起的肯定不会再分开了。</p><h2 id="l---lagrange-the-chef">*L - Lagrange the Chef</h2><h2 id="m---mediocre-string-problem">M - Mediocre String Problem</h2><p>Z 函数 + manacher。</p>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Official Contests</category>
      
      <category>ICPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>String</tag>
      
      <tag>Number Theory</tag>
      
      <tag>Divide and Conquer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019-2020 ICPC Asia Hong Kong Regional</title>
    <link href="/official/icpc/19-asia-hong-kong/"/>
    <url>/official/icpc/19-asia-hong-kong/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>比赛地址 ：<a href="https://codeforces.com/gym/102452">Codeforces Gym102452</a></p><h2 id="a---axis-of-symmetry">*A - Axis of Symmetry</h2><blockquote><p>给若干面积无交的矩形，求整个图案的所有对称轴。</p></blockquote><p>把线段该连的都连起来，图形内部的线段都删掉。然后判断每个线段是否对称。写了个屎山代码非常垃圾。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">typedef</span> tuple&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; tii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> b ? gcd(b, a % b) : a;&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">double</span> T;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> let const auto</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lett const T</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> letp const P <span class="hljs-comment">// P for point</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> letl const L <span class="hljs-comment">// L for line</span></span><br><span class="hljs-keyword">const</span> T eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> z(x) (abs((x)) &lt;= eps) <span class="hljs-comment">// is zero</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">roundint</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span> </span>&#123;<br><span class="hljs-keyword">int</span> y = <span class="hljs-built_in">ceil</span>(x);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = y - <span class="hljs-number">2</span>; i &lt;= y + <span class="hljs-number">2</span>; ++i) <span class="hljs-keyword">if</span> (z(x - i)) <span class="hljs-keyword">return</span> i;<br><span class="hljs-keyword">return</span> <span class="hljs-number">2e9</span>;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span> &#123;</span><br>    T x, y;<br>    P (T x = <span class="hljs-number">0</span>, T y = <span class="hljs-number">0</span>) : x(x), y(y) &#123;&#125;<br>    P <span class="hljs-keyword">operator</span> + (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x + p.x, y + p.y&#125;;&#125; <br>    P <span class="hljs-keyword">operator</span> - (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x - p.x, y - p.y&#125;;&#125; <br>    P <span class="hljs-keyword">operator</span> * (lett &amp;d) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x * d, y * d&#125;;&#125;<br>    P <span class="hljs-keyword">operator</span> / (lett &amp;d) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x / d, y / d&#125;;&#125;<br>    P <span class="hljs-keyword">operator</span> - () <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;-x, -y&#125;;&#125;<br> <br>    T <span class="hljs-keyword">operator</span> | (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x * p.x + y * p.y;&#125; <span class="hljs-comment">// dot</span><br>    T <span class="hljs-keyword">operator</span> ^ (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x * p.y - y * p.x;&#125; <span class="hljs-comment">// cross</span><br><br>    <span class="hljs-function">T <span class="hljs-title">norm</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> x * x + y * y;&#125;<br>    <span class="hljs-function">P <span class="hljs-title">proj</span> <span class="hljs-params">(letp &amp;p)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> (*<span class="hljs-keyword">this</span>) * (((*<span class="hljs-keyword">this</span>) | p) / norm());&#125;<br>    <span class="hljs-function">P <span class="hljs-title">refl</span> <span class="hljs-params">(letp &amp;p)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> proj(p) * <span class="hljs-number">2</span> - p;&#125;<br>&#125; zero;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">abs</span><span class="hljs-params">(letp &amp;p)</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(p.norm());&#125;<br><span class="hljs-function">P <span class="hljs-title">perp</span><span class="hljs-params">(letp &amp;p)</span> </span>&#123;<span class="hljs-keyword">return</span> &#123;-p.y, p.x&#125;;&#125; <span class="hljs-comment">// turn pi / 2 left(counterclockwise)</span><br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">L</span> &#123;</span><br>    P p, v;<br>    <span class="hljs-function">L <span class="hljs-title">shiftl</span><span class="hljs-params">(<span class="hljs-keyword">double</span> d)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> &#123;p + perp(v) * d / <span class="hljs-built_in">abs</span>(v), v&#125;;&#125;<br>    <span class="hljs-function">P <span class="hljs-title">proj</span><span class="hljs-params">(letp &amp;a)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> p + v.proj(a - p);&#125;<br>    <span class="hljs-function">P <span class="hljs-title">refl</span><span class="hljs-params">(letp &amp;a)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> p + v.refl(a - p);&#125; <br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">dis</span><span class="hljs-params">(letp &amp;a)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> (v ^ (a - p)) / <span class="hljs-built_in">abs</span>(v);&#125; <br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br><span class="hljs-built_in">vector</span>&lt;P&gt; Pt;<br><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">multiset</span>&lt;pii&gt;&gt; H, V;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check1</span><span class="hljs-params">(L l)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [x, S] : V) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [y1, y2] : S) &#123;<br>P p1 = l.refl(P&#123;<span class="hljs-number">1.0</span> * x, <span class="hljs-number">1.0</span> * y1&#125;), p2 = l.refl(P&#123;<span class="hljs-number">1.0</span> * x, <span class="hljs-number">1.0</span> * y2&#125;);<br><span class="hljs-keyword">int</span> tx = roundint(p1.x), ty1 = roundint(p1.y), ty2 = roundint(p2.y);<br><span class="hljs-keyword">if</span> (ty1 &gt; ty2) swap(ty1, ty2);<br><span class="hljs-keyword">if</span> (V[tx].count(<span class="hljs-built_in">make_pair</span>(ty1, ty2)) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [y, S] : H) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [x1, x2] : S) &#123;<br>P p1 = l.refl(P&#123;<span class="hljs-number">1.0</span> * x1, <span class="hljs-number">1.0</span> * y&#125;), p2 = l.refl(P&#123;<span class="hljs-number">1.0</span> * x2, <span class="hljs-number">1.0</span> * y&#125;);<br><span class="hljs-keyword">int</span> ty = roundint(p1.y), tx1 = roundint(p1.x), tx2 = roundint(p2.x);<br><span class="hljs-keyword">if</span> (tx1 &gt; tx2) swap(tx1, tx2);<br><span class="hljs-keyword">if</span> (H[ty].count(<span class="hljs-built_in">make_pair</span>(tx1, tx2)) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check2</span><span class="hljs-params">(L l)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [x, S] : V) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [y1, y2] : S) &#123;<br>P p1 = l.refl(P&#123;<span class="hljs-number">1.0</span> * x, <span class="hljs-number">1.0</span> * y1&#125;), p2 = l.refl(P&#123;<span class="hljs-number">1.0</span> * x, <span class="hljs-number">1.0</span> * y2&#125;);<br><span class="hljs-keyword">int</span> ty = roundint(p1.y), tx1 = roundint(p1.x), tx2 = roundint(p2.x);<br><span class="hljs-keyword">if</span> (tx1 &gt; tx2) swap(tx1, tx2);<br><span class="hljs-keyword">if</span> (H[ty].count(<span class="hljs-built_in">make_pair</span>(tx1, tx2)) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [y, S] : H) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [x1, x2] : S) &#123;<br>P p1 = l.refl(P&#123;<span class="hljs-number">1.0</span> * x1, <span class="hljs-number">1.0</span> * y&#125;), p2 = l.refl(P&#123;<span class="hljs-number">1.0</span> * x2, <span class="hljs-number">1.0</span> * y&#125;);<br><span class="hljs-keyword">int</span> tx = roundint(p1.x), ty1 = roundint(p1.y), ty2 = roundint(p2.y);<br><span class="hljs-keyword">if</span> (ty1 &gt; ty2) swap(ty1, ty2);<br><span class="hljs-keyword">if</span> (V[tx].count(<span class="hljs-built_in">make_pair</span>(ty1, ty2)) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>H.clear(); V.clear(); Pt.clear();<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-keyword">int</span> mxx = <span class="hljs-number">-1e9</span>, mxy = <span class="hljs-number">-1e9</span>, mnx = <span class="hljs-number">1e9</span>, mny = <span class="hljs-number">1e9</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">int</span> x1 = rd(), y1 = rd(), x2 = rd(), y2 = rd();<br>Pt.push_back(P&#123;<span class="hljs-number">1.0</span> * x1, <span class="hljs-number">1.0</span> * y1&#125;); Pt.push_back(P&#123;<span class="hljs-number">1.0</span> * x1, <span class="hljs-number">1.0</span> * y2&#125;); <br>Pt.push_back(P&#123;<span class="hljs-number">1.0</span> * x2, <span class="hljs-number">1.0</span> * y1&#125;); Pt.push_back(P&#123;<span class="hljs-number">1.0</span> * x2, <span class="hljs-number">1.0</span> * y2&#125;);<br>mxx = max(mxx, x2); mnx = min(mnx, x1);<br>mxy = max(mxy, y2); mny = min(mny, y1);<br>V[x1].insert(<span class="hljs-built_in">make_pair</span>(y1, y2)); V[x2].insert(<span class="hljs-built_in">make_pair</span>(y1, y2));<br>H[y1].insert(<span class="hljs-built_in">make_pair</span>(x1, x2)); H[y2].insert(<span class="hljs-built_in">make_pair</span>(x1, x2));<br>&#125;<br><span class="hljs-comment">// connect segments</span><br><span class="hljs-built_in">multiset</span>&lt;pii&gt; tmp; tmp.clear();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;[x, S] : V) &#123;<br><span class="hljs-keyword">int</span> R = <span class="hljs-number">-1e9</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [l, r] : S) &#123;<br><span class="hljs-keyword">if</span> (tmp.empty() || l &gt; R) tmp.insert(<span class="hljs-built_in">make_pair</span>(l, r));<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">auto</span> [l1, r1] = *--tmp.end(); tmp.erase(--tmp.end()); <span class="hljs-keyword">int</span> l2 = l, r2 = r;<br><span class="hljs-keyword">if</span> (r1 == l2) tmp.insert(<span class="hljs-built_in">make_pair</span>(l1, r2));<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (l1 != l2) tmp.insert(<span class="hljs-built_in">make_pair</span>(min(l1, l2), max(l1, l2)));<br><span class="hljs-keyword">if</span> (r1 != r2) tmp.insert(<span class="hljs-built_in">make_pair</span>(min(r1, r2), max(r1, r2)));<br>&#125;<br>&#125;<br>R = max(R, r);<br>&#125;<br>swap(S, tmp); tmp.clear();<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;[y, S] : H) &#123;<br><span class="hljs-keyword">int</span> R = <span class="hljs-number">-1e9</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [l, r] : S) &#123;<br><span class="hljs-keyword">if</span> (tmp.empty() || l &gt; R) tmp.insert(<span class="hljs-built_in">make_pair</span>(l, r));<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">auto</span> [l1, r1] = *--tmp.end(); tmp.erase(--tmp.end()); <span class="hljs-keyword">int</span> l2 = l, r2 = r;<br><span class="hljs-keyword">if</span> (r1 == l2) tmp.insert(<span class="hljs-built_in">make_pair</span>(l1, r2));<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (l1 != l2) tmp.insert(<span class="hljs-built_in">make_pair</span>(min(l1, l2), max(l1, l2)));<br><span class="hljs-keyword">if</span> (r1 != r2) tmp.insert(<span class="hljs-built_in">make_pair</span>(min(r1, r2), max(r1, r2)));<br>&#125;<br>&#125;<br>R = max(R, r);<br>&#125;<br>swap(S, tmp); tmp.clear();<br>&#125;<br><br><span class="hljs-built_in">vector</span>&lt;tii&gt; ans; ans.clear();<br><span class="hljs-comment">// y = midy</span><br><span class="hljs-keyword">if</span> (check1(L&#123;&#123;<span class="hljs-number">0</span>, (mxy + mny) / <span class="hljs-number">2.0</span>&#125;,&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;&#125;)) &#123;<br><span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">2</span>, c = mny + mxy;<br><span class="hljs-keyword">int</span> g = gcd(gcd(<span class="hljs-built_in">abs</span>(a), <span class="hljs-built_in">abs</span>(b)), <span class="hljs-built_in">abs</span>(c));<br>a /= g; b /= g; c /= g;<br>tii res = max(make_tuple(a, b, c), make_tuple(-a, -b, -c));<br>ans.push_back(res);<br>&#125;<br><br><span class="hljs-comment">// x = midx</span><br><span class="hljs-keyword">if</span> (check1(L&#123;&#123;(mxx + mnx) / <span class="hljs-number">2.0</span>, <span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;&#125;)) &#123;<br><span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>, b = <span class="hljs-number">0</span>, c = mnx + mxx;<br><span class="hljs-keyword">int</span> g = gcd(gcd(<span class="hljs-built_in">abs</span>(a), <span class="hljs-built_in">abs</span>(b)), <span class="hljs-built_in">abs</span>(c));<br>a /= g; b /= g; c /= g;<br>tii res = max(make_tuple(a, b, c), make_tuple(-a, -b, -c));<br>ans.push_back(res); <br>&#125;<br> <br><span class="hljs-comment">// &quot;/&quot;</span><br>L l1&#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;&#125;;<br><span class="hljs-keyword">double</span> mxd = <span class="hljs-number">-1e18</span>, mnd = <span class="hljs-number">1e18</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : Pt) &#123;<br><span class="hljs-keyword">double</span> d = l1.dis(p);<br>mxd = max(mxd, d); mnd = min(mnd, d);<br>&#125;<br>l1 = l1.shiftl((mxd + mnd) / <span class="hljs-number">2.0</span>);<br><span class="hljs-keyword">if</span> (check2(l1)) &#123;<br><span class="hljs-keyword">int</span> a = roundint(<span class="hljs-number">2</span> * l1.v.y);<br><span class="hljs-keyword">int</span> b = roundint(<span class="hljs-number">-2</span> * l1.v.x);<br><span class="hljs-keyword">int</span> c = roundint(<span class="hljs-number">2</span> * (l1.p.x * l1.v.y - l1.p.y * l1.v.x));<br><span class="hljs-keyword">int</span> g = gcd(gcd(<span class="hljs-built_in">abs</span>(a), <span class="hljs-built_in">abs</span>(b)), <span class="hljs-built_in">abs</span>(c));<br>a /= g; b /= g; c /= g;<br>tii res = max(make_tuple(a, b, c), make_tuple(-a, -b, -c));<br>ans.push_back(res); <br>&#125;<br> <br><span class="hljs-comment">// &quot;\&quot;</span><br>l1 = L&#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;&#125;;<br>mxd = <span class="hljs-number">-1e18</span>, mnd = <span class="hljs-number">1e18</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : Pt) &#123;<br><span class="hljs-keyword">double</span> d = l1.dis(p);<br>mxd = max(mxd, d); mnd = min(mnd, d);<br>&#125;<br>l1 = l1.shiftl((mxd + mnd) / <span class="hljs-number">2.0</span>); <span class="hljs-comment">// 平移到最远点对中间</span><br><span class="hljs-keyword">if</span> (check2(l1)) &#123;<br><span class="hljs-keyword">int</span> a = roundint(<span class="hljs-number">2</span> * l1.v.y);<br><span class="hljs-keyword">int</span> b = roundint(<span class="hljs-number">-2</span> * l1.v.x);<br><span class="hljs-keyword">int</span> c = roundint(<span class="hljs-number">2</span> * (l1.p.x * l1.v.y - l1.p.y * l1.v.x));<br><span class="hljs-keyword">int</span> g = gcd(gcd(<span class="hljs-built_in">abs</span>(a), <span class="hljs-built_in">abs</span>(b)), <span class="hljs-built_in">abs</span>(c));<br>a /= g; b /= g; c /= g;<br>tii res = max(make_tuple(a, b, c), make_tuple(-a, -b, -c));<br>ans.push_back(res);<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, (<span class="hljs-keyword">int</span>)ans.size());<br>sort(ans.begin(), ans.end());<br>reverse(ans.begin(), ans.end());<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [a, b, c] : ans) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d &quot;</span>, a, b, c);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>针对这个题，因为都是边界平行于对称轴的图形之间的对称，所以对称轴必过<spanclass="math inline">\((\frac{mnx+mxx}{2},\frac{mny+mxy}{2})\)</span>，找直线好找很多。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">typedef</span> tuple&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; tii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> b ? gcd(b, a % b) : a;&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">double</span> T;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> let const auto</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lett const T</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> letp const P <span class="hljs-comment">// P for point</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> letl const L <span class="hljs-comment">// L for line</span></span><br><span class="hljs-keyword">const</span> T eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> z(x) (abs((x)) &lt;= eps) <span class="hljs-comment">// is zero</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">roundint</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> y = <span class="hljs-built_in">ceil</span>(x);<br>    <span class="hljs-keyword">if</span> (z(y - <span class="hljs-number">1</span> - x)) <span class="hljs-keyword">return</span> y - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> (z(y - x) ? y : y + <span class="hljs-number">1</span>);<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span> &#123;</span><br>    T x, y;<br>    P (T x = <span class="hljs-number">0</span>, T y = <span class="hljs-number">0</span>) : x(x), y(y) &#123;&#125;<br>    P <span class="hljs-keyword">operator</span> + (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x + p.x, y + p.y&#125;;&#125; <br>    P <span class="hljs-keyword">operator</span> - (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x - p.x, y - p.y&#125;;&#125; <br>    P <span class="hljs-keyword">operator</span> * (lett &amp;d) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x * d, y * d&#125;;&#125;<br>    P <span class="hljs-keyword">operator</span> / (lett &amp;d) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x / d, y / d&#125;;&#125;<br>    P <span class="hljs-keyword">operator</span> - () <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;-x, -y&#125;;&#125;<br> <br>    T <span class="hljs-keyword">operator</span> | (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x * p.x + y * p.y;&#125; <span class="hljs-comment">// dot</span><br>    T <span class="hljs-keyword">operator</span> ^ (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x * p.y - y * p.x;&#125; <span class="hljs-comment">// cross</span><br><br>    <span class="hljs-function">T <span class="hljs-title">norm</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> x * x + y * y;&#125;<br>    <span class="hljs-function">P <span class="hljs-title">proj</span> <span class="hljs-params">(letp &amp;p)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> (*<span class="hljs-keyword">this</span>) * (((*<span class="hljs-keyword">this</span>) | p) / norm());&#125;<br>    <span class="hljs-function">P <span class="hljs-title">refl</span> <span class="hljs-params">(letp &amp;p)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> proj(p) * <span class="hljs-number">2</span> - p;&#125;<br>&#125; zero;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">L</span> &#123;</span><br>    P p, v;<br>    <span class="hljs-function">P <span class="hljs-title">proj</span><span class="hljs-params">(letp &amp;a)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> p + v.proj(a - p);&#125;<br>    <span class="hljs-function">P <span class="hljs-title">refl</span><span class="hljs-params">(letp &amp;a)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> p + v.refl(a - p);&#125; <br>&#125;;<br><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">multiset</span>&lt;pii&gt;&gt; H, V;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check1</span><span class="hljs-params">(L l)</span> </span>&#123; <span class="hljs-comment">// H &lt;-&gt; H, V &lt;-&gt; V</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [x, S] : V) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [y1, y2] : S) &#123;<br>            P p1 = l.refl(P&#123;<span class="hljs-number">1.0</span> * x, <span class="hljs-number">1.0</span> * y1&#125;), p2 = l.refl(P&#123;<span class="hljs-number">1.0</span> * x, <span class="hljs-number">1.0</span> * y2&#125;);<br>            <span class="hljs-keyword">int</span> tx = roundint(p1.x), ty1 = roundint(p1.y), ty2 = roundint(p2.y);<br>            <span class="hljs-keyword">if</span> (ty1 &gt; ty2) swap(ty1, ty2);<br>            <span class="hljs-keyword">if</span> (V[tx].count(<span class="hljs-built_in">make_pair</span>(ty1, ty2)) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [y, S] : H) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [x1, x2] : S) &#123;<br>            P p1 = l.refl(P&#123;<span class="hljs-number">1.0</span> * x1, <span class="hljs-number">1.0</span> * y&#125;), p2 = l.refl(P&#123;<span class="hljs-number">1.0</span> * x2, <span class="hljs-number">1.0</span> * y&#125;);<br>            <span class="hljs-keyword">int</span> ty = roundint(p1.y), tx1 = roundint(p1.x), tx2 = roundint(p2.x);<br>            <span class="hljs-keyword">if</span> (tx1 &gt; tx2) swap(tx1, tx2);<br>            <span class="hljs-keyword">if</span> (H[ty].count(<span class="hljs-built_in">make_pair</span>(tx1, tx2)) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check2</span><span class="hljs-params">(L l)</span> </span>&#123; <span class="hljs-comment">// H &lt;-&gt; V</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [x, S] : V) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [y1, y2] : S) &#123;<br>            P p1 = l.refl(P&#123;<span class="hljs-number">1.0</span> * x, <span class="hljs-number">1.0</span> * y1&#125;), p2 = l.refl(P&#123;<span class="hljs-number">1.0</span> * x, <span class="hljs-number">1.0</span> * y2&#125;);<br>            <span class="hljs-keyword">int</span> ty = roundint(p1.y), tx1 = roundint(p1.x), tx2 = roundint(p2.x);<br>            <span class="hljs-keyword">if</span> (tx1 &gt; tx2) swap(tx1, tx2);<br>            <span class="hljs-keyword">if</span> (H[ty].count(<span class="hljs-built_in">make_pair</span>(tx1, tx2)) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [y, S] : H) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [x1, x2] : S) &#123;<br>            P p1 = l.refl(P&#123;<span class="hljs-number">1.0</span> * x1, <span class="hljs-number">1.0</span> * y&#125;), p2 = l.refl(P&#123;<span class="hljs-number">1.0</span> * x2, <span class="hljs-number">1.0</span> * y&#125;);<br>            <span class="hljs-keyword">int</span> tx = roundint(p1.x), ty1 = roundint(p1.y), ty2 = roundint(p2.y);<br>            <span class="hljs-keyword">if</span> (ty1 &gt; ty2) swap(ty1, ty2);<br>            <span class="hljs-keyword">if</span> (V[tx].count(<span class="hljs-built_in">make_pair</span>(ty1, ty2)) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    H.clear(); V.clear();<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">int</span> mxx = <span class="hljs-number">-1e9</span>, mxy = <span class="hljs-number">-1e9</span>, mnx = <span class="hljs-number">1e9</span>, mny = <span class="hljs-number">1e9</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> x1 = rd(), y1 = rd(), x2 = rd(), y2 = rd();<br>        mxx = max(mxx, x2); mnx = min(mnx, x1);<br>        mxy = max(mxy, y2); mny = min(mny, y1);<br>        V[x1].insert(<span class="hljs-built_in">make_pair</span>(y1, y2)); V[x2].insert(<span class="hljs-built_in">make_pair</span>(y1, y2));<br>        H[y1].insert(<span class="hljs-built_in">make_pair</span>(x1, x2)); H[y2].insert(<span class="hljs-built_in">make_pair</span>(x1, x2));<br>    &#125;<br><br>    <span class="hljs-built_in">multiset</span>&lt;pii&gt; tmp; tmp.clear();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;[x, S] : V) &#123;<br>        <span class="hljs-keyword">int</span> R = <span class="hljs-number">-1e9</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [l, r] : S) &#123;<br>            <span class="hljs-keyword">if</span> (tmp.empty() || l &gt; R) tmp.insert(<span class="hljs-built_in">make_pair</span>(l, r));<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">auto</span> [l1, r1] = *--tmp.end(); tmp.erase(--tmp.end()); <span class="hljs-keyword">int</span> l2 = l, r2 = r;<br>                <span class="hljs-keyword">if</span> (r1 == l2) tmp.insert(<span class="hljs-built_in">make_pair</span>(l1, r2)); <span class="hljs-comment">// connect segments</span><br>                <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// remove the intersection</span><br>                    <span class="hljs-keyword">if</span> (l1 != l2) tmp.insert(<span class="hljs-built_in">make_pair</span>(min(l1, l2), max(l1, l2)));<br>                    <span class="hljs-keyword">if</span> (r1 != r2) tmp.insert(<span class="hljs-built_in">make_pair</span>(min(r1, r2), max(r1, r2)));<br>                &#125;<br>            &#125;<br>            R = max(R, r);<br>        &#125;<br>        swap(S, tmp); tmp.clear();<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;[y, S] : H) &#123;<br>        <span class="hljs-keyword">int</span> R = <span class="hljs-number">-1e9</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [l, r] : S) &#123;<br>            <span class="hljs-keyword">if</span> (tmp.empty() || l &gt; R) tmp.insert(<span class="hljs-built_in">make_pair</span>(l, r));<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">auto</span> [l1, r1] = *--tmp.end(); tmp.erase(--tmp.end()); <span class="hljs-keyword">int</span> l2 = l, r2 = r;<br>                <span class="hljs-keyword">if</span> (r1 == l2) tmp.insert(<span class="hljs-built_in">make_pair</span>(l1, r2)); <span class="hljs-comment">// connect segments</span><br>                <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// remove the intersection</span><br>                    <span class="hljs-keyword">if</span> (l1 != l2) tmp.insert(<span class="hljs-built_in">make_pair</span>(min(l1, l2), max(l1, l2)));<br>                    <span class="hljs-keyword">if</span> (r1 != r2) tmp.insert(<span class="hljs-built_in">make_pair</span>(min(r1, r2), max(r1, r2)));<br>                &#125;<br>            &#125;<br>            R = max(R, r);<br>        &#125;<br>        swap(S, tmp); tmp.clear();<br>    &#125;<br><br>    <span class="hljs-built_in">vector</span>&lt;tii&gt; ans; ans.clear();<br>    <span class="hljs-comment">// y = midy</span><br>    <span class="hljs-keyword">if</span> (check1(L&#123;&#123;<span class="hljs-number">0</span>, (mxy + mny) / <span class="hljs-number">2.0</span>&#125;,&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;&#125;)) &#123;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">2</span>, c = mny + mxy;<br>        <span class="hljs-keyword">int</span> g = gcd(gcd(<span class="hljs-built_in">abs</span>(a), <span class="hljs-built_in">abs</span>(b)), <span class="hljs-built_in">abs</span>(c));<br>        a /= g; b /= g; c /= g;<br>        tii res = max(make_tuple(a, b, c), make_tuple(-a, -b, -c));<br>        ans.push_back(res);<br>    &#125;<br>    <span class="hljs-comment">// x = midx</span><br>    <span class="hljs-keyword">if</span> (check1(L&#123;&#123;(mxx + mnx) / <span class="hljs-number">2.0</span>, <span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;&#125;)) &#123;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span>, b = <span class="hljs-number">0</span>, c = mnx + mxx;<br>        <span class="hljs-keyword">int</span> g = gcd(gcd(<span class="hljs-built_in">abs</span>(a), <span class="hljs-built_in">abs</span>(b)), <span class="hljs-built_in">abs</span>(c));<br>        a /= g; b /= g; c /= g;<br>        tii res = max(make_tuple(a, b, c), make_tuple(-a, -b, -c));<br>        ans.push_back(res); <br>    &#125;<br>    <span class="hljs-comment">// &quot;/&quot;</span><br>    L l1&#123;&#123;(mxx + mnx) / <span class="hljs-number">2.0</span>, (mxy + mny) / <span class="hljs-number">2.0</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;&#125;;<br>    <span class="hljs-keyword">if</span> (check2(l1)) &#123;<br>        <span class="hljs-keyword">int</span> a = roundint(<span class="hljs-number">2</span> * l1.v.y);<br>        <span class="hljs-keyword">int</span> b = roundint(<span class="hljs-number">-2</span> * l1.v.x);<br>        <span class="hljs-keyword">int</span> c = roundint(<span class="hljs-number">2</span> * (l1.p.x * l1.v.y - l1.p.y * l1.v.x));<br>        <span class="hljs-keyword">int</span> g = gcd(gcd(<span class="hljs-built_in">abs</span>(a), <span class="hljs-built_in">abs</span>(b)), <span class="hljs-built_in">abs</span>(c));<br>        a /= g; b /= g; c /= g;<br>        tii res = max(make_tuple(a, b, c), make_tuple(-a, -b, -c));<br>        ans.push_back(res); <br>    &#125;<br>    <span class="hljs-comment">// &quot;\&quot;</span><br>    l1 = L&#123;&#123;(mxx + mnx) / <span class="hljs-number">2.0</span>, (mxy + mny) / <span class="hljs-number">2.0</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;&#125;;<br>    <span class="hljs-keyword">if</span> (check2(l1)) &#123;<br>        <span class="hljs-keyword">int</span> a = roundint(<span class="hljs-number">2</span> * l1.v.y);<br>        <span class="hljs-keyword">int</span> b = roundint(<span class="hljs-number">-2</span> * l1.v.x);<br>        <span class="hljs-keyword">int</span> c = roundint(<span class="hljs-number">2</span> * (l1.p.x * l1.v.y - l1.p.y * l1.v.x));<br>        <span class="hljs-keyword">int</span> g = gcd(gcd(<span class="hljs-built_in">abs</span>(a), <span class="hljs-built_in">abs</span>(b)), <span class="hljs-built_in">abs</span>(c));<br>        a /= g; b /= g; c /= g;<br>        tii res = max(make_tuple(a, b, c), make_tuple(-a, -b, -c));<br>        ans.push_back(res);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, (<span class="hljs-keyword">int</span>)ans.size());<br>    sort(ans.begin(), ans.end());<br>    reverse(ans.begin(), ans.end());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [a, b, c] : ans) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d &quot;</span>, a, b, c);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>看了下比较短的代码，发现都是用边界上所有拐点的对称性来判断的。边界上拐点就是<strong>只出现过一次的矩形顶点</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">typedef</span> tuple&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; tii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> b ? gcd(b, a % b) : a;&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">double</span> T;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> let const auto</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lett const T</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> letp const P <span class="hljs-comment">// P for point</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> letl const L <span class="hljs-comment">// L for line</span></span><br><span class="hljs-keyword">const</span> T eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> z(x) (abs((x)) &lt;= eps) <span class="hljs-comment">// is zero</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">roundint</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> y = <span class="hljs-built_in">ceil</span>(x);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = y - <span class="hljs-number">1</span>; i &lt;= y + <span class="hljs-number">1</span>; ++i) <span class="hljs-keyword">if</span> (z(x - i)) <span class="hljs-keyword">return</span> i;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2e9</span>;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span> &#123;</span><br>    T x, y;<br>    P (T x = <span class="hljs-number">0</span>, T y = <span class="hljs-number">0</span>) : x(x), y(y) &#123;&#125;<br>    P <span class="hljs-keyword">operator</span> + (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x + p.x, y + p.y&#125;;&#125; <br>    P <span class="hljs-keyword">operator</span> - (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x - p.x, y - p.y&#125;;&#125; <br>    P <span class="hljs-keyword">operator</span> * (lett &amp;d) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x * d, y * d&#125;;&#125;<br>    P <span class="hljs-keyword">operator</span> / (lett &amp;d) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x / d, y / d&#125;;&#125;<br>    P <span class="hljs-keyword">operator</span> - () <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;-x, -y&#125;;&#125;<br> <br>    T <span class="hljs-keyword">operator</span> | (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x * p.x + y * p.y;&#125; <span class="hljs-comment">// dot</span><br>    T <span class="hljs-keyword">operator</span> ^ (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x * p.y - y * p.x;&#125; <span class="hljs-comment">// cross</span><br><br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> == (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> z(x - p.x) &amp;&amp; z(y - p.y);&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> != (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> ! <span class="hljs-keyword">operator</span> == (p);&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> z(x - p.x) ? y &lt; p.y : x &lt; p.x;&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &gt; (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> !(*<span class="hljs-keyword">this</span> &lt; p || *<span class="hljs-keyword">this</span> == p);&#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">norm</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> x * x + y * y;&#125;<br>    <span class="hljs-function">P <span class="hljs-title">proj</span> <span class="hljs-params">(letp &amp;p)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> (*<span class="hljs-keyword">this</span>) * (((*<span class="hljs-keyword">this</span>) | p) / norm());&#125;<br>    <span class="hljs-function">P <span class="hljs-title">refl</span> <span class="hljs-params">(letp &amp;p)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> proj(p) * <span class="hljs-number">2</span> - p;&#125;<br>&#125; zero;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">L</span> &#123;</span><br>    P p, v;<br>    <span class="hljs-function">P <span class="hljs-title">proj</span><span class="hljs-params">(letp &amp;a)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> p + v.proj(a - p);&#125;<br>    <span class="hljs-function">P <span class="hljs-title">refl</span><span class="hljs-params">(letp &amp;a)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> p + v.refl(a - p);&#125; <br>&#125;;<br><br><span class="hljs-built_in">set</span>&lt;P&gt; s;<br><br><span class="hljs-built_in">vector</span>&lt;tii&gt; ans; <br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    s.clear(); ans.clear();<br>    <span class="hljs-keyword">int</span> n = rd(), mxx = <span class="hljs-number">-1e9</span>, mxy = <span class="hljs-number">-1e9</span>, mnx = <span class="hljs-number">1e9</span>, mny = <span class="hljs-number">1e9</span>;<br>    <span class="hljs-keyword">auto</span> add = [&amp;](<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y) &#123;<br>        P nw = P&#123;<span class="hljs-number">1.0</span> * x, <span class="hljs-number">1.0</span> * y&#125;;<br>        <span class="hljs-keyword">if</span> (s.count(nw)) s.erase(nw); <span class="hljs-keyword">else</span> s.insert(nw);<br>    &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> x1 = rd(), y1 = rd(), x2 = rd(), y2 = rd();<br>        add(x1, y1); add(x1, y2); <br>        add(x2, y1); add(x2, y2);<br>        mxx = max(mxx, x2); mnx = min(mnx, x1);<br>        mxy = max(mxy, y2); mny = min(mny, y1);<br>    &#125;<br>    <span class="hljs-keyword">auto</span> check = [&amp;](L l) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : s) <span class="hljs-keyword">if</span> (s.count(l.refl(p)) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;;<br>    <span class="hljs-keyword">auto</span> addans = [&amp;](<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c) &#123;<br>        <span class="hljs-keyword">int</span> g = gcd(gcd(<span class="hljs-built_in">abs</span>(a), <span class="hljs-built_in">abs</span>(b)), <span class="hljs-built_in">abs</span>(c));<br>        a /= g; b /= g; c /= g;<br>        tii res = max(make_tuple(a, b, c), make_tuple(-a, -b, -c));<br>        ans.push_back(res);<br>    &#125;;<br>    <span class="hljs-comment">// y = midy</span><br>    <span class="hljs-keyword">if</span> (check(L&#123;&#123;<span class="hljs-number">0</span>, (mxy + mny) / <span class="hljs-number">2.0</span>&#125;,&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;&#125;)) addans(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, mny + mxy);<br>    <span class="hljs-comment">// x = midx</span><br>    <span class="hljs-keyword">if</span> (check(L&#123;&#123;(mxx + mnx) / <span class="hljs-number">2.0</span>, <span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;&#125;)) addans(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, mnx + mxx);<br>    <span class="hljs-comment">// &quot;/&quot;</span><br>    L l1&#123;&#123;(mxx + mnx) / <span class="hljs-number">2.0</span>, (mxy + mny) / <span class="hljs-number">2.0</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;&#125;;<br>    <span class="hljs-keyword">if</span> (check(l1)) addans(roundint(<span class="hljs-number">2</span> * l1.v.y), roundint(<span class="hljs-number">-2</span> * l1.v.x), roundint(<span class="hljs-number">2</span> * (l1.p.x * l1.v.y - l1.p.y * l1.v.x)));<br>    <span class="hljs-comment">// &quot;\&quot;</span><br>    l1 = L&#123;&#123;(mxx + mnx) / <span class="hljs-number">2.0</span>, (mxy + mny) / <span class="hljs-number">2.0</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;&#125;;<br>    <span class="hljs-keyword">if</span> (check(l1)) addans(roundint(<span class="hljs-number">2</span> * l1.v.y), roundint(<span class="hljs-number">-2</span> * l1.v.x), roundint(<span class="hljs-number">2</span> * (l1.p.x * l1.v.y - l1.p.y * l1.v.x)));<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, (<span class="hljs-keyword">int</span>)ans.size());<br>    sort(ans.begin(), ans.end());<br>    reverse(ans.begin(), ans.end());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [a, b, c] : ans) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d &quot;</span>, a, b, c);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="b---binary-tree">B - Binary Tree</h2><blockquote><p>给定一棵树，轮流删掉一个满二叉子树，问谁赢。</p></blockquote><p>注意到满二叉树的点数总是奇数，所以答案只和总节点数的奇偶性有关。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = rd();<br><span class="hljs-built_in">puts</span>((x &amp; <span class="hljs-number">1</span>) ? <span class="hljs-string">&quot;Alice&quot;</span> : <span class="hljs-string">&quot;Bob&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; x; ++i) &#123;rd(); rd();&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="c---constructing-ranches">C - Constructing Ranches</h2><p>胖胖说是点分治板子题。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200000</span>,maxt=maxn&lt;&lt;<span class="hljs-number">1</span>,LOG=<span class="hljs-number">17</span>;<br><br><span class="hljs-keyword">int</span> te,n,a[maxn+<span class="hljs-number">5</span>];LL sum[maxn+<span class="hljs-number">5</span>],dis[maxn+<span class="hljs-number">5</span>],ans;<br><span class="hljs-keyword">int</span> E,lnk[maxn+<span class="hljs-number">5</span>],nxt[(maxn&lt;&lt;<span class="hljs-number">1</span>)+<span class="hljs-number">5</span>],to[(maxn&lt;&lt;<span class="hljs-number">1</span>)+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> fa[maxn+<span class="hljs-number">5</span>],dep[maxn+<span class="hljs-number">5</span>],SH[maxn+<span class="hljs-number">5</span>],top[maxn+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> lt[maxn+<span class="hljs-number">5</span>],ST[LOG+<span class="hljs-number">1</span>][maxn+<span class="hljs-number">5</span>],lg[maxn+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> gr,S,si[maxn+<span class="hljs-number">5</span>],ms[maxn+<span class="hljs-number">5</span>];<span class="hljs-keyword">bool</span> vis[maxn+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> m;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,LL&gt; p[maxn+<span class="hljs-number">5</span>];<br>LL c[maxt+<span class="hljs-number">5</span>];<span class="hljs-keyword">int</span> tr[maxt+<span class="hljs-number">5</span>];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EOLN(x) ((x)==10 || (x)==13 || (x)==EOF)</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">readc</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">16</span>],*l=buf,*r=buf;<br><span class="hljs-keyword">return</span> l==r &amp;&amp; (r=(l=buf)+fread(buf,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">16</span>,<span class="hljs-built_in">stdin</span>),l==r)?EOF:*l++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">int</span> <span class="hljs-title">readi</span><span class="hljs-params">(T &amp;x)</span></span>&#123;<br>T tot=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=readc(),lst=<span class="hljs-string">&#x27;+&#x27;</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(ch)) &#123;<span class="hljs-keyword">if</span> (ch==EOF) <span class="hljs-keyword">return</span> EOF;lst=ch;ch=readc();&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(ch)) tot=(tot&lt;&lt;<span class="hljs-number">3</span>)+(tot&lt;&lt;<span class="hljs-number">1</span>)+(ch^<span class="hljs-number">48</span>),ch=readc();<br>lst==<span class="hljs-string">&#x27;-&#x27;</span>?x=-tot:x=tot;<span class="hljs-keyword">return</span> EOLN(ch);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span> </span>&#123;to[++E]=y;nxt[E]=lnk[x];lnk[x]=E;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> pre=<span class="hljs-number">0</span>)</span></span>&#123;<br>si[x]=<span class="hljs-number">1</span>;SH[x]=<span class="hljs-number">0</span>;fa[x]=pre;dep[x]=dep[pre]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=lnk[x];j;j=nxt[j])<br><span class="hljs-keyword">if</span> (to[j]!=pre)&#123;<br>DFS(to[j],x);si[x]+=si[to[j]];<br><span class="hljs-keyword">if</span> (si[to[j]]&gt;si[SH[x]]) SH[x]=to[j];<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HLD</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> lst,<span class="hljs-keyword">int</span> pre=<span class="hljs-number">0</span>)</span></span>&#123;<br>lt[x]=++lt[<span class="hljs-number">0</span>];ST[<span class="hljs-number">0</span>][lt[<span class="hljs-number">0</span>]]=a[x];top[x]=lst;<br><span class="hljs-keyword">if</span> (SH[x]) HLD(SH[x],lst,x);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=lnk[x];j;j=nxt[j])<br><span class="hljs-keyword">if</span> (to[j]!=pre &amp;&amp; to[j]!=SH[x])<br>HLD(to[j],to[j],x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R)</span> </span>&#123;<span class="hljs-keyword">int</span> k=lg[R-L+<span class="hljs-number">1</span>];<span class="hljs-keyword">return</span> max(ST[k][L],ST[k][R-(<span class="hljs-number">1</span>&lt;&lt;k)+<span class="hljs-number">1</span>]);&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getgr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> pre=<span class="hljs-number">0</span>)</span></span>&#123;<br>si[x]=<span class="hljs-number">1</span>;ms[x]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=lnk[x],u;j;j=nxt[j])<br><span class="hljs-keyword">if</span> ((u=to[j])!=pre &amp;&amp; !vis[u])&#123;<br>getgr(u,x);si[x]+=si[u];<br>ms[x]=max(ms[x],si[u]);<br>&#125;<br>ms[x]=max(ms[x],S-si[x]);<br><span class="hljs-keyword">if</span> (!gr || ms[x]&lt;ms[gr]) gr=x;<br>&#125;<br>pair&lt;int,LL&gt; Ask(int x,int y)&#123;<br><span class="hljs-keyword">int</span> MAX=<span class="hljs-number">0</span>;LL S=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (top[x]!=top[y])&#123;<br><span class="hljs-keyword">if</span> (dep[top[x]]&lt;dep[top[y]]) swap(x,y);<br>MAX=max(MAX,Max(lt[top[x]],lt[x]));<br>S+=sum[lt[x]]-sum[lt[top[x]]<span class="hljs-number">-1</span>];<br>x=fa[top[x]];<br>&#125;<br><span class="hljs-keyword">if</span> (lt[x]&gt;lt[y]) swap(x,y);<br>MAX=max(MAX,Max(lt[x],lt[y]));<br>S+=sum[lt[y]]-sum[lt[x]<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">return</span> mp(MAX,S);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getpair</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> fa,<span class="hljs-keyword">int</span> pre=<span class="hljs-number">0</span>)</span></span>&#123;<br>p[++m]=Ask(x,fa);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=lnk[x],u;j;j=nxt[j])<br><span class="hljs-keyword">if</span> ((u=to[j])!=pre &amp;&amp; !vis[u]) getpair(to[j],fa,x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Find</span><span class="hljs-params">(LL x)</span></span>&#123;<br><span class="hljs-keyword">int</span> L=<span class="hljs-number">1</span>,R=c[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> mid=L+(R-L&gt;&gt;<span class="hljs-number">1</span>);L&lt;=R;mid=L+(R-L&gt;&gt;<span class="hljs-number">1</span>))<br>x&lt;=c[mid]?R=mid<span class="hljs-number">-1</span>:L=mid+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> L;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span> </span>&#123;<span class="hljs-keyword">for</span> (;x&lt;=c[<span class="hljs-number">0</span>];x+=x&amp;-x) tr[x]+=y;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (;x;x-=x&amp;-x) sum+=tr[x];<span class="hljs-keyword">return</span> sum;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Count</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> fa,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br>m=<span class="hljs-number">0</span>;getpair(x,fa);<br>sort(p+<span class="hljs-number">1</span>,p+<span class="hljs-number">1</span>+m);c[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++) c[++c[<span class="hljs-number">0</span>]]=(p[i].fr&lt;&lt;<span class="hljs-number">1</span>)-p[i].sc,c[++c[<span class="hljs-number">0</span>]]=p[i].sc-a[fa];<br>sort(c+<span class="hljs-number">1</span>,c+<span class="hljs-number">1</span>+c[<span class="hljs-number">0</span>]);c[<span class="hljs-number">0</span>]=unique(c+<span class="hljs-number">1</span>,c+<span class="hljs-number">1</span>+c[<span class="hljs-number">0</span>])-(c+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=c[<span class="hljs-number">0</span>];i++) tr[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>LL A=c[<span class="hljs-number">0</span>]-Find((p[i].fr&lt;&lt;<span class="hljs-number">1</span>)-p[i].sc)+<span class="hljs-number">1</span>,B=c[<span class="hljs-number">0</span>]-Find(p[i].sc-a[fa])+<span class="hljs-number">1</span>;<br>ans+=f*Sum(A<span class="hljs-number">-1</span>);Insert(B,<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Divide</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>vis[x]=<span class="hljs-literal">true</span>;Count(x,x,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=lnk[x],u;j;j=nxt[j])<br><span class="hljs-keyword">if</span> (!vis[u=to[j]])&#123;<br>Count(u,x,<span class="hljs-number">-1</span>);<br>gr=<span class="hljs-number">0</span>;S=si[u];getgr(u);Divide(gr);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=maxn;i++) lg[i]=lg[i&gt;&gt;<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (readi(te);te;te--)&#123;<br>readi(n);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) readi(a[i]);<br>E=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) lnk[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>,x,y;i&lt;n;i++) readi(x),readi(y),Add(x,y),Add(y,x);<br>DFS(<span class="hljs-number">1</span>);lt[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;HLD(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;(<span class="hljs-number">1</span>&lt;&lt;j)&lt;=n;j++)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i+(<span class="hljs-number">1</span>&lt;&lt;j)<span class="hljs-number">-1</span>&lt;=n;i++)<br>ST[j][i]=max(ST[j<span class="hljs-number">-1</span>][i],ST[j<span class="hljs-number">-1</span>][i+(<span class="hljs-number">1</span>&lt;&lt;j<span class="hljs-number">-1</span>)]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) sum[i]=sum[i<span class="hljs-number">-1</span>]+ST[<span class="hljs-number">0</span>][i];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) vis[i]=<span class="hljs-literal">false</span>;<br>ans=<span class="hljs-number">0</span>;gr=<span class="hljs-number">0</span>;S=n;getgr(<span class="hljs-number">1</span>);Divide(gr);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="d---defining-labels">D - Defining Labels</h2><blockquote><p>找 <span class="math inline">\(k\)</span> 进制下的第 <spanclass="math inline">\(X\)</span> 小数。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxl=<span class="hljs-number">100000</span>;<br><br><span class="hljs-keyword">int</span> te,K,n,a[maxl+<span class="hljs-number">5</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;te);te;te--)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;K,&amp;n);<br>LL pw=K,len=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (n&gt;pw) n-=pw,pw*=K,len++;<br>n--;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++) a[i]=n%K,n/=K;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=len<span class="hljs-number">-1</span>;~i;i--) <span class="hljs-built_in">putchar</span>(a[i]+<span class="hljs-number">10</span>-K+<span class="hljs-number">48</span>);<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="e---erasing-numbers">*E - Erasing Numbers</h2><blockquote><p>给定长度为 <span class="math inline">\(n\)</span> 的数列 <spanclass="math inline">\(a_1,a_2,\dots,a_n\)</span> ，保证 <spanclass="math inline">\(n\)</span> 是奇数，<spanclass="math inline">\(a_i\)</span>两两不同，每次操作选择相邻的三个数，保留中位数。</p><p>最后一定只会剩下一个数字。对于每个 <spanclass="math inline">\(a_i\)</span>，询问是否存在一种操作顺序，使得最后剩下的数字是他。</p></blockquote><p>又是奇怪的贪心题。首先如果一个数是中位数，那么它肯定能被留下来。</p><p>比如当前考虑的是 <span class="math inline">\(x\)</span> ，令比 <spanclass="math inline">\(x\)</span> 大的为 <spanclass="math inline">\(1\)</span> ，比 <spanclass="math inline">\(x\)</span> 小的为 <spanclass="math inline">\(0\)</span> ，那么肯定有某一类会多出来。</p><p>以 <span class="math inline">\(x\)</span>为断点将序列分成两段，每一段尽可能消除多的那一类即可（连续 <spanclass="math inline">\(3\)</span> 个即可少 <spanclass="math inline">\(2\)</span> 个）。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmin</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> (a &gt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmax</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> (a &lt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>);&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 5007</span><br><br><span class="hljs-keyword">int</span> a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getmax</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> tar)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>, sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = l; i &lt;= r; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (b[i] == tar) &#123;<br>            <span class="hljs-keyword">if</span> (cnt) --cnt;<br>            <span class="hljs-keyword">else</span> sum += tar;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ++cnt;<br>            <span class="hljs-keyword">if</span> (cnt &gt;= <span class="hljs-number">3</span>) cnt -= <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -tar * cnt + sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i] = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) <br>            <span class="hljs-keyword">if</span> (j != i) &#123;<br>                b[j] = (a[j] &gt; a[i] ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>);<br>                sum += b[j];<br>            &#125;<br>        <span class="hljs-keyword">if</span> (sum == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;1&#x27;</span>); <span class="hljs-keyword">continue</span>;&#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (sum &gt; <span class="hljs-number">0</span> &amp;&amp; getmax(<span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>) + getmax(i + <span class="hljs-number">1</span>, n, <span class="hljs-number">-1</span>) &lt;= <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;1&#x27;</span>); <span class="hljs-keyword">continue</span>;&#125;<br>            <span class="hljs-keyword">if</span> (sum &lt; <span class="hljs-number">0</span> &amp;&amp; getmax(<span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) + getmax(i + <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;1&#x27;</span>); <span class="hljs-keyword">continue</span>;&#125;<br>        &#125;   <br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="f---falling-objects">F - Falling Objects</h2><p>三维计算几何大模拟。</p><h2 id="g---game-design">G - Game Design</h2><blockquote><p>小清新构造，满足叶子权值 <span class="math inline">\(=1\)</span>，父节点权值 <span class="math inline">\(=\prod\)</span> 儿子权值 <spanclass="math inline">\(+1\)</span> ，根节点给定。</p></blockquote><p>每次分奇偶讨论即可，偶数一个儿子，奇数两个儿子 <spanclass="math inline">\(2\)</span> 和 <spanclass="math inline">\(x/2\)</span> ，这样只有 <spanclass="math inline">\(\log n\)</span> 个点。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><br><span class="hljs-keyword">int</span> tot, fa[N], son[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> faa)</span> </span>&#123;<br><span class="hljs-keyword">int</span> u = ++tot;<br>fa[u] = faa;<br>--k;<br><span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span>) &#123;son[u] = <span class="hljs-number">1</span>; <span class="hljs-keyword">return</span> u;&#125;<br><span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) son[u] = son[build(k, u)];<br><span class="hljs-keyword">else</span> &#123;<br>son[u] += son[build(<span class="hljs-number">2</span>, u)];<br>son[u] += son[build(k / <span class="hljs-number">2</span>, u)];<br>&#125;<br><span class="hljs-keyword">return</span> u;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> k = rd();<br><span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2\n1\n1 2&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>build(k, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, tot);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= tot; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, fa[i]); <br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= tot; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, son[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="h---hold-the-line">H - Hold the Line</h2><p>胖胖补的，貌似是把大常数双 log 改小常数双 log。<ahref="https://zigzagk.top/2022/11/09/2019ICPCXianggangH">链接</a></p><h2 id="i---incoming-asteroids">**I - Incoming Asteroids</h2><blockquote><p>有 <span class="math inline">\(n\)</span> 个集合，强制在线，支持<span class="math inline">\(m\)</span> 个操作：</p><ul><li>申请一个新的 ID，初始权值是 <span class="math inline">\(0\)</span>，目标值是 <span class="math inline">\(y_i\)</span> ，将 ID 加入给出的<span class="math inline">\(k\ (k\le 3)\)</span> 个集合。</li><li>对某个集合中的 ID，令他们的权值增加 <spanclass="math inline">\(w_i\)</span> 。报告第一次达到目标的人数。</li></ul></blockquote><p>神奇的暴力。考虑一个需求被分成了 <spanclass="math inline">\(k\)</span>份，如果要被达到，总有一份要达到总量<spanclass="math inline">\(/k\)</span> 。</p><p>因此在每个插入的集合里都放上一个提醒，如果增量达到了需求，就把所有集合的提醒都撤销，然后重新分<span class="math inline">\(k\)</span> 份塞进去。</p><p>每次提醒当前剩余的需求最多剩下原来的 <spanclass="math inline">\(\frac{k-1}{k}\)</span> ，所以复杂度是 <spanclass="math inline">\(\mathcal{O}(m\log_{\frac{k}{k+1}} y_i)\)</span>，当 <span class="math inline">\(k=3\)</span> 时可以接受。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr     first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc     second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp     make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mt     make_tuple</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb     push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii    pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> tii    tuple<span class="hljs-meta-string">&lt;int, int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(s) (s).begin(), (s).end()</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><br><span class="hljs-built_in">set</span>&lt;pii&gt; s[N];<br><br><span class="hljs-built_in">vector</span>&lt;pii&gt; a[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ans, pos;<br><br>ll need[N], val[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reset</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>pos.clear();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [w, p] : a[id]) &#123;s[p].erase(mp(w, id)); pos.pb(p);&#125;<br>a[id].clear(); <br><br>ll nw = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : pos) nw += val[p];<br><span class="hljs-keyword">if</span> (nw &gt;= need[id]) &#123;ans.pb(id); <span class="hljs-keyword">return</span>;&#125;<br>ll w = max(<span class="hljs-number">1u</span>ll, (need[id] - nw) / pos.size());<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : pos) &#123;<br>s[p].insert(mp(val[p] + w, id));<br>a[id].pb(mp(val[p] + w, p));<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(), m = rd();<br><span class="hljs-keyword">int</span> id = <span class="hljs-number">0</span>, lst = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br><span class="hljs-keyword">int</span> op = rd();<br><span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br>need[++id] = rd() ^ lst;<br><span class="hljs-keyword">int</span> k = rd();<br>ll w = max(<span class="hljs-number">1l</span>l, need[id] / k);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> p; k; --k) &#123;<br>need[id] += val[p = rd() ^ lst];<br>s[p].insert(mp(val[p] + w, id));<br>a[id].pb(mp(val[p] + w, p));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">int</span> x = rd() ^ lst;<br>val[x] += rd() ^ lst; ans.clear();<br><span class="hljs-keyword">while</span> (!s[x].empty() &amp;&amp; val[x] &gt;= s[x].begin() -&gt; fr) reset(s[x].begin() -&gt; sc);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, lst = ans.size());<br>sort(all(ans));<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : ans) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, i);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="j---junior-mathematician">J - Junior Mathematician</h2><p>胖胖说是数位dp板子题。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">5000</span>,maxk=<span class="hljs-number">60</span>,MOD=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> te,K,pw[maxn+<span class="hljs-number">5</span>];<span class="hljs-keyword">char</span> L[maxn+<span class="hljs-number">5</span>],R[maxn+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> n,a[maxn+<span class="hljs-number">5</span>],f[maxn+<span class="hljs-number">5</span>][maxk+<span class="hljs-number">5</span>][maxk+<span class="hljs-number">5</span>][<span class="hljs-number">2</span>],ans;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ADD</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span> </span>&#123;<span class="hljs-keyword">return</span> x+y&gt;=MOD?x+y-MOD:x+y;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">MUL</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span> </span>&#123;<span class="hljs-keyword">return</span> (LL)x*y%MOD;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DP</span><span class="hljs-params">(<span class="hljs-keyword">int</span> tp)</span></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;K;j++)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;K;k++)<br>f[i][j][k][<span class="hljs-number">0</span>]=f[i][j][k][<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>f[<span class="hljs-number">0</span>][a[<span class="hljs-number">0</span>]%K][(K-a[<span class="hljs-number">0</span>]*pw[n]%K)%K][<span class="hljs-number">1</span>]++;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;a[<span class="hljs-number">0</span>];i++) f[<span class="hljs-number">0</span>][i%K][(K-i*pw[n]%K)%K][<span class="hljs-number">0</span>]++;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;K;j++)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>,F;k&lt;K;k++)&#123;<br><span class="hljs-keyword">if</span> (F=f[i<span class="hljs-number">-1</span>][j][k][<span class="hljs-number">0</span>])<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>;t&lt;<span class="hljs-number">10</span>;t++)&#123;<br><span class="hljs-keyword">int</span> A=(j+t)%K,B=(k+j*t+K-t*pw[n-i]%K)%K;<br>f[i][A][B][<span class="hljs-number">0</span>]=ADD(f[i][A][B][<span class="hljs-number">0</span>],F);<br>&#125;<br><span class="hljs-keyword">if</span> (F=f[i<span class="hljs-number">-1</span>][j][k][<span class="hljs-number">1</span>])&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>;t&lt;a[i];t++)&#123;<br><span class="hljs-keyword">int</span> A=(j+t)%K,B=(k+j*t+K-t*pw[n-i]%K)%K;<br>f[i][A][B][<span class="hljs-number">0</span>]=ADD(f[i][A][B][<span class="hljs-number">0</span>],F);<br>&#125;<br><span class="hljs-keyword">int</span> A=(j+a[i])%K,B=(k+j*a[i]+K-a[i]*pw[n-i]%K)%K;<br>f[i][A][B][<span class="hljs-number">1</span>]=ADD(f[i][A][B][<span class="hljs-number">1</span>],F);<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;K;i++) ans=ADD(ans,MUL(tp,ADD(f[n][i][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],f[n][i][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>])));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;te);te;te--)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s%d&quot;</span>,L,R,&amp;K);n=<span class="hljs-built_in">strlen</span>(R);<br>pw[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) pw[i]=(pw[i<span class="hljs-number">-1</span>]*<span class="hljs-number">10</span>)%K;<br>n=<span class="hljs-built_in">strlen</span>(L)<span class="hljs-number">-1</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++) a[i]=L[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>reverse(a,a+n+<span class="hljs-number">1</span>);a[<span class="hljs-number">0</span>]--;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n &amp;&amp; a[i]&lt;<span class="hljs-number">0</span>;i++) a[i]+=<span class="hljs-number">10</span>,a[i+<span class="hljs-number">1</span>]--;<br><span class="hljs-keyword">while</span> (n&gt;<span class="hljs-number">0</span> &amp;&amp; !a[n]) n--;<br>reverse(a,a+n+<span class="hljs-number">1</span>);<br>ans=<span class="hljs-number">0</span>;<br>DP(MOD<span class="hljs-number">-1</span>);<br>n=<span class="hljs-built_in">strlen</span>(R)<span class="hljs-number">-1</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++) a[i]=R[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>DP(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="k---key-project">*K - Key Project</h2><blockquote><p>有 <span class="math inline">\(n\ (n\le 800)\)</span>栋楼排成一列，给出相邻两个楼的距离。</p><p>有 <span class="math inline">\(m\ (m\le 50000)\)</span> 个 A类人，<span class="math inline">\(m\)</span> 个 B 类人，每个人有两个参数<span class="math inline">\(x,c\)</span> ，代表位于第 <spanclass="math inline">\(x\)</span> 栋楼中，聘请的代价是 <spanclass="math inline">\(c\)</span> 。</p><p>称一对人包括一个 A 类人一个 B 类人，代价是聘请他们的代价和 +他们之间的距离。</p><p>现在要聘请 <span class="math inline">\(k\)</span>对人，代价是聘请每一对的代价之和，求最小代价。对 <spanclass="math inline">\(k=1\dots m\)</span> 。</p></blockquote><p>对 <span class="math inline">\(k=1\dots m\)</span>即每次考虑新增一对，这提示我们考虑费用流。</p><p>为每个建筑建一个点，相邻建筑之间连容量无穷，代价为距离的边。</p><p>对于每个 A 类人，连 <span class="math inline">\(S\to x_i\)</span>，容量为 <span class="math inline">\(1\)</span> ，代价为 <spanclass="math inline">\(c_i\)</span> ；对于 B 类人就和 <spanclass="math inline">\(T\)</span> 以同样的方式相连。</p><p>问题变成每次增广流量为 <span class="math inline">\(1\)</span>的流。直接做 EK 复杂度比较高。</p><p>考虑模拟费用流，单次增广复杂度降低到 <spanclass="math inline">\(O(n)\)</span> 。</p><p>因为每次增广的流量只有 <span class="math inline">\(1\)</span>，所以：</p><ul><li><p>每个点只需要考虑它拥有的最小代价的 A 类人和 B 类人。用堆维护。</p></li><li><p>每条边只需要考虑 <span class="math inline">\(1\)</span>流量时的最小代价，优先考虑退流的负代价边即可。</p></li></ul><p>对每个方向求出来代价的前缀和，那么选择一对点的代价可以拆分成两个位置独立的贡献。</p><p>然后扫一遍就可以求出来答案了，注意答案有 A 左 B 右、B 左 A右两种情况。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for(int i = (x); i &lt;= (y); ++i)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, x, y) for(int i = (x); i &gt;= (y); --i)</span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmin</span><span class="hljs-params">(T &amp;a, T b)</span> </span>&#123;<span class="hljs-keyword">return</span> a &gt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>;&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmax</span><span class="hljs-params">(T &amp;a, T b)</span> </span>&#123;<span class="hljs-keyword">return</span> a &lt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 807</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inf 1e18</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1. lr[i] : the number of backflow unit from i - 1 to i </span><br><span class="hljs-comment">   cost for [(i - 1) -&gt; i] = (lr[i] &gt; 0 ? -d[i] : d[i]);</span><br><span class="hljs-comment">2. rl[i] : the number of backflow unit from i to i - 1</span><br><span class="hljs-comment">   cost for [i -&gt; (i - 1)] = (rl[i] &gt; 0 ? -d[i] : d[i]);</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">int</span> d[N], lr[N], rl[N], mnA[N], mnB[N];<br><br>ll cstlr[N], cstrl[N];<br><br><span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;, greater&lt;<span class="hljs-keyword">int</span>&gt;&gt; A[N], B[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    rep(i, <span class="hljs-number">2</span>, n) d[i] = rd();<br>    rep(i, <span class="hljs-number">1</span>, m) &#123;<span class="hljs-keyword">int</span> p = rd(); A[p].push(rd());&#125;<br>    rep(i, <span class="hljs-number">1</span>, m) &#123;<span class="hljs-keyword">int</span> p = rd(); B[p].push(rd());&#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    cost from l to r : (mnA[L] - cstlr[L]) + (mnB[R] + cstlr[R])</span><br><span class="hljs-comment">    cost from r to l : (mnB[L] - cstrl[L]) + (mnA[R] + cstrl[R])</span><br><span class="hljs-comment">    */</span><br>    ll ans = <span class="hljs-number">0</span>;<br>    rep(t, <span class="hljs-number">1</span>, m) &#123;<br>        rep(i, <span class="hljs-number">1</span>, n) &#123;<br>            <span class="hljs-comment">// [mnx[i] = 0] : person of type x dosen&#x27;t exist</span><br>            mnA[i] = (A[i].empty() ? <span class="hljs-number">0</span> : A[i].top());<br>            mnB[i] = (B[i].empty() ? <span class="hljs-number">0</span> : B[i].top());<br>        &#125; <br>        rep(i, <span class="hljs-number">2</span>, n) &#123;<br>            cstlr[i] = cstlr[i - <span class="hljs-number">1</span>] + (lr[i] ? -d[i] : d[i]);<br>            cstrl[i] = cstrl[i - <span class="hljs-number">1</span>] + (rl[i] ? -d[i] : d[i]);<br>        &#125;<br>        ll cst = inf;<br>        <span class="hljs-keyword">int</span> pA = <span class="hljs-number">0</span>, pB = <span class="hljs-number">0</span>, Al = <span class="hljs-number">0</span>, Bl = <span class="hljs-number">0</span>;<br>        rep(i, <span class="hljs-number">1</span>, n) &#123;<br>            <span class="hljs-keyword">if</span> (mnA[i] &amp;&amp; (!Al || mnA[Al] - cstlr[Al] &gt; mnA[i] - cstlr[i])) Al = i;<br>            <span class="hljs-keyword">if</span> (mnB[i] &amp;&amp; (!Bl || mnB[Bl] - cstrl[Bl] &gt; mnB[i] - cstrl[i])) Bl = i;<br>            <span class="hljs-keyword">if</span> (Al &amp;&amp; mnB[i] &amp;&amp; getmin(cst, mnA[Al] - cstlr[Al] + mnB[i] + cstlr[i])) &#123;pA = Al; pB = i;&#125;<br>            <span class="hljs-keyword">if</span> (Bl &amp;&amp; mnA[i] &amp;&amp; getmin(cst, mnB[Bl] - cstrl[Bl] + mnA[i] + cstrl[i])) &#123;pA = i; pB = Bl;&#125;<br>        &#125;<br>        ans += cst; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>        A[pA].pop(); B[pB].pop();<br>        <span class="hljs-keyword">if</span> (pA &lt; pB) rep(i, pA + <span class="hljs-number">1</span>, pB) lr[i] &gt; <span class="hljs-number">0</span> ? --lr[i] : ++rl[i];<br>        <span class="hljs-keyword">else</span> rep(i, pB + <span class="hljs-number">1</span>, pA) rl[i] &gt; <span class="hljs-number">0</span> ? --rl[i] : ++lr[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Official Contests</category>
      
      <category>ICPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Geometry</tag>
      
      <tag>Greedy</tag>
      
      <tag>Flows</tag>
      
      <tag>Tricks</tag>
      
      <tag>Divide and Conquer</tag>
      
      <tag>Segment Tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019 ICPC World Finals</title>
    <link href="/official/icpc/19-world-finals/"/>
    <url>/official/icpc/19-world-finals/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>比赛地址 ：<a href="https://codeforces.com/gym/102511">Codeforces Gym102511</a></p><h2 id="a---azulejos">A - Azulejos</h2><blockquote><p>两排雕像，每排 <span class="math inline">\(n\)</span>个，每个雕像都有一个高度 <span class="math inline">\(h_i\)</span> 和权值<span class="math inline">\(w_i\)</span> 。</p><p>对每排重新排序，使得：1. 每排 <spanclass="math inline">\(w_i\)</span> 从左到右严格降序；2.第一排的每个位置的雕像都比第二排对应位置的高。</p></blockquote><p>贪心，先按照 <span class="math inline">\(w_i\)</span>从大到小排序，显然只有相同权值之间的可以有位置变动。</p><p>从左到右依次考虑，每次都扩展一个相同权值的区间，然后用右端点更小的区间里的雕像去匹配右端点更大的区间里的雕像。</p><p>这样子我们的需求都是在必须满足的时候满足的，并且已经考虑到了所有的情况。合理使用STL 即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mt make_tuple</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> tii tuple<span class="hljs-meta-string">&lt;int, int, int&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500007</span><br><br><span class="hljs-keyword">int</span> p[N], ansb[N], anss[N];<br><br>tii b[N], s[N];<br><br><span class="hljs-built_in">set</span>&lt;pii&gt; B, S;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) p[i] = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) b[i] = mt(p[i], rd(), i);<br>sort(b + <span class="hljs-number">1</span>, b + <span class="hljs-number">1</span> + n);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) p[i] = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) s[i] = mt(p[i], rd(), i);<br>sort(s + <span class="hljs-number">1</span>, s + <span class="hljs-number">1</span> + n);<br><span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ptrs = <span class="hljs-number">0</span>, ptrb = <span class="hljs-number">0</span>; ptrs &lt; n || ptrb &lt; n;) &#123;<br><span class="hljs-keyword">if</span> (ptrs &gt; ptrb) &#123;<br>++ptrb; <br>B.insert(mp(get&lt;<span class="hljs-number">1</span>&gt;(b[ptrb]), get&lt;<span class="hljs-number">2</span>&gt;(b[ptrb])));<br><span class="hljs-keyword">while</span> (ptrb &lt; n &amp;&amp; get&lt;<span class="hljs-number">0</span>&gt;(b[ptrb]) == get&lt;<span class="hljs-number">0</span>&gt;(b[ptrb + <span class="hljs-number">1</span>])) &#123;<br>++ptrb; B.insert(mp(get&lt;<span class="hljs-number">1</span>&gt;(b[ptrb]), get&lt;<span class="hljs-number">2</span>&gt;(b[ptrb])));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ptrs &lt; ptrb) &#123;<br>++ptrs; <br>S.insert(mp(get&lt;<span class="hljs-number">1</span>&gt;(s[ptrs]), get&lt;<span class="hljs-number">2</span>&gt;(s[ptrs])));<br><span class="hljs-keyword">while</span> (ptrs &lt; n &amp;&amp; get&lt;<span class="hljs-number">0</span>&gt;(s[ptrs]) == get&lt;<span class="hljs-number">0</span>&gt;(s[ptrs + <span class="hljs-number">1</span>])) &#123;<br>++ptrs; S.insert(mp(get&lt;<span class="hljs-number">1</span>&gt;(s[ptrs]), get&lt;<span class="hljs-number">2</span>&gt;(s[ptrs])));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>++ptrb; <br>B.insert(mp(get&lt;<span class="hljs-number">1</span>&gt;(b[ptrb]), get&lt;<span class="hljs-number">2</span>&gt;(b[ptrb])));<br><span class="hljs-keyword">while</span> (ptrb &lt; n &amp;&amp; get&lt;<span class="hljs-number">0</span>&gt;(b[ptrb]) == get&lt;<span class="hljs-number">0</span>&gt;(b[ptrb + <span class="hljs-number">1</span>])) &#123;<br>++ptrb; B.insert(mp(get&lt;<span class="hljs-number">1</span>&gt;(b[ptrb]), get&lt;<span class="hljs-number">2</span>&gt;(b[ptrb])));<br>&#125;<br>++ptrs; <br>S.insert(mp(get&lt;<span class="hljs-number">1</span>&gt;(s[ptrs]), get&lt;<span class="hljs-number">2</span>&gt;(s[ptrs])));<br><span class="hljs-keyword">while</span> (ptrs &lt; n &amp;&amp; get&lt;<span class="hljs-number">0</span>&gt;(s[ptrs]) == get&lt;<span class="hljs-number">0</span>&gt;(s[ptrs + <span class="hljs-number">1</span>])) &#123;<br>++ptrs; S.insert(mp(get&lt;<span class="hljs-number">1</span>&gt;(s[ptrs]), get&lt;<span class="hljs-number">2</span>&gt;(s[ptrs])));<br>&#125;<br>&#125;<br>    <br><span class="hljs-keyword">if</span> (ptrs &lt;= ptrb) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [h, id] : S) &#123;<br><span class="hljs-keyword">if</span> (h &gt;= (*--B.end()).first) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>anss[++tot] = id; ansb[tot] = (*B.upper_bound(mp(h, <span class="hljs-number">1e9</span>))).second;<br>B.erase(B.upper_bound(mp(h, <span class="hljs-number">1e9</span>))); <br>&#125;<br>S.clear();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [h, id] : B) &#123;<br><span class="hljs-keyword">if</span> (h &lt;= (*S.begin()).first) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>ansb[++tot] = id; anss[tot] = (*--S.lower_bound(mp(h, <span class="hljs-number">0</span>))).second;<br>S.erase(--S.lower_bound(mp(h, <span class="hljs-number">0</span>)));<br>&#125;<br>B.clear();<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ansb[i]); <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, anss[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="b---beautiful-bridges">*B - Beautiful Bridges</h2><blockquote><p>题面太麻烦了不再赘述，要求折线不能与上半圆外有交，最小化代价。</p></blockquote><p>数据范围是允许 <span class="math inline">\(\mathcal{O}(n^2)\)</span>做的，因此设 <span class="math inline">\(f[i]\)</span> 表示前 <spanclass="math inline">\(i\)</span> 个，且 <spanclass="math inline">\(i\)</span> 放了桥墩的最小代价，转移很直接。</p><p>问题就是如何判断可以转移，即：判断区间内的点是否在上半圆外。</p><p>我们考虑枚举左端点 <span class="math inline">\(i\)</span>，然后再枚举被更新的所有右端点 <span class="math inline">\(j\)</span>，那么可以注意到圆心的轨迹是 <spanclass="math inline">\((x_i+r,H-r),r\ge 0\)</span> 。</p><p>考虑一个点到圆心的距离，其实就是从无穷远变成点到直线距离再变到无穷远，因此一个点的合法范围一定是一个区间。</p><p>考虑一个点 <span class="math inline">\((x_j,y_j)\)</span>带来的约束，临界值显然取在 <spanclass="math inline">\((x_j-(x_i+r))^2+(y_j-(H-r))^2=r^2\)</span>处：</p><ul><li>如果 <span class="math inline">\((x_j,y_j)\)</span>加入时处于圆心上方（ <span class="math inline">\(y_j\geH-\frac{x_j-x_i}{2}\)</span> ），那么约束就是 <spanclass="math inline">\(r\in\)</span> 方程两根之间的区间。</li><li>否则，只会对 <span class="math inline">\(r\)</span>产生一个上界的约束（因为另一个约束不合法的原因是与下半圆冲突了，实际没关系）。</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 10007</span><br><br>ll x[N], y[N], f[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">double</span> <span class="hljs-title">sqr</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span> </span>&#123;<span class="hljs-keyword">return</span> x * x;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(f));<br>ll n = rd(), H = rd(), alpha = rd(), beta = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;x[i] = rd(); y[i] = rd();&#125;<br>f[<span class="hljs-number">1</span>] = alpha * (H - y[<span class="hljs-number">1</span>]);<br>ll inf = f[n];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">double</span> l = <span class="hljs-number">0</span>, r = H - y[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= n; ++j) &#123;<br><span class="hljs-keyword">double</span> b = <span class="hljs-number">2</span> * (x[i] + y[j] - x[j] - H);<br><span class="hljs-keyword">double</span> c = sqr(x[j] - x[i]) + sqr(y[j] - H);<br><span class="hljs-keyword">double</span> dlt = <span class="hljs-built_in">sqrt</span>(b * b - <span class="hljs-number">4</span> * c);<br><span class="hljs-keyword">double</span> L = (-b - dlt) / <span class="hljs-number">2</span>, R = (-b + dlt) / <span class="hljs-number">2</span>;<br>r = min(r, R);<br><span class="hljs-keyword">if</span> (<span class="hljs-number">1.0</span> * y[j] &gt;= H - <span class="hljs-number">1.0</span> * (x[j] - x[i]) / <span class="hljs-number">2.0</span>) l = max(l, L); <br><span class="hljs-keyword">double</span> nwpos = <span class="hljs-number">1.0</span> * (x[j] - x[i]) / <span class="hljs-number">2.0</span>;<br><span class="hljs-keyword">if</span> (nwpos &gt;= l - <span class="hljs-number">1e-8</span> &amp;&amp; nwpos &lt;= r + <span class="hljs-number">1e-8</span>)<br>f[j] = min(f[j], f[i] + alpha * (H - y[j]) + beta * (x[j] - x[i]) * (x[j] - x[i]));<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (f[n] == inf) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, f[n]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="d---circular-dna">D - Circular DNA</h2><blockquote><p>给定一个<strong>环状</strong>括号序列，有 <spanclass="math inline">\(n\)</span> 类括号分别记做 <spanclass="math inline">\((_i\)</span> 和 <spanclass="math inline">\()_i\)</span>，每类左括号只能与同一类右括号匹配。</p><p>找一个断开的位置变成一个序列，最大化合法的括号类数，如果有多个位置找下标最小的。</p><p>定义一类括号合法，当且仅当仅考虑该类括号，当前序列是一个合法的括号序列。</p></blockquote><p>对每类分开考虑，合法的位置一定是若干个区间，然后线段树支持区间加求最值即可。</p><p>一个比较好写的方法：假设开始的位置是 <spanclass="math inline">\(0\)</span> ，左括号 <spanclass="math inline">\(-1\)</span> ，右括号 <spanclass="math inline">\(+1\)</span> ，记录前缀和。</p><p>那么合法区间的左端点一定是前缀和最小的那些位置，右端点就是对应的下一个位置。</p><p><strong>upd on 2022/11/4 :因为只需要在最后查最值点，差分即可，并不需要线段树。</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mt make_tuple</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> tii tuple<span class="hljs-meta-string">&lt;int, int, int&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000007</span><br><br><span class="hljs-built_in">vector</span>&lt;pii&gt; s[N];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ls (rt &lt;&lt; 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rs (rt &lt;&lt; 1 | 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span><br><br><span class="hljs-keyword">int</span> n, tag[N &lt;&lt; <span class="hljs-number">2</span>];<br><br>pii mx[N &lt;&lt; <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (tag[rt]) &#123;<br>mx[ls].fr += tag[rt]; tag[ls] += tag[rt];<br>mx[rs].fr += tag[rt]; tag[rs] += tag[rt];<br>tag[rt] = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (mx[ls].fr &gt; mx[rs].fr) mx[rt] = mx[ls];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mx[ls].fr &lt; mx[rs].fr) mx[rt] = mx[rs];<br><span class="hljs-keyword">else</span> &#123;mx[rt].fr = mx[ls].fr; mx[rt].sc = min(mx[ls].sc, mx[rs].sc);&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>mx[rt].sc = l;<br><span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span>;<br>build(ls, l, mid);<br>build(rs, mid + <span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;<br>++mx[rt].fr; ++tag[rt]; <span class="hljs-keyword">return</span>;<br>&#125;<br>pushdown(rt);<br><span class="hljs-keyword">if</span> (L &lt;= mid) upd(ls, l, mid, L, R);<br><span class="hljs-keyword">if</span> (R &gt; mid) upd(rs, mid + <span class="hljs-number">1</span>, r, L, R);<br>pushup(rt);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (l &lt;= r) upd(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r);<br><span class="hljs-keyword">else</span> &#123;<br>upd(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>, r); <br><span class="hljs-keyword">if</span> (l &lt;= n) upd(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, n);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> tmp[N], pos[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>tmp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>, mn = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [v, p] : s[x]) &#123;<br>++tot; <br>tmp[tot] = tmp[tot - <span class="hljs-number">1</span>] + v;<br>mn = min(mn, tmp[tot]);<br>pos[tot] = p;<br>&#125;<br><span class="hljs-keyword">if</span> (tmp[tot] != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; tot; ++i)<br><span class="hljs-keyword">if</span> (tmp[i] == mn) add(pos[i] + <span class="hljs-number">1</span>, pos[i + <span class="hljs-number">1</span>]);<br><span class="hljs-keyword">if</span> (tmp[tot] == mn) add(pos[tot] + <span class="hljs-number">1</span>, pos[<span class="hljs-number">1</span>]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isalpha</span>(c)) c = getchar();<br><span class="hljs-keyword">int</span> x = rd();<br>s[x].pb(mp((c == <span class="hljs-string">&#x27;s&#x27;</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>), i));<br>&#125;<br>build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1000000</span>; ++i) <br><span class="hljs-keyword">if</span> (!s[i].empty()) work(i);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, mx[<span class="hljs-number">1</span>].sc, mx[<span class="hljs-number">1</span>].fr);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="e---dead-end-detector">*E - Dead-End Detector</h2><blockquote><p>给定无向图，定义 <span class="math inline">\(E_i=(u_i,v_i)\)</span>在 <span class="math inline">\(u_i\)</span> 端要放死路牌：从 <spanclass="math inline">\(u_i\)</span> 经过 <spanclass="math inline">\(E_i\)</span> 之后，如果想回 <spanclass="math inline">\(u_i\)</span> 一定要在某个顶点原路返回。</p><p>但如果存在 <span class="math inline">\(x\)</span> 经过 <spanclass="math inline">\(E_i\)</span> 之后可以到达 <spanclass="math inline">\(y\)</span> 再经过 <spanclass="math inline">\(E_j\)</span> ，并且 <spanclass="math inline">\(E_i\)</span> 在 <spanclass="math inline">\(x\)</span> 端有死路牌、<spanclass="math inline">\(E_j\)</span> 在 <spanclass="math inline">\(y\)</span> 端有死路牌，那么后者可以省去。</p><p>构造最小放置死路牌数方案。</p></blockquote><p>对每个连通块考虑。</p><p>如果是一棵树，每条边都是死路。发现只需要在所有的叶子端放置即可，其他路径必定可以反着找到一条从叶子出发的边。</p><p>如果是其他情况，一定存在回路。考虑先拎出来一棵生成树，每加一条边，原树上对应这两个端点之间的路径都不是死路。</p><p>我们称这些被覆盖的点为标记点。可以注意到，两个标记点之间的路径也不会是死路，因为一定会走到一个环上。</p><p>此外同理，剩下的边里指向标记点的路径都不是死路。只有从标记点走出来的路径，并且不能到另一个标记点的是死路。</p><p>根据题目的省略要求，发现只要把所有标记点的最小连通块找出来就可以了，考场上写的虚树，实际上按叶子拓扑即可。</p><p>要放置死路牌的位置就是从拓扑中未删除点指向被删除点的那些方向。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr     first </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc     second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp     make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mt     make_tuple</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb     push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii    pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> tii    tuple<span class="hljs-meta-string">&lt;int, int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500007</span><br><br><span class="hljs-keyword">bool</span> tree[N], circ[N], not_tree[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; s[N];<br><br><span class="hljs-keyword">int</span> tot, hd[N], f[N], deg[N];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> to, nxt;&#125; e[N &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>    e[++tot].to = v; e[tot].nxt = hd[u]; hd[u] = tot; ++deg[u];<br>    e[++tot].to = u; e[tot].nxt = hd[v]; hd[v] = tot; ++deg[v];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">return</span> x == f[x] ? x : f[x] = find(f[x]);&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>    x = find(x); y = find(y);<br>    f[x] = y; not_tree[y] |= not_tree[x];<br>&#125;<br><br><span class="hljs-built_in">vector</span>&lt;pii&gt; ans;<br><br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">topo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : s[x])<br>        <span class="hljs-keyword">if</span> (deg[u] == <span class="hljs-number">1</span> &amp;&amp; !circ[u]) &#123;tree[u] = <span class="hljs-literal">true</span>; q.push(u);&#125;<br>    <span class="hljs-keyword">while</span> (!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = hd[u], v; i; i = e[i].nxt) &#123;<br>            --deg[v = e[i].to];<br>            <span class="hljs-keyword">if</span> (deg[v] &lt;= <span class="hljs-number">1</span> &amp;&amp; !circ[v] &amp;&amp; !tree[v]) &#123;<br>                q.push(v); tree[v] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : s[x])<br>        <span class="hljs-keyword">if</span> (tree[u]) <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = hd[u], v; i; i = e[i].nxt)<br>                <span class="hljs-keyword">if</span> (!tree[v = e[i].to]) ans.pb(mp(v, u));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) f[i] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, u, v; i &lt;= m; ++i) &#123;<br>        u = rd(); v = rd(); <br>        <span class="hljs-keyword">if</span> (find(u) == find(v)) not_tree[find(u)] = circ[u] = circ[v] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> &#123;merge(u, v); add(u, v);&#125;   <br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) s[find(i)].pb(i);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br>        <span class="hljs-keyword">if</span> (f[i] == i) &#123;<br>            <span class="hljs-keyword">if</span> (not_tree[i]) topo(i);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : s[i]) <span class="hljs-keyword">if</span> (deg[u] == <span class="hljs-number">1</span>) ans.pb(mp(u, e[hd[u]].to));<br>        &#125;<br>    sort(all(ans));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, (<span class="hljs-keyword">int</span>)ans.size());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [u, v] : ans) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, u, v);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="g---first-of-her-name">G - First of Her Name</h2><blockquote><p>一棵树，每个点上有一个字符，定义一个节点的串就是从他到根路径上的字符依次接起来。</p><p>每次询问一个串 <span class="math inline">\(s\)</span>，问有多少个节点的串以 <span class="math inline">\(s\)</span>为前缀。</p></blockquote><p>把询问串翻转一下，节点的串顺序也改为从根到它的路径，相当于询问有多少个串以<span class="math inline">\(s\)</span> 为后缀。广义 SAM。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1000000</span>,maxt=maxn&lt;&lt;<span class="hljs-number">1</span>,maxi=<span class="hljs-number">26</span>;<br><br><span class="hljs-keyword">int</span> n,Q,p[maxn+<span class="hljs-number">5</span>],cnt[maxt+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> E,lnk[maxt+<span class="hljs-number">5</span>],nxt[maxt+<span class="hljs-number">5</span>],to[maxt+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> pl,ro,son[maxt+<span class="hljs-number">5</span>][maxi],fai[maxt+<span class="hljs-number">5</span>],MAX[maxt+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">char</span> s[maxn+<span class="hljs-number">5</span>];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EOLN(x) ((x)==10 || (x)==13 || (x)==EOF)</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">readc</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> buf[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">16</span>],*l=buf,*r=buf;<br><span class="hljs-keyword">return</span> l==r &amp;&amp; (r=(l=buf)+fread(buf,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">16</span>,<span class="hljs-built_in">stdin</span>),l==r)?EOF:*l++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">int</span> <span class="hljs-title">readi</span><span class="hljs-params">(T &amp;x)</span></span>&#123;<br>T tot=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=readc(),lst=<span class="hljs-string">&#x27;+&#x27;</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(ch)) &#123;<span class="hljs-keyword">if</span> (ch==EOF) <span class="hljs-keyword">return</span> EOF;lst=ch;ch=readc();&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(ch)) tot=(tot&lt;&lt;<span class="hljs-number">3</span>)+(tot&lt;&lt;<span class="hljs-number">1</span>)+(ch^<span class="hljs-number">48</span>),ch=readc();<br>lst==<span class="hljs-string">&#x27;-&#x27;</span>?x=-tot:x=tot;<span class="hljs-keyword">return</span> EOLN(ch);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">getupr</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">char</span> ch=readc();<span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isupper</span>(ch)) ch=readc();<span class="hljs-keyword">return</span> ch;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">reads</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *s)</span></span>&#123;<br><span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getupr();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isupper</span>(ch)) s[++len]=ch,ch=readc();<br><span class="hljs-keyword">return</span> len;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fastO</span>&#123;</span><br><span class="hljs-keyword">int</span> si;<span class="hljs-keyword">char</span> buf[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">16</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">putc</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch)</span></span>&#123;<br><span class="hljs-keyword">if</span> (si==(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">16</span>)) fwrite(buf,<span class="hljs-number">1</span>,si,<span class="hljs-built_in">stdout</span>),si=<span class="hljs-number">0</span>;<br>buf[si++]=ch;<br>&#125;<br>~fastO() &#123;fwrite(buf,<span class="hljs-number">1</span>,si,<span class="hljs-built_in">stdout</span>);&#125;<br>&#125;fo;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title">writei</span><span class="hljs-params">(T x,<span class="hljs-keyword">char</span> ch=<span class="hljs-string">&#x27;\n&#x27;</span>)</span></span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>,buf[<span class="hljs-number">100</span>];<br><span class="hljs-keyword">if</span> (x&lt;<span class="hljs-number">0</span>) fo.putc(<span class="hljs-string">&#x27;-&#x27;</span>),x=-x;<br><span class="hljs-keyword">do</span> buf[len++]=x%<span class="hljs-number">10</span>,x/=<span class="hljs-number">10</span>; <span class="hljs-keyword">while</span> (x);<br><span class="hljs-keyword">while</span> (len) fo.putc(buf[--len]+<span class="hljs-number">48</span>);<br><span class="hljs-keyword">if</span> (ch) fo.putc(ch);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span> </span>&#123;to[++E]=y;nxt[E]=lnk[x];lnk[x]=E;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">newnode</span><span class="hljs-params">()</span> </span>&#123;pl++;<span class="hljs-keyword">return</span> pl;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Extend</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> c)</span></span>&#123;<br><span class="hljs-keyword">if</span> (son[p][c])&#123;<br><span class="hljs-keyword">int</span> q=son[p][c];<span class="hljs-keyword">if</span> (MAX[p]+<span class="hljs-number">1</span>==MAX[q]) <span class="hljs-keyword">return</span> q;<br><span class="hljs-keyword">int</span> nq=newnode();MAX[nq]=MAX[p]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;maxi;i++) son[nq][i]=son[q][i];<br>fai[nq]=fai[q];fai[q]=nq;<br><span class="hljs-keyword">while</span> (p &amp;&amp; son[p][c]==q) son[p][c]=nq,p=fai[p];<br><span class="hljs-keyword">return</span> nq;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">int</span> np=newnode();MAX[np]=MAX[p]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (p &amp;&amp; !son[p][c]) son[p][c]=np,p=fai[p];<br><span class="hljs-keyword">if</span> (!p) &#123;fai[np]=ro;<span class="hljs-keyword">return</span> np;&#125;<br><span class="hljs-keyword">int</span> q=son[p][c];<span class="hljs-keyword">if</span> (MAX[p]+<span class="hljs-number">1</span>==MAX[q]) &#123;fai[np]=q;<span class="hljs-keyword">return</span> np;&#125;<br><span class="hljs-keyword">int</span> nq=newnode();MAX[nq]=MAX[p]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;maxi;i++) son[nq][i]=son[q][i];<br>fai[nq]=fai[q];fai[q]=fai[np]=nq;<br><span class="hljs-keyword">while</span> (p &amp;&amp; son[p][c]==q) son[p][c]=nq,p=fai[p];<br><span class="hljs-keyword">return</span> np;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=lnk[x];j;j=nxt[j]) DFS(to[j]),cnt[x]+=cnt[to[j]];&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>readi(n);readi(Q);<br>ro=newnode();p[<span class="hljs-number">0</span>]=ro;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>,w,x;i&lt;=n;i++)&#123;<br>w=getupr()-<span class="hljs-string">&#x27;A&#x27;</span>;readi(x);<br>p[i]=Extend(p[x],w);cnt[p[i]]++;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=pl;i++) Add(fai[i],i);<br>DFS(ro);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t=<span class="hljs-number">1</span>;t&lt;=Q;t++)&#123;<br><span class="hljs-keyword">int</span> len=reads(s),p=ro;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=len;i;i--) p=son[p][s[i]-<span class="hljs-string">&#x27;A&#x27;</span>];<br>writei(cnt[p]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="h---hobsons-trains">*H - Hobsons' trains</h2><blockquote><p>给一个内向基环树森林，对于每个点，问有多少个点沿着出边走 <spanclass="math inline">\(k\)</span> 步之内可以到达他。</p></blockquote><p>如果是树，就可以树上差分，对每个点 <spanclass="math inline">\(+1\)</span> ，再对其 <spanclass="math inline">\(k\)</span> 级祖先 <spanclass="math inline">\(-1\)</span> ，最后求子树和就是答案。</p><p>考虑对每棵树做完这个操作之后，再考虑每个点对环的贡献，发现一定是环上连续的一段，因此环上差分再单独做一遍即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int (i) = (x); (i) &lt;= (y); ++(i))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, x, y) for (int (i) = (x); (i) &gt;= (y); --(i))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500007</span><br><br><span class="hljs-keyword">int</span> n, m, k, tot, d[N], f[N], hd[N];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> to, nxt;&#125; e[N &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>    e[++tot].to = v; e[tot].nxt = hd[u]; hd[u] = tot;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">return</span> x == f[x] ? x : f[x] = find(f[x]);&#125;<br><br><span class="hljs-keyword">int</span> vis[N], circ[N], pref[N], ans[N], stk[N], top;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>    stk[++top] = u; ++ans[u];<br>    <span class="hljs-keyword">if</span> (top - k &gt; <span class="hljs-number">1</span>) --ans[stk[top - k - <span class="hljs-number">1</span>]]; <br>    <span class="hljs-keyword">else</span> &#123;<br>        --ans[stk[<span class="hljs-number">1</span>]];<br>        <span class="hljs-keyword">int</span> len = k - top + <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (len &gt;= m) ++pref[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> l = id, r = id + len - <span class="hljs-number">1</span>;<br>            ++pref[l];<br>            <span class="hljs-keyword">if</span> (r &gt; m) &#123;r -= m; ++pref[<span class="hljs-number">1</span>];&#125;<br>            <span class="hljs-keyword">if</span> (r &lt; m) --pref[r + <span class="hljs-number">1</span>];<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = hd[u], v; i; i = e[i].nxt) <br>        <span class="hljs-keyword">if</span> (vis[v = e[i].to] != <span class="hljs-number">2</span>) &#123;dfs(v, id); ans[u] += ans[v];&#125;<br>    --top;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    m = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> t = u;<br>    <span class="hljs-keyword">for</span> (; !vis[t]; t = d[t]) vis[t] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (; vis[t] != <span class="hljs-number">2</span>; t = d[t]) &#123;vis[t] = <span class="hljs-number">2</span>; circ[++m] = t;&#125;<br>    rep(i, <span class="hljs-number">1</span>, m) dfs(circ[i], i);<br>    rep(i, <span class="hljs-number">1</span>, m) &#123;pref[i] += pref[i - <span class="hljs-number">1</span>]; ans[circ[i]] += pref[i];&#125;<br>    rep(i, <span class="hljs-number">1</span>, m) pref[i] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = rd(); k = rd();<br>    rep(i, <span class="hljs-number">1</span>, n) f[i] = i;<br>    rep(i, <span class="hljs-number">1</span>, n) &#123;d[i] = rd(); add(d[i], i); f[i] = find(d[i]);&#125;<br>    rep(i, <span class="hljs-number">1</span>, n) <span class="hljs-keyword">if</span> (f[i] == i) work(i);<br>    rep(i, <span class="hljs-number">1</span>, n) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Official Contests</category>
      
      <category>ICPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Geometry</tag>
      
      <tag>Graphs</tag>
      
      <tag>Dynamic Programming</tag>
      
      <tag>Greedy</tag>
      
      <tag>String Suffix Structures</tag>
      
      <tag>Segment Tree</tag>
      
      <tag>Difference and Prefix Sum</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018 CCPC Finals</title>
    <link href="/official/ccpc/18-finals/"/>
    <url>/official/ccpc/18-finals/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>比赛地址 ：<a href="https://codeforces.com/gym/102055">Codeforces Gym102055</a></p><h2 id="a---mischievous-problem-setter">A - Mischievous ProblemSetter</h2><p>签到，排序之后扫一扫。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second </span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br><span class="hljs-keyword">int</span> testcase;<br><br><span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; a[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: &quot;</span>, ++testcase);<br><span class="hljs-keyword">int</span> n = rd(), m = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i].fr = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i].sc = rd();<br>sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">if</span> (a[i].sc &gt; m) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i - <span class="hljs-number">1</span>); <span class="hljs-keyword">return</span>;&#125;<br>m -= a[i].sc;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="b---balance-of-the-force">*B - Balance of the Force</h2><blockquote><p>有 <span class="math inline">\(n\)</span>位骑士，现在要分裂成两个阵营，第 <span class="math inline">\(i\)</span>位骑士加入光明阵营武力值为 <span class="math inline">\(L_i\)</span>，加入黑暗阵营武力值为 <span class="math inline">\(D_i\)</span> 。</p><p>此外有 <span class="math inline">\(m\)</span> 对仇敌关系 <spanclass="math inline">\((x_i,y_i)\)</span> ，表示要求第 <spanclass="math inline">\(x_i\)</span> 位骑士不能和第 <spanclass="math inline">\(y_i\)</span> 位骑士加入同一阵营。</p><p>问是否存在合法划分方案。若存在，假设第 <spanclass="math inline">\(i\)</span> 位骑士最终的武力值为 <spanclass="math inline">\(w_i\)</span> ，最小化 <spanclass="math inline">\(\max w_i-\min w_i\)</span> 。</p></blockquote><p>按照冲突关系连边，如果不是二分图就无解。</p><p>否则二分图染色，那么对于一个连通块只有两种染色方案，武力值区间对应着两个不同的<span class="math inline">\([l,r]\)</span> 。</p><p>不妨设两个区间分别是 <span class="math inline">\([l_1,r_1]\)</span>和 <span class="math inline">\([l_2,r_2]\)</span> 且 <spanclass="math inline">\(r_1&lt;r_2\)</span> ，我们先让每个区间取 <spanclass="math inline">\([l_1,r_1]\)</span> 。</p><p>然后从小到大枚举 <span class="math inline">\(\min w_i\)</span>，然后将不合法的区间变成另一个即可，维护过程中最小差值。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><br><span class="hljs-keyword">int</span> testcase, col[N], a[N], b[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N], s[<span class="hljs-number">3</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>s[col[u]].pb(u);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br><span class="hljs-keyword">if</span> (!col[v]) &#123;<br>col[v] = <span class="hljs-number">3</span> - col[u];<br><span class="hljs-keyword">if</span> (dfs(v)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (col[u] == col[v]) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">int</span> l1[N], r1[N], l2[N], r2[N], tot;<br><br><span class="hljs-built_in">priority_queue</span>&lt;pii, <span class="hljs-built_in">vector</span>&lt;pii&gt;, greater&lt;pii&gt;&gt; q;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>tot = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(!q.empty()) q.pop();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: &quot;</span>, ++testcase);<br><span class="hljs-keyword">int</span> n = rd(), m = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;e[i].clear(); col[i] = <span class="hljs-number">0</span>;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br><span class="hljs-keyword">int</span> a = rd(), b = rd();<br>e[a].pb(b); e[b].pb(a);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;a[i] = rd(); b[i] = rd();&#125;<br><span class="hljs-keyword">int</span> nwr = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br><span class="hljs-keyword">if</span> (!col[i]) &#123;<br>s[<span class="hljs-number">1</span>].clear();<br>s[<span class="hljs-number">2</span>].clear();<br>col[i] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (dfs(i)) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;IMPOSSIBLE&quot;</span>); <span class="hljs-keyword">return</span>;&#125;<br>++tot; <br>l1[tot] = l2[tot] = <span class="hljs-number">2e9</span>;<br>r1[tot] = r2[tot] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : s[<span class="hljs-number">1</span>]) &#123;<br>l1[tot] = min(l1[tot], a[u]);<br>l2[tot] = min(l2[tot], b[u]);<br>r1[tot] = max(r1[tot], a[u]);<br>r2[tot] = max(r2[tot], b[u]);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : s[<span class="hljs-number">2</span>]) &#123;<br>l1[tot] = min(l1[tot], b[u]);<br>l2[tot] = min(l2[tot], a[u]);<br>r1[tot] = max(r1[tot], b[u]);<br>r2[tot] = max(r2[tot], a[u]);<br>&#125;<br><span class="hljs-keyword">if</span> (r1[tot] &gt; r2[tot]) &#123;<br>swap(r1[tot], r2[tot]);<br>swap(l1[tot], l2[tot]);<br>&#125;<br>nwr = max(nwr, r1[tot]);<br>q.push(mp(l1[tot], tot));<br>&#125;<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">2e9</span>;<br><span class="hljs-keyword">while</span> (!q.empty()) &#123;<br><span class="hljs-keyword">auto</span> [nwl, p] = q.top(); q.pop();<br>ans = min(ans, nwr - nwl);<br><span class="hljs-keyword">if</span> (l2[p] == nwl) <span class="hljs-keyword">break</span>;<br>q.push(mp(l2[p], p)); nwr = max(nwr, r2[p]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="c---gcd-land">**C - GCD Land</h2><blockquote><p>对于 <span class="math inline">\(1\dots n\)</span> ，构造一个不超过<span class="math inline">\(10^n\)</span> 的非负整数，使得 <spanclass="math inline">\(x+1,x+2,\dots x+n\)</span> 连通。</p><p>定义 <span class="math inline">\(u,v\)</span> 直接连通当且仅当 <spanclass="math inline">\(gcd(u,v)&gt;1\)</span> ，定义 <spanclass="math inline">\(u,v\)</span> 连通当且仅当 <spanclass="math inline">\(u,v\)</span> 直接连通或存在 <spanclass="math inline">\(w\)</span> 使得 <spanclass="math inline">\(u,w\)</span> 连通、<spanclass="math inline">\(w,v\)</span> 连通。</p></blockquote><p>如果令 <span class="math inline">\(x=\prod_{p\ is\ prime,p\le n} p -1\)</span> ，那么数列相当于变成了 <spanclass="math inline">\(0,1,\dots,n-1\)</span> ，除了 <spanclass="math inline">\(1\)</span> 其他人都和 <spanclass="math inline">\(0\)</span> 连通。</p><p>那么现在就需要找一个合数沟通 <span class="math inline">\(1\)</span>和其他，随便构造一下就好了。注意到素数只有 <spanclass="math inline">\(\mathcal{O}(\frac{n}{\ln n})\)</span>个，数位并不会超。</p><p>柴老师的构造在 <span class="math inline">\(n&gt;34\)</span>的时候都有解，所以 <span class="math inline">\([1,34]\)</span>就打下表。求很多个数字的乘积用分治 + FFT即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<span class="hljs-keyword">typedef</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; PN;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100000</span>,maxt=<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">18</span>,MOD=<span class="hljs-number">998244353</span>;<br><br><span class="hljs-keyword">int</span> te,n,P[maxn+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> p[maxn+<span class="hljs-number">5</span>];<span class="hljs-keyword">bool</span> pri[maxn+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> wn[maxt+<span class="hljs-number">5</span>],temA[maxt+<span class="hljs-number">5</span>],temB[maxt+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> m;PN f[maxn+<span class="hljs-number">5</span>],F,G,H,res;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Make</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span> (!pri[i]) p[++p[<span class="hljs-number">0</span>]]=i;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>,t;j&lt;=p[<span class="hljs-number">0</span>] &amp;&amp; (t=i*p[j])&lt;=n;j++)<br>&#123;pri[t]=<span class="hljs-literal">true</span>;<span class="hljs-keyword">if</span> (!(i%p[j])) <span class="hljs-keyword">break</span>;&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ADD</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span> </span>&#123;<span class="hljs-keyword">return</span> x+y&gt;=MOD?x+y-MOD:x+y;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">MUL</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span> </span>&#123;<span class="hljs-keyword">return</span> (LL)x*y%MOD;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">MUL</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> MOD)</span> </span>&#123;<span class="hljs-keyword">return</span> (LL)x*y%MOD;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Pow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> w,<span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">int</span> s;<span class="hljs-keyword">for</span> (s=<span class="hljs-number">1</span>;b;b&gt;&gt;=<span class="hljs-number">1</span>,w=MUL(w,w)) <span class="hljs-keyword">if</span> (b&amp;<span class="hljs-number">1</span>) s=MUL(s,w);<span class="hljs-keyword">return</span> s;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Pow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> w,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> MOD)</span> </span>&#123;<span class="hljs-keyword">int</span> s;<span class="hljs-keyword">for</span> (s=<span class="hljs-number">1</span>;b;b&gt;&gt;=<span class="hljs-number">1</span>,w=MUL(w,w,MOD)) <span class="hljs-keyword">if</span> (b&amp;<span class="hljs-number">1</span>) s=MUL(s,w,MOD);<span class="hljs-keyword">return</span> s;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NTTPre</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x=Pow(<span class="hljs-number">3</span>,(MOD<span class="hljs-number">-1</span>)/maxt);<br>wn[maxt&gt;&gt;<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=(maxt&gt;&gt;<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>;i&lt;maxt;i++) wn[i]=MUL(wn[i<span class="hljs-number">-1</span>],x);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=(maxt&gt;&gt;<span class="hljs-number">1</span>)<span class="hljs-number">-1</span>;i;i--) wn[i]=wn[i&lt;&lt;<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NTT</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> f)</span></span>&#123;<br><span class="hljs-keyword">if</span> (f&gt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k=n&gt;&gt;<span class="hljs-number">1</span>;k;k&gt;&gt;=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br><span class="hljs-keyword">int</span> x=a[i+j],y=a[i+j+k];<br>a[i+j+k]=MUL(x+MOD-y,wn[k+j]);<br>a[i+j]=ADD(x,y);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;n;k&lt;&lt;=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i+=k&lt;&lt;<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)&#123;<br><span class="hljs-keyword">int</span> x=a[i+j],y=MUL(a[i+j+k],wn[k+j]);<br>a[i+j+k]=ADD(x,MOD-y);<br>a[i+j]=ADD(x,y);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,INV=MOD-(MOD<span class="hljs-number">-1</span>)/n;i&lt;n;i++) a[i]=MUL(a[i],INV);<br>reverse(a+<span class="hljs-number">1</span>,a+n);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(<span class="hljs-keyword">const</span> PN &amp;a)</span></span>&#123;<br><span class="hljs-keyword">int</span> si=a.size();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=si<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--) <span class="hljs-built_in">putchar</span>(a[i]+<span class="hljs-number">48</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br>PN <span class="hljs-keyword">operator</span> * (<span class="hljs-keyword">const</span> PN &amp;a,<span class="hljs-keyword">const</span> PN &amp;b)&#123;<br><span class="hljs-keyword">static</span> PN c;<br><span class="hljs-keyword">int</span> n=a.size(),m=b.size(),t;<br><span class="hljs-keyword">for</span> (t=<span class="hljs-number">1</span>;t&lt;n+m<span class="hljs-number">-1</span>;t&lt;&lt;=<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) temA[i]=a[i];<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=n;i&lt;=t;i++) temA[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) temB[i]=b[i];<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=m;i&lt;=t;i++) temB[i]=<span class="hljs-number">0</span>;<br>NTT(temA,t,<span class="hljs-number">1</span>);NTT(temB,t,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;t;i++) temA[i]=MUL(temA[i],temB[i]);<br>NTT(temA,t,<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n+m<span class="hljs-number">-1</span>;i++) temA[i+<span class="hljs-number">1</span>]+=temA[i]/<span class="hljs-number">10</span>,temA[i]%=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> si=n+m<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span> (si&gt;<span class="hljs-number">1</span> &amp;&amp; !temA[si]) si--;<br>c.resize(si+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=si;i++) c[i]=temA[i];<br><span class="hljs-keyword">return</span> c;<br>&#125;<br>PN <span class="hljs-keyword">operator</span> * (<span class="hljs-keyword">const</span> PN &amp;a,<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;x)&#123;<br><span class="hljs-keyword">static</span> PN c;<br><span class="hljs-keyword">int</span> si=a.size();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;si;i++) temA[i]=a[i]*x;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=si;i&lt;=si+<span class="hljs-number">10</span>;i++) temA[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;si+<span class="hljs-number">10</span>;i++) temA[i+<span class="hljs-number">1</span>]+=temA[i]/<span class="hljs-number">10</span>,temA[i]%=<span class="hljs-number">10</span>;<br>si+=<span class="hljs-number">10</span>;<span class="hljs-keyword">while</span> (si&gt;<span class="hljs-number">1</span> &amp;&amp; !temA[si]) si--;<br>c.resize(si+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=si;i++) c[i]=temA[i];<br><span class="hljs-keyword">return</span> c;<br>&#125;<br>PN <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> PN &amp;a,<span class="hljs-keyword">const</span> PN &amp;b)&#123;<br><span class="hljs-keyword">static</span> PN c;<br><span class="hljs-keyword">int</span> n=a.size(),m=b.size(),si=max(n,m);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) temA[i]=a[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) temB[i]=b[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=n;i&lt;=si;i++) temA[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=m;i&lt;=si;i++) temB[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;si;i++) temA[i]+=temB[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;si;i++) temA[i+<span class="hljs-number">1</span>]+=temA[i]/<span class="hljs-number">10</span>,temA[i]%=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">while</span> (si&gt;<span class="hljs-number">1</span> &amp;&amp; !temA[si]) si--;<br>c.resize(si+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=si;i++) c[i]=temA[i];<br><span class="hljs-keyword">return</span> c;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Fix</span><span class="hljs-params">(PN &amp;a,<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>a.clear();<br><span class="hljs-keyword">do</span> a.push_back(x%<span class="hljs-number">10</span>),x/=<span class="hljs-number">10</span>; <span class="hljs-keyword">while</span> (x);<br>&#125;<br><span class="hljs-function">PN <span class="hljs-title">Solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R)</span></span>&#123;<br><span class="hljs-keyword">if</span> (L==R) <span class="hljs-keyword">return</span> f[L];<br><span class="hljs-keyword">int</span> mid=L+(R-L&gt;&gt;<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> Solve(L,mid)*Solve(mid+<span class="hljs-number">1</span>,R);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>NTTPre();Make(maxn);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>,j=<span class="hljs-number">1</span>,k=<span class="hljs-number">1</span>;i&lt;=maxn;i++)&#123;<br><span class="hljs-keyword">while</span> (j*j&lt;i) j++;<br><span class="hljs-keyword">while</span> (k&lt;=p[<span class="hljs-number">0</span>] &amp;&amp; p[k]&lt;j) k++;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t=k;t&lt;=p[<span class="hljs-number">0</span>];t++)<br><span class="hljs-keyword">if</span> (<span class="hljs-number">3</span>*p[t]+<span class="hljs-number">1</span>&lt;i &amp;&amp; !pri[<span class="hljs-number">2</span>*p[t]+<span class="hljs-number">1</span>]) &#123;P[i]=p[t];<span class="hljs-keyword">break</span>;&#125;<br>&#125;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;te);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t=<span class="hljs-number">1</span>;t&lt;=te;t++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: &quot;</span>,t);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);m=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (n&lt;=<span class="hljs-number">34</span>)&#123;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">1</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">17</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2183&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">18</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;27828&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">19</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;27827&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">20</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;87889&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">21</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;87889&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">22</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;171053&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">23</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;171053&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">24</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;325309&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">25</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;127373&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">26</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;323509&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">27</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;151061&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">28</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;151061&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">29</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;151061&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">30</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;151060&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">31</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;151059&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">32</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;151058&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">33</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;151057&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">34</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;7106717&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">int</span> A=<span class="hljs-number">2</span>*P[n]+<span class="hljs-number">1</span>,B=P[n];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=p[<span class="hljs-number">0</span>] &amp;&amp; p[i]&lt;=n;i++)<br><span class="hljs-keyword">if</span> (p[i]!=P[n] &amp;&amp; p[i]!=(<span class="hljs-number">2</span>*P[n]+<span class="hljs-number">1</span>))&#123;<br>A=MUL(A,p[i],P[n]);B=MUL(B,p[i],<span class="hljs-number">2</span>*P[n]+<span class="hljs-number">1</span>);<br>m++;Fix(f[m],p[i]);<br>&#125;<br>F=Solve(<span class="hljs-number">1</span>,m);<br>A=Pow(A,P[n]<span class="hljs-number">-2</span>,P[n]);<br>B=Pow(B,<span class="hljs-number">2</span>*P[n]<span class="hljs-number">-1</span>,<span class="hljs-number">2</span>*P[n]+<span class="hljs-number">1</span>);<br>G=F*A;G=G*(P[n]<span class="hljs-number">-1</span>);G=G*(<span class="hljs-number">2</span>*P[n]+<span class="hljs-number">1</span>);<br>H=F*B;H=H*P[n];H=H*(P[n]+<span class="hljs-number">1</span>);<br>res=G+H;<br>res[<span class="hljs-number">0</span>]--;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;res[i]&lt;<span class="hljs-number">0</span>;i++) res[i]+=<span class="hljs-number">10</span>,res[i+<span class="hljs-number">1</span>]--;<br><span class="hljs-keyword">while</span> (res.size()&gt;<span class="hljs-number">1</span> &amp;&amp; !res.back()) res.pop_back();<br>Print(res);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="g---pastoral-life-in-stardew-valley">G - Pastoral Life inStardew Valley</h2><blockquote><p>对于一个 <span class="math inline">\(n\times m\)</span>的矩形，求和：对于每一个子矩形，选择其严格包含的（边界不重合）子矩形方案数。</p></blockquote><p>暴力的做法：枚举子矩形宽度 <span class="math inline">\(w\)</span>和高度 <span class="math inline">\(h\)</span>，然后暴力求和，发现维护一个前缀和就行了。 <span class="math display">\[ans =\bigg(\sum_{h=3}^n(n-h+1)\sum_{l=1}^{h-2}(h-l+1)\bigg)\bigg(\sum_{w=3}^m(m-w+1)\sum_{r=1}^{w-2}(w-r+1)\bigg)\]</span> 理性分析一下，显然这个题目可以变成两个一维问题答案的乘积。</p><ul><li><p>如果子子矩形宽度是 <span class="math inline">\(1\)</span>，那么就要从 <span class="math inline">\(n\)</span>中选三个数，分别代表左边界，右边界，子子矩形位置，方案数为 <spanclass="math inline">\({n\choose 3}\)</span> 。</p></li><li><p>如果子子矩形宽度是 <span class="math inline">\(2\)</span>，那么就要从 <span class="math inline">\(n\)</span> 中选四个数，方案数为<span class="math inline">\({n\choose 4}\)</span> 。</p></li></ul><p>因此最终答案是 <span class="math inline">\(({n\choose 3} + {n\choose4})({m\choose 3} + {m\choose 4})\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr        first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc        second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp        make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb        push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii       pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(s)    (s).begin(), (s).end()</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N   100007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 1000000007</span><br><br><span class="hljs-keyword">namespace</span> Comb &#123;<br>    <span class="hljs-keyword">int</span> fac[N], ifac[N];<br> <br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (; t; t &gt;&gt;= <span class="hljs-number">1</span>, x = <span class="hljs-number">1l</span>l * x * x % mod)<br>            <span class="hljs-keyword">if</span> (t &amp; <span class="hljs-number">1</span>) res = <span class="hljs-number">1l</span>l * res * x % mod;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        fac[<span class="hljs-number">0</span>] = ifac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) fac[i] = <span class="hljs-number">1l</span>l * fac[i - <span class="hljs-number">1</span>] * i % mod;<br>        ifac[N - <span class="hljs-number">1</span>] = fpow(fac[N - <span class="hljs-number">1</span>], mod - <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = N - <span class="hljs-number">2</span>; i; --i) ifac[i] = <span class="hljs-number">1l</span>l * ifac[i + <span class="hljs-number">1</span>] * (i + <span class="hljs-number">1</span>) % mod;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (n &lt; m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1l</span>l * fac[n] * ifac[m] % mod * ifac[n - m] % mod;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (Comb::C(x, <span class="hljs-number">3</span>) + Comb::C(x, <span class="hljs-number">4</span>)) % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Comb::init();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(), i = <span class="hljs-number">1</span>; i &lt;= t; ++i) <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: %lld\n&quot;</span>, i, <span class="hljs-number">1l</span>l * calc(rd()) * calc(rd()) % mod);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="i---cockroaches">I - Cockroaches</h2><blockquote><p>二维平面上 <span class="math inline">\(n\)</span>个给定点，选一个位置可以把 <span class="math inline">\(x\)</span> 或<span class="math inline">\(y\)</span> 相同的所有点都打上标记。</p><p>对于一次操作：（1）求最多标记多少个点。（2）在保证标记点数最多的前提下，有多少个可能的不同的被标记点集。</p></blockquote><p>离散化，记录 <span class="math inline">\(x\)</span> 相同的最多点数<span class="math inline">\(mxx\)</span> ，<spanclass="math inline">\(y\)</span> 相同的最多点数 <spanclass="math inline">\(mxy\)</span> ， <spanclass="math inline">\(cnt[x]+cnt[y]=mxx+mxy\)</span> 的给定点数 <spanclass="math inline">\(tot\)</span> ，讨论：</p><ul><li>如果 <span class="math inline">\(tot &lt; mxx\times mxy\)</span>，那么答案就是 <span class="math inline">\((mxx+mxy, mxx\timesmxy-tot)\)</span> 。</li><li>否则（1）答案就要减一，（2）的答案要继续统计 <spanclass="math inline">\(cnt[x]+cnt[y]=mxx+mxy-1\)</span> 的个数讨论。</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(x) x.begin(), (x).end()</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br><span class="hljs-keyword">int</span> testcase, x[N], y[N], cntx[N], cnty[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; X, Y;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: &quot;</span>, ++testcase);<br>X.clear(); Y.clear();<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)  &#123;<br>cntx[i] = cnty[i] = <span class="hljs-number">0</span>;<br>x[i] = rd(); X.pb(x[i]);<br>y[i] = rd(); Y.pb(y[i]);<br>&#125;<br>sort(all(X)); X.erase(unique(all(X)), X.end());<br>sort(all(Y)); Y.erase(unique(all(Y)), Y.end());<br><span class="hljs-keyword">auto</span> getx = [&amp;](<span class="hljs-keyword">int</span> w) &#123;<span class="hljs-keyword">return</span> lower_bound(all(X), w) - X.begin() + <span class="hljs-number">1</span>;&#125;;<br><span class="hljs-keyword">auto</span> gety = [&amp;](<span class="hljs-keyword">int</span> w) &#123;<span class="hljs-keyword">return</span> lower_bound(all(Y), w) - Y.begin() + <span class="hljs-number">1</span>;&#125;;<br><span class="hljs-keyword">int</span> mxx = <span class="hljs-number">0</span>, mxy = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>x[i] = getx(x[i]); y[i] = gety(y[i]);<br>++cntx[x[i]]; mxx = max(mxx, cntx[x[i]]);<br>++cnty[y[i]]; mxy = max(mxy, cnty[y[i]]);<br>&#125;<br><span class="hljs-keyword">int</span> cntmxx = <span class="hljs-number">0</span>, cntmxy = <span class="hljs-number">0</span>, cntnxx = <span class="hljs-number">0</span>, cntnxy = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">if</span> (cntx[i] == mxx) ++cntmxx;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cntx[i] == mxx - <span class="hljs-number">1</span>) ++cntnxx;<br><span class="hljs-keyword">if</span> (cnty[i] == mxy) ++cntmxy;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnty[i] == mxy - <span class="hljs-number">1</span>) ++cntnxy;<br>&#125;<br><span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>, ans = mxx + mxy, totnx = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">if</span> (cntx[x[i]] + cnty[y[i]] == ans) ++tot;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cntx[x[i]] + cnty[y[i]] == ans - <span class="hljs-number">1</span>) ++totnx;<br>&#125;<br><span class="hljs-keyword">bool</span> fl = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (tot == <span class="hljs-number">1l</span>l * cntmxx * cntmxy) &#123;--ans; fl = <span class="hljs-literal">false</span>;&#125;<br><span class="hljs-keyword">if</span> (ans == <span class="hljs-number">1</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1 1&quot;</span>); <span class="hljs-keyword">return</span>;&#125;<br><span class="hljs-keyword">if</span> (ans == <span class="hljs-number">2</span>) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %lld\n&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1l</span>l * n * (n - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>); <span class="hljs-keyword">return</span>;&#125;<br><span class="hljs-keyword">if</span> (fl) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %lld\n&quot;</span>, ans, <span class="hljs-number">1l</span>l * cntmxx * cntmxy - tot);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %lld\n&quot;</span>, ans, tot + <span class="hljs-number">1l</span>l * cntmxx * cntnxy + <span class="hljs-number">1l</span>l * cntmxy * cntnxx - totnx);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="k---mr.-panda-and-kakin">*K - Mr. Panda and Kakin</h2><blockquote><p>现在定义一个加密 FLAG 的算法（RSA）：</p><ol type="1"><li><p>随机从 <span class="math inline">\([10^5,10^9]\)</span>中选取整数 <span class="math inline">\(x\)</span> 。</p></li><li><p>令 <span class="math inline">\(p\)</span> 为小于 <spanclass="math inline">\(x\)</span> 的最大质数，<spanclass="math inline">\(q\)</span> 为大于 <spanclass="math inline">\(x\)</span> 的最小质数，<spanclass="math inline">\(n=pq\)</span></p></li><li><p>令 <span class="math inline">\(c=\text{FLAG}^{(2^{30}+3)}\modn\)</span></p></li></ol><p>现在给定 <span class="math inline">\(c,n\)</span> ，求 FLAG 。</p></blockquote><p>密码学讲过类似的破解思路但是考场上两个小时的时候才想起来。。。</p><p>首先 <span class="math inline">\(n=pq\)</span> ，其中 <spanclass="math inline">\(p,q\)</span> 为相邻素数，所以从 <spanclass="math inline">\(\sqrt n\)</span>开始枚举复杂度不会错，根据唯一分解，第一次找到的因数就是对的。</p><p>然后就可以分成两个同余方程，最后用 CRT 合并一下。</p><p>破解思路：根据费马小定理有 <span class="math inline">\(\text{FLAG} =\text{FLAG}^{(2^{30}+3)(2^{30}+3)^{-1}\mod (p-1)}\mod p\)</span></p><p>然后暴力检验一下 <span class="math inline">\(2^{30}+3\)</span>是素数，所以可以用扩欧求模 <span class="math inline">\(p-1\)</span>下的逆元，然后还原回去就好了。</p><p>赛时一直 WA ，发现了胖胖的黑科技快速乘有 bug ，乘数不能超过模数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ULL;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> DB;<br><br><span class="hljs-keyword">int</span> te;LL n,C;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ULL <span class="hljs-title">ADD</span><span class="hljs-params">(ULL x,ULL y,ULL MOD)</span> </span>&#123;<span class="hljs-keyword">return</span> x+y&gt;=MOD?x+y-MOD:x+y;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ULL <span class="hljs-title">MUL</span><span class="hljs-params">(ULL x,ULL y,ULL MOD)</span></span>&#123;<br>    LL s=x*y-(ULL)((DB)<span class="hljs-number">1</span>/MOD*x*y)*MOD;<br>    <span class="hljs-keyword">return</span> s&lt;<span class="hljs-number">0</span>?s+=MOD:(s&gt;=MOD?s-=MOD:s);<br>&#125;<br><span class="hljs-function">LL <span class="hljs-title">Pow</span><span class="hljs-params">(LL w,LL b,LL MOD)</span> </span>&#123;LL s;<span class="hljs-keyword">for</span> (s=<span class="hljs-number">1</span>;b;b&gt;&gt;=<span class="hljs-number">1</span>,w=MUL(w,w,MOD)) <span class="hljs-keyword">if</span> (b&amp;<span class="hljs-number">1</span>) s=MUL(s,w,MOD);<span class="hljs-keyword">return</span> s;&#125;<br><span class="hljs-function">LL <span class="hljs-title">exgcd</span><span class="hljs-params">(LL a,LL b,LL &amp;x,LL &amp;y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (!b) &#123;x=<span class="hljs-number">1</span>;y=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> a;&#125;<br>    LL r=exgcd(b,a%b,y,x);y-=a/b*x;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><span class="hljs-function">LL <span class="hljs-title">Inv</span><span class="hljs-params">(LL A,LL C)</span></span>&#123;<br>    LL x,y;exgcd(A,C,x,y);<br>    <span class="hljs-keyword">return</span> (x%C+C)%C;<br>&#125;<br><span class="hljs-function">LL <span class="hljs-title">Solve</span><span class="hljs-params">(LL A,LL B,LL C)</span></span>&#123;<br>    LL x,y,r=exgcd(A,C,x,y);<br>    C/=r;x=(x%C+C)%C;x=MUL(B/r%C,x,C);<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;te);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t=<span class="hljs-number">1</span>;t&lt;=te;t++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: &quot;</span>,t);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;C);<br>        LL S=<span class="hljs-built_in">sqrt</span>(n) - <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">while</span> ((n%S)) S++;<br>        LL Q=S,P=n/S;<br>        LL INV=Inv((<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">30</span>)+<span class="hljs-number">3</span>,P<span class="hljs-number">-1</span>);<br>        LL A=Pow(C%P,INV,P);<br>        INV=Inv((<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">30</span>)+<span class="hljs-number">3</span>,Q<span class="hljs-number">-1</span>);<br>        LL B=Pow(C%Q,INV,Q);<br>        LL now=Solve(Q,((A-B)%P+P)%P,P);<br>        A=ADD(MUL(now,Q,n),B,n);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,A);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="l---ultra-weak-goldbachs-conjecture">L - Ultra Weak Goldbach'sConjecture</h2><blockquote><p>给一个数字 <span class="math inline">\(x\)</span>，尝试分成六个素数的和。</p></blockquote><p>偶数：<span class="math inline">\(2,2,2,2,x,y\)</span> ，奇数：<spanclass="math inline">\(2,2,2,3,x,y\)</span>，剩下的事情交给哥德巴赫猜想。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ULL;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> DB;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">10000</span>,prime[]=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">17</span>,<span class="hljs-number">19</span>,<span class="hljs-number">23</span>,<span class="hljs-number">29</span>,<span class="hljs-number">31</span>,<span class="hljs-number">37</span>&#125;;<br><br><span class="hljs-keyword">int</span> te;LL n;<br><span class="hljs-keyword">int</span> p[maxn+<span class="hljs-number">5</span>];<span class="hljs-keyword">bool</span> pri[maxn+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">bool</span> f[<span class="hljs-number">6</span>][maxn+<span class="hljs-number">5</span>];<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; lst[<span class="hljs-number">6</span>][maxn+<span class="hljs-number">5</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ULL <span class="hljs-title">ADD</span><span class="hljs-params">(ULL x,ULL y,ULL MOD)</span> </span>&#123;<span class="hljs-keyword">return</span> x+y&gt;=MOD?x+y-MOD:x+y;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ULL <span class="hljs-title">MUL</span><span class="hljs-params">(ULL x,ULL y,ULL MOD)</span></span>&#123;<br>LL s=x*y-(ULL)((DB)<span class="hljs-number">1</span>/MOD*x*y)*MOD;<br><span class="hljs-keyword">return</span> s&lt;<span class="hljs-number">0</span>?s+=MOD:(s&gt;=MOD?s-=MOD:s);<br>&#125;<br><span class="hljs-function">LL <span class="hljs-title">Pow</span><span class="hljs-params">(LL w,LL b,LL MOD)</span> </span>&#123;LL s;<span class="hljs-keyword">for</span> (s=<span class="hljs-number">1</span>;b;b&gt;&gt;=<span class="hljs-number">1</span>,w=MUL(w,w,MOD)) <span class="hljs-keyword">if</span> (b&amp;<span class="hljs-number">1</span>) s=MUL(s,w,MOD);<span class="hljs-keyword">return</span> s;&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(LL p,LL n)</span></span>&#123;<br><span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;LL d=n<span class="hljs-number">-1</span>,x,s;<br><span class="hljs-keyword">while</span> (d&amp;<span class="hljs-number">1</span>^<span class="hljs-number">1</span>) d&gt;&gt;=<span class="hljs-number">1</span>,k++;<br>x=Pow(p,d,n);<br><span class="hljs-keyword">for</span> (;k;k--,x=s)&#123;<br>s=MUL(x,x,n);<br><span class="hljs-keyword">if</span> (s==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> x==<span class="hljs-number">1</span> || x==n<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">MR</span><span class="hljs-params">(LL n)</span></span>&#123;<br><span class="hljs-keyword">if</span> (n==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t=<span class="hljs-number">0</span>;t&lt;<span class="hljs-number">12</span>;t++)&#123;<br><span class="hljs-keyword">if</span> (n==prime[t]) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (!(n%prime[t])) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (!check(prime[t],n)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Make</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span> (!pri[i]) p[++p[<span class="hljs-number">0</span>]]=i;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>,t;j&lt;=p[<span class="hljs-number">0</span>] &amp;&amp; (t=i*p[j])&lt;=n;j++)<br>&#123;pri[t]=<span class="hljs-literal">true</span>;<span class="hljs-keyword">if</span> (!(i%p[j])) <span class="hljs-keyword">break</span>;&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>Make(maxn);<br>f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=p[<span class="hljs-number">0</span>];k++)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=p[k];j&lt;=maxn;j++)<br><span class="hljs-keyword">if</span> (f[i<span class="hljs-number">-1</span>][j-p[k]]) f[i][j]=<span class="hljs-literal">true</span>,lst[i][j]=mp(i<span class="hljs-number">-1</span>,j-p[k]);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;te);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t=<span class="hljs-number">1</span>;t&lt;=te;t++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;n);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d:&quot;</span>,t);<br><span class="hljs-keyword">if</span> (n&lt;=<span class="hljs-number">11</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot; IMPOSSIBLE&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br>LL x=n<span class="hljs-number">-10</span>;<br><span class="hljs-keyword">for</span> (;!MR(x) || !f[<span class="hljs-number">5</span>][n-x];x--);<br><span class="hljs-keyword">int</span> i=<span class="hljs-number">5</span>,j=n-x;<br><span class="hljs-keyword">while</span> (i || j)&#123;<br><span class="hljs-keyword">int</span> x=lst[i][j].fr,y=lst[i][j].sc;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>,j-y);<br>i=x;j=y;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %lld\n&quot;</span>,x);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Official Contests</category>
      
      <category>CCPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Graphs</tag>
      
      <tag>Number Theory</tag>
      
      <tag>Counting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019-2020 ICPC Latin American Regional</title>
    <link href="/official/icpc/19-latin-american/"/>
    <url>/official/icpc/19-latin-american/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>比赛地址 ：<a href="https://codeforces.com/gym/102428">Codeforces Gym102428</a></p><h2 id="a---algorithm-teaching">A - Algorithm Teaching</h2><blockquote><p><span class="math inline">\(n\ (1\le n\le 10^3)\)</span> 个老师，第<span class="math inline">\(i\)</span> 个老师会 <spanclass="math inline">\(m_i\ (1\le m_i\le 10)\)</span> 个科目：<spanclass="math inline">\(s_{i,1},s_{i,2},\cdots,s_{i,m_i}\)</span>。</p><p>每个学生只可以从一个老师那里学会老师会的科目的一个子集，两个学生可以合作当且仅当会的集合互不包含。</p><p>问最多能找出来多少个学生，使得两两都可以合作。</p></blockquote><p>求包含关系的最长反链，由 dilworth 定理就是求最小链覆盖。</p><p>每个老师对应 <span class="math inline">\(2^{m_i}-1\)</span>个集合，<span class="math inline">\(3^{m_i}\)</span>个包含关系。最多一共 <span class="math inline">\(102300\)</span>个不同的集合，<span class="math inline">\(5904900\)</span> 条边。</p><p>包含关系天然的是传递闭包，因此直接跑最小路径覆盖复杂度 <spanclass="math inline">\(\mathcal{O}(m\sqrt n)\)</span> 约 <spanclass="math inline">\(10^9\)</span> ，Hopcroft常数很小（只跑了217ms）。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr            first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc            second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb            push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp            make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mt            make_tuple</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii           pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> tiii          tuple<span class="hljs-meta-string">&lt;long, long, long&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(s)        (s).begin(), (s).end()</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x)     ((x) &amp; -(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y)  for (int (i) = (x); (i) &lt;= (y); ++(i))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, x, y)  for (int (i) = (x); (i) &gt;= (y); --(i))</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmin</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> (a &gt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmax</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> (a &lt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>);&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N   = <span class="hljs-number">110007</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">1000000000</span>;<br><br><span class="hljs-keyword">namespace</span> Hopcroft_Karp &#123;<br><br>    <span class="hljs-keyword">bool</span> vis[N];<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br>    <span class="hljs-keyword">int</span> nl, nr, ml[N], mr[N], dl[N], dr[N]; <span class="hljs-comment">// m for match, d for distance</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> q[N], hd, tl; hd = <span class="hljs-number">1</span>; tl = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(dl, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) * (nl + <span class="hljs-number">1</span>));<br>        <span class="hljs-built_in">memset</span>(dr, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) * (nr + <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= nl; ++i) <span class="hljs-keyword">if</span> (!ml[i]) &#123;dl[i] = <span class="hljs-number">0</span>; q[++tl] = i;&#125;<br>        <span class="hljs-keyword">int</span> dT = inf;<br>        <span class="hljs-keyword">while</span> (hd &lt;= tl) &#123;<br>            <span class="hljs-keyword">int</span> u = q[hd++];<br>            <span class="hljs-keyword">if</span> (dl[u] &gt;= dT) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>                <span class="hljs-keyword">if</span> (dr[v] == <span class="hljs-number">-1</span>) &#123;<br>                    dr[v] = dl[u] + <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">if</span> (!mr[v]) getmin(dT, dr[v] + <span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">else</span> &#123;dl[mr[v]] = dr[v] + <span class="hljs-number">1</span>; q[++tl] = mr[v];&#125;<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dT != inf;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) &#123;<br>            <span class="hljs-keyword">if</span> (vis[v] || dl[u] + <span class="hljs-number">1</span> != dr[v]) <span class="hljs-keyword">continue</span>;<br>            vis[v] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (!mr[v] || dfs(mr[v])) &#123;mr[v] = u; ml[u] = v; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;e[u].push_back(v);&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">max_matching</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(bfs()) &#123;<br>            <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">bool</span>) * (nr + <span class="hljs-number">1</span>));<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= nl; ++i) <span class="hljs-keyword">if</span> (!ml[i]) ans += dfs(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> tot, cnts;<br><br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; tr;<br><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;, <span class="hljs-keyword">int</span>&gt; id;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n; <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123; <br>        <span class="hljs-keyword">int</span> k; <span class="hljs-built_in">cin</span> &gt;&gt; k;<br>        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">course</span><span class="hljs-params">(k)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; k; ++j) &#123;<br>            <span class="hljs-built_in">string</span> str;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; str;<br>            <span class="hljs-keyword">if</span> (!tr[str]) tr[str] = ++cnts;<br>            course[j] = tr[str];<br>        &#125;<br>        sort(all(course));<br>        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">subset</span><span class="hljs-params">(<span class="hljs-number">1</span> &lt;&lt; k)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> S = <span class="hljs-number">1</span>; S &lt; (<span class="hljs-number">1</span> &lt;&lt; k); ++S) &#123;<br>            <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">tmp</span><span class="hljs-params">(__builtin_popcount(S))</span></span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>, tmpcnt = <span class="hljs-number">0</span>; j &lt; k; ++j)<br>                <span class="hljs-keyword">if</span> (S &amp; (<span class="hljs-number">1</span> &lt;&lt; j)) tmp[tmpcnt++] = course[j];<br>            <span class="hljs-keyword">if</span> (!id[tmp]) id[tmp] = ++tot;<br>            subset[S] = id[tmp];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> S = <span class="hljs-number">1</span>; S &lt; (<span class="hljs-number">1</span> &lt;&lt; k); ++S) &#123;<br>            <span class="hljs-keyword">int</span> nwid = subset[S];<br>            <span class="hljs-keyword">if</span> (vis[nwid]) <span class="hljs-keyword">continue</span>;<br>            vis[nwid] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> s = (S &amp; (S - <span class="hljs-number">1</span>)); s; s = (S &amp; (s - <span class="hljs-number">1</span>))) Hopcroft_Karp::add(nwid, subset[s]);<br>        &#125;  <br>    &#125;<br>    Hopcroft_Karp::nl = Hopcroft_Karp::nr = tot;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, tot - Hopcroft_Karp::max_matching());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;  <br></code></pre></div></td></tr></table></figure><h2 id="c---cut-inequality-down">*C - Cut Inequality Down</h2><blockquote><p>一共 <span class="math inline">\(n\ (1\le n\le 10^5)\)</span>个月，第 <span class="math inline">\(i\)</span> 个月的收入固定是 <spanclass="math inline">\(a_i\ (-10^6\le a_i\le 10^6)\)</span> 元。</p><p>限制钱数任何时刻都必须在 <span class="math inline">\([L,R]\)</span>内，如果一个月收入之后超过了边界就把钱数改为对应边界。</p><p><span class="math inline">\(Q\ (1\le Q\le 10^5)\)</span>次询问：如果从第 <span class="math inline">\(a\)</span> 天开始的时候有<span class="math inline">\(w\)</span> 元钱，那么第 <spanclass="math inline">\(b\)</span> 天的时候有多少钱？</p></blockquote><p>如果没有碰过边界，答案就是 <span class="math inline">\(w+sum[b] -sum[a - 1]\)</span> 。</p><p>如果碰过边界，答案就是 <strong>最后一次碰的边界值 +剩下的一段收入和</strong> 。</p><p>如何求最后一次碰的边界的位置呢？</p><p>首先我们可以 <span class="math inline">\(O(1)\)</span>判断给定区间和初始钱数，区间内是否碰过边界：</p><ul><li>预处理前缀和的区间 <span class="math inline">\(\max,\min\)</span> 的ST 表，查区间内收入最多/最低时刻，与边界比较即可。</li></ul><p>那么可以用上述方法套一个二分 <spanclass="math inline">\(\mathcal{O}(\log n)\)</span>求出最近的触碰边界时刻。</p><p>就可以预处理倍增 <code>nxt[i][t][0/1]</code> 表示当前在 <spanclass="math inline">\(i\)</span>，<strong>当前钱数是上/下边界</strong>，往后 <spanclass="math inline">\(2^t\)</span>次触及边界的位置和对应是上/下边界。</p><p>每次询问先二分一次到边界，然后用倍增跳，最后一段直接用前缀和，总复杂度<span class="math inline">\(\mathcal{O}(n\log n+ Q\log n)\)</span>。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr        first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc        second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp        make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb        push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii       pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(s)    (s).begin(), (s).end()</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br><span class="hljs-keyword">int</span> n, L, R, a[N], lg[N];<br><br>ll mx[N][<span class="hljs-number">18</span>], mn[N][<span class="hljs-number">18</span>], pre[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qmx</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> t = lg[r - l + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> max(mx[l][t], mx[r - (<span class="hljs-number">1</span> &lt;&lt; t) + <span class="hljs-number">1</span>][t]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qmn</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> t = lg[r - l + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> min(mn[l][t], mn[r - (<span class="hljs-number">1</span> &lt;&lt; t) + <span class="hljs-number">1</span>][t]);<br>&#125;<br><br><span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">bool</span>&gt; nxt[N][<span class="hljs-number">18</span>][<span class="hljs-number">2</span>];<br><br>pair&lt;int, bool&gt; getnxt(int nw, int w) &#123;<br>    <span class="hljs-keyword">auto</span> check = [&amp;](<span class="hljs-keyword">int</span> p) &#123;<br>        <span class="hljs-keyword">if</span> (w + qmx(nw, p) - pre[nw - <span class="hljs-number">1</span>] &gt; R) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (w + qmn(nw, p) - pre[nw - <span class="hljs-number">1</span>] &lt; L) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;;<br>    <span class="hljs-keyword">if</span> (!check(n)) <span class="hljs-keyword">return</span> mp(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> l = nw, r = n;<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        check(mid) ? r = mid : l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> mp(l, w + qmx(nw, l) - pre[nw - <span class="hljs-number">1</span>] &gt; R);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>; (<span class="hljs-number">1</span> &lt;&lt; t) &lt; N; ++t) lg[<span class="hljs-number">1</span> &lt;&lt; t] = t;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) <span class="hljs-keyword">if</span> (!lg[i]) lg[i] = lg[i - <span class="hljs-number">1</span>];<br>    n = rd(); L = rd(); R = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        a[i] = rd(); <br>        pre[i] = pre[i - <span class="hljs-number">1</span>] + a[i];<br>        mx[i][<span class="hljs-number">0</span>] = mn[i][<span class="hljs-number">0</span>] = pre[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = <span class="hljs-number">1</span>; t &lt;= lg[n]; ++t)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - (<span class="hljs-number">1</span> &lt;&lt; t) + <span class="hljs-number">1</span>; ++i) &#123;<br>            mx[i][t] = max(mx[i][t - <span class="hljs-number">1</span>], mx[i + (<span class="hljs-number">1</span> &lt;&lt; (t - <span class="hljs-number">1</span>))][t - <span class="hljs-number">1</span>]);<br>            mn[i][t] = min(mn[i][t - <span class="hljs-number">1</span>], mn[i + (<span class="hljs-number">1</span> &lt;&lt; (t - <span class="hljs-number">1</span>))][t - <span class="hljs-number">1</span>]);<br>        &#125;<br>    <span class="hljs-built_in">memset</span>(nxt, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(nxt));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        nxt[i][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = getnxt(i, L);<br>        nxt[i][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = getnxt(i, R);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = <span class="hljs-number">1</span>; t &lt;= lg[n]; ++t) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (nxt[i][t - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>].fr &lt;= n) nxt[i][t][<span class="hljs-number">0</span>] = nxt[nxt[i][t - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>].fr + <span class="hljs-number">1</span>][t - <span class="hljs-number">1</span>][nxt[i][t - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>].sc];  <br>            <span class="hljs-keyword">if</span> (nxt[i][t - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>].fr &lt;= n) nxt[i][t][<span class="hljs-number">1</span>] = nxt[nxt[i][t - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>].fr + <span class="hljs-number">1</span>][t - <span class="hljs-number">1</span>][nxt[i][t - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>].sc];<br>        &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> q = rd(); q; --q) &#123;<br>        <span class="hljs-keyword">int</span> l = rd(), r = rd(), w = rd();<br>        <span class="hljs-keyword">auto</span> [p, fl] = getnxt(l, w);<br>        <span class="hljs-keyword">if</span> (p &gt; r) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, w + pre[r] - pre[l - <span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = lg[n]; ~i; --i)<br>            <span class="hljs-keyword">if</span> (nxt[p][i][fl].fr &lt;= r) &#123;<br>                <span class="hljs-keyword">auto</span> [nxp, nxfl] = nxt[p][i][fl];<br>                p = nxp + <span class="hljs-number">1</span>; fl = nxfl;<br>            &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, (fl ? R : L) + pre[r] - pre[p - <span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="d---dazzling-stars">D - Dazzling Stars</h2><blockquote><p>给定二维平面上 <span class="math inline">\(n\ (1\le n\le10^3)\)</span> 个点的坐标 <span class="math inline">\((x_i,y_i)\)</span>和权值 <span class="math inline">\(w_i\)</span> 。</p><p>问是否能将所有点整体旋转一个角度，使得：若 <spanclass="math inline">\(w_A&gt;w_B\)</span> ，那么 <spanclass="math inline">\(y_A\ge y_B\)</span> 。</p></blockquote><p>对于每一对不等关系，确定合法的角度区间，角度区间<strong>判交</strong>。</p><p>把角度区间控制在 <span class="math inline">\([0,2\pi]\)</span>内，如果越过就拆成两段，然后扫描线，先 <spanclass="math inline">\(+\)</span> 后 <spanclass="math inline">\(-\)</span> ，判断是否有一个位置覆盖次数 <spanclass="math inline">\(=\)</span> 区间个数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr        first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc        second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp        make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb        push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii       pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(s)    (s).begin(), (s).end()</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span><br><br><span class="hljs-keyword">const</span> ld PI = <span class="hljs-number">3.1415926535897932384</span>;<br><span class="hljs-keyword">const</span> ld a90 = <span class="hljs-built_in">atan</span>(<span class="hljs-number">1</span>) * <span class="hljs-number">2</span>;<br><span class="hljs-keyword">const</span> ld a180 = a90 * <span class="hljs-number">2</span>, a270 = a90 * <span class="hljs-number">3</span>, a360 = a90 * <span class="hljs-number">4</span>;<br><span class="hljs-keyword">const</span> ld dlt[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">0</span>, a180, a360, a180&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1007</span><br><br><span class="hljs-keyword">int</span> w[N];<br><br>ld x[N], y[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ld <span class="hljs-title">angle</span><span class="hljs-params">(ld x, ld y)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(x) &lt; <span class="hljs-number">1e-15</span>) <span class="hljs-keyword">return</span> a90 * (<span class="hljs-number">1</span> + <span class="hljs-number">2</span> * (y &lt; <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">atan</span>(y / x) + dlt[y &lt; <span class="hljs-number">0</span>][x &lt; <span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span>, <span class="hljs-keyword">bool</span>&gt;&gt; s;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        x[i] = rd(); y[i] = rd(); w[i] = rd();<br>    &#125;<br>    <span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>, nw = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>            <span class="hljs-keyword">if</span> (w[i] &gt; w[j]) &#123;<br>                ++tot;<br>                ld alpha = angle(x[i] - x[j], y[i] - y[j]);<br>                ld l = -alpha, r = PI - alpha;<br>                <span class="hljs-keyword">while</span> (l &lt; <span class="hljs-number">0</span>) &#123;l += <span class="hljs-number">2</span> * PI; r += <span class="hljs-number">2</span> * PI;&#125;<br>                <span class="hljs-keyword">if</span> (r &gt;= <span class="hljs-number">2</span> * PI) r -= <span class="hljs-number">2</span> * PI;<br>                s.pb(mp(l, <span class="hljs-literal">false</span>)); s.pb(mp(r, <span class="hljs-literal">true</span>));<br>                <span class="hljs-keyword">if</span> (l &gt; r) ++nw;<br>            &#125;<br>    sort(all(s));<br>    <span class="hljs-keyword">if</span> (tot == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Y&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [p, w] : s) &#123;<br>        nw += (w ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (nw == tot) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Y&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;N&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="e---eggfruit-cake">E - Eggfruit Cake</h2><blockquote><p>给一个 <span class="math inline">\(01\)</span>环，问有多少个环上的的区间符合长度不超过 <spanclass="math inline">\(s\)</span> 并且至少有一个 <spanclass="math inline">\(1\)</span> 。</p></blockquote><p>枚举左端点，复制一遍预处理后面第一个 <spanclass="math inline">\(1\)</span> 的位置，答案就是 <spanclass="math inline">\(\sum s-dis(pos[i]-i)\)</span></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr        first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc        second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp        make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb        push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii       pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(s)    (s).begin(), (s).end()</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span><br><br><span class="hljs-built_in">string</span> s;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br><span class="hljs-keyword">bool</span> fl = <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">int</span> nxt[N &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; s; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : s) <br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-string">&#x27;E&#x27;</span>) &#123;fl = <span class="hljs-literal">true</span>; <span class="hljs-keyword">break</span>;&#125;<br>    <span class="hljs-keyword">if</span> (!fl) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-keyword">int</span> n = s.length();<br>    s = <span class="hljs-string">&quot; &quot;</span> + s + s;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = (n &lt;&lt; <span class="hljs-number">1</span>), lst = n; i; --i) &#123;<br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;E&#x27;</span>) lst = i;<br>        nxt[i] = lst;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mx; <span class="hljs-built_in">cin</span> &gt;&gt; mx;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        ans += max(<span class="hljs-number">0</span>, mx - (nxt[i] - i));<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="f---fabricating-sculptures">*F - Fabricating Sculptures</h2><blockquote><p>一些砖块堆起来，计数恰好用 <span class="math inline">\(B\)</span>块砖，最下面一层恰好 <span class="math inline">\(S\ (1\le S\le B\le10^3)\)</span> 块砖，并且不会积水的堆砌方案数。</p></blockquote><p>需要横着想，一层一层放，约束变成：最下面一层 <spanclass="math inline">\(S\)</span> 个，每一层不能比下一层多的方案数。</p><p>发现我们并不关心当前放了多少层，因此状态可以设计为 <spanclass="math inline">\(f[x][j]\)</span> 表示已经用了 <spanclass="math inline">\(x\)</span> 个，当前最上面一层放了 <spanclass="math inline">\(j\)</span> 个的方案数。</p><p>转移：<span class="math inline">\(f[x][j] = \sum_{k=j}^Sf[x -j][k]\times (k - j + 1) = \sum_{k=j}^S f[x-j][k]\times k -(j-1)\sum_{k=j}^S f[x-j][k]\)</span></p><p>维护 <span class="math inline">\(f[\ast][k]\times k\)</span>的后缀和、<span class="math inline">\(f[\ast][k]\)</span>的后缀和即可实现 <span class="math inline">\(\mathcal{O}(1)\)</span>转移。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr        first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc        second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp        make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb        push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii       pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(s)    (s).begin(), (s).end()</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N   5007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 1000000007</span><br><br><span class="hljs-keyword">int</span> f[N][N], sum[N][N], sumk[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> m = rd(), n = rd();<br>    f[m][m] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m; j; --j) &#123;<br>        sum[m][j] = (sum[m][j + <span class="hljs-number">1</span>] + f[m][j]) % mod;<br>        sumk[m][j] = (sumk[m][j + <span class="hljs-number">1</span>] + <span class="hljs-number">1l</span>l * j * f[m][j]) % mod;    <br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> use = m + <span class="hljs-number">1</span>; use &lt;= n; ++use) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = min(m, use); j; --j) &#123;<br>            f[use][j] = (sumk[use - j][j] + <span class="hljs-number">1l</span>l * sum[use - j][j] * (<span class="hljs-number">1</span> - j + mod)) % mod;<br>            sum[use][j] = (sum[use][j + <span class="hljs-number">1</span>] + f[use][j]) % mod;<br>            sumk[use][j] = (sumk[use][j + <span class="hljs-number">1</span>] + <span class="hljs-number">1l</span>l * j * f[use][j]) % mod;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, sum[n][<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="g---gluing-pictures">G - Gluing Pictures</h2><blockquote><p>给定一个模版串，多次询问，把一个串最少拆成多少个模版串的子串拼接起来。</p></blockquote><p>容易发现贪心拿更长的子串是正确的，所以直接在 SAM上匹配就好了，失败就回到根，答案就是匹配次数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">200000</span>,maxt=maxn&lt;&lt;<span class="hljs-number">1</span>,maxi=<span class="hljs-number">26</span>;<br><br><span class="hljs-keyword">int</span> n,te;<span class="hljs-keyword">char</span> s[maxn+<span class="hljs-number">5</span>],t[maxn+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">int</span> pl,ro,son[maxt+<span class="hljs-number">5</span>][maxi],fai[maxt+<span class="hljs-number">5</span>],MAX[maxt+<span class="hljs-number">5</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">newnode</span><span class="hljs-params">()</span> </span>&#123;pl++;<span class="hljs-keyword">return</span> pl;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Extend</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> c)</span></span>&#123;<br><span class="hljs-keyword">int</span> np=newnode();MAX[np]=MAX[p]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (p &amp;&amp; !son[p][c]) son[p][c]=np,p=fai[p];<br><span class="hljs-keyword">if</span> (!p) &#123;fai[np]=ro;<span class="hljs-keyword">return</span> np;&#125;<br><span class="hljs-keyword">int</span> q=son[p][c];<span class="hljs-keyword">if</span> (MAX[p]+<span class="hljs-number">1</span>==MAX[q]) &#123;fai[np]=q;<span class="hljs-keyword">return</span> np;&#125;<br><span class="hljs-keyword">int</span> nq=newnode();MAX[nq]=MAX[p]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;maxi;i++) son[nq][i]=son[q][i];<br>fai[nq]=fai[q];fai[q]=fai[np]=nq;<br><span class="hljs-keyword">while</span> (p &amp;&amp; son[p][c]==q) son[p][c]=nq,p=fai[p];<br><span class="hljs-keyword">return</span> np;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s+<span class="hljs-number">1</span>);ro=newnode();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>,p=ro;s[i];i++) p=Extend(p,s[i]-<span class="hljs-string">&#x27;A&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;te);te;te--)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,t+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>,p=ro;t[i];i++)&#123;<br>p=son[p][t[i]-<span class="hljs-string">&#x27;A&#x27;</span>];<br><span class="hljs-keyword">if</span> (!p)&#123;<br>p=son[ro][t[i]-<span class="hljs-string">&#x27;A&#x27;</span>];ans++;<br><span class="hljs-keyword">if</span> (!p) &#123;ans=<span class="hljs-number">-2</span>;<span class="hljs-keyword">break</span>;&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="i---improve-spam">I - Improve SPAM</h2><p>注意题目保证是个DAG，BFS去掉无用点，统计出正确点度，然后拓扑排序路径计数即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr        first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc        second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp        make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb        push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii       pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(s)    (s).begin(), (s).end()</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N   2007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 1000000007</span><br><br><span class="hljs-keyword">int</span> deg[N], f[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = rd(); k; --k) e[i].pb(rd());<br>    q.push(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">while</span> (!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) &#123;<br>            <span class="hljs-keyword">if</span> (!deg[v]) q.push(v);<br>            ++deg[v];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = m + <span class="hljs-number">1</span>; i &lt;= n; ++i) ans2 += (deg[i] &gt; <span class="hljs-number">0</span>);<br>    q.push(<span class="hljs-number">1</span>); f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) &#123;<br>            f[v] = (f[v] + f[u]) % mod;<br>            --deg[v]; <span class="hljs-keyword">if</span> (!deg[v]) q.push(v);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = m + <span class="hljs-number">1</span>; i &lt;= n; ++i) ans1 = (ans1 + f[i]) % mod;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, ans1, ans2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="j---jumping-grasshopper">**J - Jumping Grasshopper</h2><blockquote><p>给定长度为 <span class="math inline">\(n\)</span>的数列，规定一个起点和方向（左/右），每次会跳到该方向的第一个比当前高的位置，然后转向。</p><p>保证初始数列两两不同，支持 <span class="math inline">\(m\)</span> 次：1. 把某个数改大（依旧两两不同）；2.给定起始位置和方向，问最后停在的位置。</p><p>数据范围 ：<span class="math inline">\(1\le n,m\le 2\times 10^5,1\leh_i\le 10^9\)</span></p></blockquote><p>如果两侧都存在比当前位置大的，跳跃不会停止，最终<strong>会先跳到左右最大值较小的那个，然后再往对面跳一步</strong>。</p><p>注意不是跳到最大的，因为最大值较小的一侧回头之后第一个比他大的，有可能不是那一侧最大的。</p><p>所以线段树维护区间 <span class="math inline">\(\max\)</span> +线段树上二分找上一个/下一个比给定值大的位置，复杂度 <spanclass="math inline">\(\mathcal{O}(n\log n)\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr        first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc        second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp        make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb        push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii       pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(s)    (s).begin(), (s).end()</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N  200007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ls (rt &lt;&lt; 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rs (rt &lt;&lt; 1 | 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span><br><br><span class="hljs-keyword">int</span> n, m, h[N], mx[N &lt;&lt; <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span> </span>&#123;<br>    mx[rt] = mx[ls] &gt; mx[rs] ? mx[ls] : mx[rs];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;mx[rt] = h[l]; <span class="hljs-keyword">return</span>;&#125;<br>    build(ls, l, mid); build(rs, mid + <span class="hljs-number">1</span>, r);<br>    pushup(rt);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;mx[rt] = x; <span class="hljs-keyword">return</span>;&#125;<br>    p &lt;= mid ? upd(ls, l, mid, p, x) : upd(rs, mid + <span class="hljs-number">1</span>, r, p, x);<br>    pushup(rt);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">qmax</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class="hljs-keyword">return</span> mx[rt];<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (L &lt;= mid) ans = max(ans, qmax(ls, l, mid, L, R));<br>    <span class="hljs-keyword">if</span> (R &gt; mid) ans = max(ans, qmax(rs, mid + <span class="hljs-number">1</span>, r, L, R));<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">nxtr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> w)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> l;<br>    <span class="hljs-keyword">if</span> (L &lt;= mid &amp;&amp; mx[ls] &gt; w) &#123;<br>        <span class="hljs-keyword">int</span> res = nxtr(ls, l, mid, L, w);<br>        <span class="hljs-keyword">if</span> (res &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (mx[rs] &lt;= w) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> nxtr(rs, mid + <span class="hljs-number">1</span>, r, L, w);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">nxtl</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> w)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> l;<br>    <span class="hljs-keyword">if</span> (L &gt; mid &amp;&amp; mx[rs] &gt; w) &#123;<br>        <span class="hljs-keyword">int</span> res = nxtl(rs, mid + <span class="hljs-number">1</span>, r, L, w);<br>        <span class="hljs-keyword">if</span> (res &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (mx[ls] &lt;= w) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> nxtl(ls, l, mid, L, w);<br>&#125;<br><br><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pos;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd(), mxpos = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        h[i] = rd(); pos[h[i]] = i;<br>    &#125;<br>    build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-keyword">char</span> c = getchar();<br>        <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isalpha</span>(c)) c = getchar();<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;U&#x27;</span>) &#123;<br>            <span class="hljs-keyword">int</span> p = rd(); <br>            pos[h[p] = rd()] = p;<br>            upd(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, p, h[p]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> p = rd();<br>            <span class="hljs-keyword">int</span> lmx = qmax(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>, p);<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;L&#x27;</span> &amp;&amp; lmx == h[p]) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, p); <span class="hljs-keyword">continue</span>;&#125;<br>            <span class="hljs-keyword">int</span> rmx = qmax(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, p, n);<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;R&#x27;</span> &amp;&amp; rmx == h[p]) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, p); <span class="hljs-keyword">continue</span>;&#125;<br>            <span class="hljs-keyword">if</span> (lmx &lt; rmx) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, nxtr(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, pos[lmx], lmx));<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, nxtl(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, pos[rmx], rmx));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="k---know-your-aliens">K - Know your Aliens</h2><blockquote><p>构造多项式 <span class="math inline">\(P\)</span> ，对于 <spanclass="math inline">\(i=2,4,\dots,2n\)</span> ，符合给定的条件 <spanclass="math inline">\(P(i)&gt;0\)</span> 或 <spanclass="math inline">\(P(i)&lt;0\)</span> 。</p></blockquote><p>对于相邻的符号变化的位置，中位数一定是个奇数（并且是整数），可以假定他是多项式的根。</p><p>因此就是求 <span class="math inline">\(\prod (x-w_i)\)</span>的各系数，然后根据第一个的正负调整一下符号即可。</p><p>有一个 <span class="math inline">\(O(n^2)\)</span>的递推方法求系数（直接多项式乘法复杂度也对）：</p><p>设 <span class="math inline">\(f[i][j]\)</span> 表示前 <spanclass="math inline">\(i\)</span> 个系数里所有的选 <spanclass="math inline">\(j\)</span> 个的方案对应的乘积和，转移 <spanclass="math inline">\(f[i][j] = f[i - 1][j] + f[i - 1][j - 1] *w_i\)</span> 。</p><p>（不过这个题题面里说保证存在系数不超过 <spanclass="math inline">\(2^{63}\)</span>的多项式符合要求，理解起来有点奇怪）</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr        first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc        second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp        make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb        push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii       pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(s)    (s).begin(), (s).end()</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 10007</span><br><br><span class="hljs-keyword">char</span> s[N];<br><br>ll cnt, f[N][N], w[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) <br>        <span class="hljs-keyword">if</span> (s[i] != s[i + <span class="hljs-number">1</span>]) w[++cnt] = - <span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>;<br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; ++i) &#123;<br>        f[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; ++j)<br>            f[i][j] = f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] * w[i] + f[i - <span class="hljs-number">1</span>][j];<br>    &#125;<br>    <span class="hljs-keyword">int</span> fl = ((f[cnt][cnt] &gt; <span class="hljs-number">0</span>) == (s[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;H&#x27;</span>) ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, cnt);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= cnt; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, fl * f[cnt][i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="l---leverage-mdt">L - Leverage MDT</h2><blockquote><p>给一个 <span class="math inline">\(01\)</span>矩阵，对于每行你都可以选择全部 <span class="math inline">\(01\)</span>翻转/不翻转，然后求最大子正方形。</p></blockquote><p>按列去看，枚举答案的右边界，对于每行约束就变成了向左找和当前位置相同的最长长度。</p><p>然后做一个单调栈就可以了，因为是正方形，更新答案使用当前的高度和宽度的较小值。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr        first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc        second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp        make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb        push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii       pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(s)    (s).begin(), (s).end()</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1007</span><br><br><span class="hljs-keyword">bool</span> a[N][N];<br><br><span class="hljs-keyword">int</span> f[N][N];<br><br><span class="hljs-built_in">stack</span>&lt;pii&gt; s;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) &#123;<br>            <span class="hljs-keyword">char</span> c = getchar();<br>            <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isalpha</span>(c)) c = getchar();<br>            a[i][j] = (c == <span class="hljs-string">&#x27;G&#x27;</span>);<br>            f[i][j] = (a[i][j] == a[i][j - <span class="hljs-number">1</span>] ? f[i][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span> : <span class="hljs-number">1</span>);<br>        &#125;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>            <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (!s.empty() &amp;&amp; f[s.top().fr][j] &gt;= f[i][j]) &#123;<br>                len += s.top().sc;<br>                ans = max(ans, min(f[s.top().fr][j], len));<br>                s.pop();<br>            &#125;<br>            s.push(mp(i, len + <span class="hljs-number">1</span>));<br>        &#125;<br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!s.empty()) &#123;<br>            len += s.top().sc;<br>            ans = max(ans, min(f[s.top().fr][j], len));<br>            s.pop();<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans * ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="m---mountain-ranges">M - Mountain Ranges</h2><p>给定数列，求最长的区间，区间内相邻的两个数差值不超过 <spanclass="math inline">\(x\)</span> 。直接扫一遍。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr        first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc        second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp        make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb        push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii       pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(s)    (s).begin(), (s).end()</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1007</span><br><br><span class="hljs-keyword">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), k = rd(), ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i] = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n, cnt = <span class="hljs-number">0</span>; i; --i) &#123;<br>        <span class="hljs-keyword">if</span> (a[i + <span class="hljs-number">1</span>] - a[i] &gt; k) cnt = <span class="hljs-number">0</span>;<br>        ++cnt; ans = max(ans, cnt);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Official Contests</category>
      
      <category>ICPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Graphs</tag>
      
      <tag>Binary Search</tag>
      
      <tag>Binary Lifting</tag>
      
      <tag>Segment Tree</tag>
      
      <tag>Sparse Table</tag>
      
      <tag>Stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prefix Function and Z Function</title>
    <link href="/algorithms/z-function/"/>
    <url>/algorithms/z-function/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="z-function">Z Function</h2><p><a href="https://cp-algorithms.com/string/z-function.html">Z-function- Algorithms for Competitive Programming</a></p><h3 id="analysis">Analysis</h3><p>对于一个字符串 <span class="math inline">\(S\)</span>（下标从 <spanclass="math inline">\(1\)</span> 开始），定义 <spanclass="math inline">\(z[i]\)</span> 表示 <spanclass="math inline">\(S\)</span> 中从 <spanclass="math inline">\(i\)</span> 开始的后缀与 <spanclass="math inline">\(S\)</span> 的最长公共前缀（LCP）的长度。</p><p>直接求 <span class="math inline">\(z\)</span> 数组是 <spanclass="math inline">\(\mathcal{O}(n^2)\)</span>的，但是如果利用到以往的信息，就可以将暴力优化到 <spanclass="math inline">\(\mathcal{O}(n)\)</span> 。</p><div class="note note-success">            <p><strong>Efficient Algorithm</strong></p><p>按照 <span class="math inline">\(i=1,2,\dots,|s|\)</span>的顺序依次求 <span class="math inline">\(z\)</span>数组，<strong>同时维护当前匹配到最靠右的位置 <spanclass="math inline">\(mxpos=\arg \max \{i + z[i] - 1\}\)</span></strong></p><p>记 <span class="math inline">\((mxpos,mxpos + z[mxpos] - 1)\)</span>为 <span class="math inline">\((L,R)\)</span>，代表当前与前缀匹配的最靠右的区间。</p><p>那么对于一个新扫描的位置 <span class="math inline">\(i\)</span>，讨论：</p><ol type="1"><li><p>若 <span class="math inline">\(i&gt;R\)</span>，那么曾经的信息都用不上了，暴力从 <spanclass="math inline">\(i\)</span> 开始向后尝试匹配。</p></li><li><p>如果 <span class="math inline">\(i&lt;R\)</span>，我们尝试利用曾经计算过的信息：</p><p>首先可以肯定 <spanclass="math inline">\(S[i,R]=S[i-l+1,r-l+1]\)</span> ,尝试利用所以可以继承 <span class="math inline">\(z[i-l+1]\)</span>的一部分。</p><p>但如果对应位置超过 <span class="math inline">\(R\)</span>就不能确定是否可以利用了，所以令 <spanclass="math inline">\(z[i]=\min(z[i-l+1],r - i + 1)\)</span>，然后再暴力向后匹配。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (i &lt;= r) z[i] = min(z[i - l + <span class="hljs-number">1</span>], r - i + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">while</span> (i + z[i] &lt;= n &amp;&amp; t[z[i] + <span class="hljs-number">1</span>] == t[i + z[i]]) ++z[i];<br>    <span class="hljs-keyword">if</span> (i + z[i] - <span class="hljs-number">1</span> &gt; r) &#123;l = i; r = i + z[i] - <span class="hljs-number">1</span>;&#125;  <br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>Proof of Time Complexity</strong></p><p>首先算法正确性显然，空间复杂度显然是 <spanclass="math inline">\(\mathcal{O}(n)\)</span> ，就不多做分析了。</p><p>证明思路：观察到两种情况下每次有效的暴力比较都会拓展右边界 <spanclass="math inline">\(R\)</span> ，而右边界只会变化 <spanclass="math inline">\(n\)</span> 次，故线性复杂度。</p>          </div><h3 id="arc-058-f---iroha-loves-strings">ARC 058 F - Iroha LovesStrings</h3><blockquote><p>给定 <span class="math inline">\(n\)</span> 个串的序列 <spanclass="math inline">\(s_1,s_2,\dots,s_n\)</span>，选择其中一些串，按照原序列顺序连接起来，使得得到的串长为 <spanclass="math inline">\(k\)</span> 且字典序最小。</p><p>数据范围：<span class="math inline">\(1\le n\le 2\times 10^3,1\le|s_i|\le k\le 10^4\)</span></p></blockquote><p>按顺序拿，先解决可不可以拿，倒序做一个 <spanclass="math inline">\(O(nk)\)</span> 的 01 背包预处理<code>valid[i][j]</code> 表示 <span class="math inline">\(i\)</span>及之后的串是否能组合出长度 <span class="math inline">\(j\)</span> 。</p><p>接下来先考虑暴力：设 <code>f[i][j]</code> 表示前 <spanclass="math inline">\(i\)</span> 个串，凑出长度为 <spanclass="math inline">\(j\)</span>的最小字典序字符串，转移为字符串比较复杂度，总 <spanclass="math inline">\(\mathcal{O}(nk^2)\)</span> 。</p><p>考虑优化，对于相同长度，最优解显然只有一个（转移时只从<code>f[i-1][x]</code> 转移，已经使用）；</p><p>对于不同长度两个状态，假设较短的为 <spanclass="math inline">\(a\)</span> ，较长的为 <spanclass="math inline">\(b\)</span> ，若 <spanclass="math inline">\(b\)</span> 长度为 <spanclass="math inline">\(|a|\)</span> 的前缀和 <spanclass="math inline">\(a\)</span> 不同，则 <spanclass="math inline">\(a,b\)</span> 一定有一个没用。</p><p>因此当前所有最优解中，短的串必然是长的串的前缀，所有串都可以用最长的最优解<span class="math inline">\(S\)</span> 的前缀来表示。</p><p>现在考虑 dp实际在做什么：将以往的某个最优解接上当前串，来替换以往的其他最优解。</p><p>即对于以往的两个最优解 <span class="math inline">\(a,b\)</span> 满足<span class="math inline">\(|a|+|s_i|=|b|\)</span> ，如果 <spanclass="math inline">\(s_i\)</span> 比 <spanclass="math inline">\(S\)</span> 中 <spanclass="math inline">\(|a|+1\)</span> 开始的后缀字典序要小，那么长度<span class="math inline">\(\ge |a|\)</span>的以往的最优解都没用了，因此我们可以枚举最靠前的这个位置进行插入（并删除以往多余的后缀）。</p><p>可以发现比较的永远是 <span class="math inline">\(S\)</span>的一个后缀和 <span class="math inline">\(s_i\)</span>的字典序，因此可以用 <span class="math inline">\(s_i+\#+S\)</span> 跑 Z函数确定 LCP 后讨论。</p><p>这样复杂度就是 <span class="math inline">\(\mathcal{O}(nk)\)</span>的了。实在是太细节了绷不住了。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 2007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> K 10007</span><br><br><span class="hljs-keyword">char</span> s[N][K], S[K], tmp[K &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-keyword">bool</span> valid[N][K], pos[K];<br><br><span class="hljs-keyword">int</span> len[N], z[K &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">zfunc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(z, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(z));     <br>    <span class="hljs-built_in">memset</span>(tmp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(tmp));<br>    <span class="hljs-built_in">strcpy</span>(tmp + <span class="hljs-number">1</span>, s[p] + <span class="hljs-number">1</span>); <br>    tmp[len[p] + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;z&#x27;</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">strcpy</span>(tmp + len[p] + <span class="hljs-number">2</span>, S + <span class="hljs-number">1</span>); <br>    tmp[<span class="hljs-built_in">strlen</span>(tmp + <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;z&#x27;</span> + <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>, lim = <span class="hljs-built_in">strlen</span>(tmp + <span class="hljs-number">1</span>); i &lt;= lim; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (i &lt;= r) z[i] = min(z[i - l + <span class="hljs-number">1</span>], r - i + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">while</span> (i + z[i] &lt;= lim &amp;&amp; tmp[z[i] + <span class="hljs-number">1</span>] == tmp[i + z[i]]) ++z[i];<br>        <span class="hljs-keyword">if</span> (i + z[i] - <span class="hljs-number">1</span> &gt; r) &#123;l = i; r = i + z[i] - <span class="hljs-number">1</span>;&#125; <br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n, k;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s[i] + <span class="hljs-number">1</span>);<br>        len[i] = <span class="hljs-built_in">strlen</span>(s[i] + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + <span class="hljs-number">1</span>; ++i) valid[i][<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i; --i) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = k; j; --j) &#123;<br>            valid[i][j] |= valid[i + <span class="hljs-number">1</span>][j];<br>            <span class="hljs-keyword">if</span> (j &gt;= len[i]) valid[i][j] |= valid[i + <span class="hljs-number">1</span>][j - len[i]];<br>        &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        zfunc(i);<br>        <span class="hljs-keyword">int</span> len_S = <span class="hljs-built_in">strlen</span>(S + <span class="hljs-number">1</span>);<br>        pos[len_S + <span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>, lim = min(k + <span class="hljs-number">1</span> - len[i], len_S + <span class="hljs-number">1</span>); j &lt;= lim; ++j) <br>            <span class="hljs-keyword">if</span> (valid[i + <span class="hljs-number">1</span>][k - (j + len[i] - <span class="hljs-number">1</span>)] &amp;&amp; pos[j]) &#123; <span class="hljs-comment">// update to S[j,j + len[i] - 1]</span><br>                <span class="hljs-keyword">int</span> match = z[j + len[i] + <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span> (match == len[i]) pos[j + len[i]] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j + match - <span class="hljs-number">1</span> == len_S) &#123;<br>                    <span class="hljs-built_in">strcpy</span>(S + j, s[i] + <span class="hljs-number">1</span>); <br>                    pos[len_S + <span class="hljs-number">1</span>] = pos[j + len[i]] = <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (match &lt; len[i] &amp;&amp; tmp[match + <span class="hljs-number">1</span>] &lt; tmp[j + len[i] + <span class="hljs-number">1</span> + match]) &#123;<br>                    <span class="hljs-built_in">strcpy</span>(S + j, s[i] + <span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> p = j + match + <span class="hljs-number">1</span>; p &lt;= k; ++p) pos[p] = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <br>            &#125;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(S + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Summary</category>
      
      <category>Algorithms</category>
      
    </categories>
    
    
    <tags>
      
      <tag>String</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dilworth&#39;s Theorem</title>
    <link href="/algorithms/dilworth/"/>
    <url>/algorithms/dilworth/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="definition">Definition</h2><p><strong>Partial order relation</strong> : a homogeneous relation thatis transitive and antisymmetric.</p><p><strong>Non-strict (reflexive / weak) partial order</strong> <spanclass="math inline">\(\le\)</span> : Reflexivity, Antisymmetry,Transitivit.</p><p><strong>Strict (irreflexive / strong) partial order</strong> <spanclass="math inline">\(&lt;\)</span> : Irreflexivity, Antisymmetry,Transitivit.</p><p><strong>Converse relation (Transpose)</strong> : the relation thatoccurs when the order of the elements is switched.</p><ul><li>the converse relation of <span class="math inline">\(\le\)</span> is<span class="math inline">\(\ge\)</span> , and the converse relation of<span class="math inline">\(&lt;\)</span> is <spanclass="math inline">\(&gt;\)</span> 。</li></ul><p>For a partial ordered set <span class="math inline">\((A, R)\)</span>：</p><ul><li><strong>Chain</strong> <span class="math inline">\(A&#39;\subseteqA\)</span> : a totally <strong>ordered set</strong>, i.e. <spanclass="math inline">\(\forall x,y\in A&#39; (x\ne y), xRy\)</span> or<span class="math inline">\(yRx\)</span> holds.</li><li><strong>Antichain</strong> <spanclass="math inline">\(A&#39;\subseteq A\)</span> : a totally<strong>unordered set</strong>, i.e. <span class="math inline">\(\forallx,y\in A&#39; (x\ne y),\)</span> neither <spanclass="math inline">\(xRy\)</span> nor <spanclass="math inline">\(yRx\)</span> holds (incomparable).</li><li><strong>Chain Decomposition (Cover)</strong> : a partition of theelements of the order into disjoint chains.</li></ul><h2 id="theorem-and-proof">Theorem and Proof</h2><div class="note note-success">            <p><strong>Dilworth's Theorem</strong></p><p>In any finite partially ordered set, the <strong>largest antichain</strong> has the same size as the <strong>smallest chaindecomposition</strong>.</p><p>The <strong>width</strong> of the partial order is defined as thecommon size of the antichain and chain decomposition.</p><p><strong>Dual (Mirsky's theorem)</strong></p><p>In any finite partially ordered set, the <strong>largest chain</strong> has the same size as the <strong>smallest antichain </strong><strong>decomposition</strong>.</p><p>The <strong>depth</strong> of the partial order is defined as thecommon size of the chain and antichain decomposition.</p>          </div><p>The following proof by <strong>induction on the size</strong> of thepartially ordered set <span class="math inline">\((P,\le)\)</span>.</p><p>Let <span class="math inline">\(P\)</span> be a finite partiallyordered set. The theorem holds trivially if <spanclass="math inline">\(P\)</span> is empty. So, assume that <spanclass="math inline">\(P\)</span> has at least one element, and let <spanclass="math inline">\(a\)</span> be a maximal element of <spanclass="math inline">\(P\)</span>.</p><p>By induction, we assume that for some integer <spanclass="math inline">\(k\)</span> the partially ordered set <spanclass="math inline">\(P^{\prime}:=P \backslash\{a\}\)</span> can becovered by <span class="math inline">\(k\)</span> disjoint chains <spanclass="math inline">\(C_1, \ldots, C_k\)</span> and has at least oneantichain <span class="math inline">\(A_0\)</span> of size <spanclass="math inline">\(k\)</span>. Clearly, (since <spanclass="math inline">\(A_0\)</span> is an antichain) , <spanclass="math inline">\(A_0 \cap C_i \neq \emptyset\)</span> for <spanclass="math inline">\(i=1,2, \ldots, k\)</span>.</p><p>For <span class="math inline">\(i=1,2, \ldots, k\)</span>, let <spanclass="math inline">\(x_i\)</span> be the maximal element in <spanclass="math inline">\(C_i\)</span> that belongs to an antichain of size<span class="math inline">\(k\)</span> in <spanclass="math inline">\(P^{\prime}\)</span> , and set <spanclass="math inline">\(A:=\left\{x_1, x_2, \ldots, x_k\right\}\)</span>.</p><ul><li>We claim that <span class="math inline">\(A\)</span> is anantichain. Let <span class="math inline">\(A_i\)</span> be an antichainof size <span class="math inline">\(k\)</span> that contains <spanclass="math inline">\(x_i\)</span> . Fix arbitrary distinct indices<span class="math inline">\(i\)</span> and <spanclass="math inline">\(j\)</span> . Then <span class="math inline">\(A_i\cap C_j \neq \emptyset\)</span> . Let <span class="math inline">\(y \inA_i \cap C_j\)</span> . Then <span class="math inline">\(y \leqx_j\)</span> , by the definition of <spanclass="math inline">\(x_j\)</span> . This implies that <spanclass="math inline">\(x_i \ne x_j\)</span> , since <spanclass="math inline">\(x_i \ne y\)</span> . By interchanging the roles of<span class="math inline">\(i\)</span> and <spanclass="math inline">\(j\)</span> in this argument we also have <spanclass="math inline">\(x_j \ne x_i\)</span>. This verifies that <spanclass="math inline">\(A\)</span> is an antichain.</li></ul><p>We now return to <span class="math inline">\(P\)</span>. Supposefirst that <span class="math inline">\(a \geq x_i\)</span> for some<span class="math inline">\(i \in\{1,2, \ldots, k\}\)</span>. Let <spanclass="math inline">\(K\)</span> be the chain <spanclass="math inline">\(\{a\} \cup\left\{z \in C_i: z \leqx_i\right\}\)</span> . Then by the choice of <spanclass="math inline">\(x_i\)</span> , <span class="math inline">\(P\backslash K\)</span> does not have an antichain of size <spanclass="math inline">\(k\)</span> . Induction then implies that <spanclass="math inline">\(P \backslash K\)</span> can be covered by <spanclass="math inline">\(k-1\)</span> disjoint chains since <spanclass="math inline">\(A \backslash\left\{x_i\right\}\)</span> is anantichain of size <span class="math inline">\(k-1\)</span> in <spanclass="math inline">\(P \backslash K\)</span> . Thus, <spanclass="math inline">\(P\)</span> can be covered by <spanclass="math inline">\(k\)</span> disjoint chains, as required.</p><p>Next, if <span class="math inline">\(a \not\ge x_i\)</span> for each<span class="math inline">\(i \in\{1,2, \ldots, k\}\)</span>, then <spanclass="math inline">\(A \cup\{a\}\)</span> is an antichain of size <spanclass="math inline">\(k+1\)</span> in <spanclass="math inline">\(P\)</span> (since <spanclass="math inline">\(a\)</span> is maximal in <spanclass="math inline">\(P\)</span> ).</p><p>Now <span class="math inline">\(P\)</span> can be covered by the<span class="math inline">\(k+1\)</span> chains <spanclass="math inline">\(\{a\}, C_1, C_2, \ldots, C_k\)</span>, completingthe proof.</p><h2 id="application">Application</h2><ol type="1"><li>找二元关系并检验；2. 运用定理（及对偶定理）转化。</li></ol><h3 id="noip-1999---导弹拦截">NOIP 1999 - 导弹拦截</h3><blockquote><p>给一个数列 <span class="math inline">\(a_1,a_2,\cdots,a_n\)</span>，问最少划分为多少个严格不增子序列。</p></blockquote><p>可以接到一个序列的关系为： <spanclass="math inline">\(iRj=i&lt;j\)</span> 且 <spanclass="math inline">\(a_i\ge a_j\)</span>，容易验证该二元关系是严格偏序。</p><p>那么反链的要求即 ( <span class="math inline">\(i&lt;j\)</span> 且<span class="math inline">\(a_i&lt;a_j\)</span> ) 或 ( <spanclass="math inline">\(i&gt;j\)</span> 且 <spanclass="math inline">\(a_i&gt; a_j\)</span> )，即严格上升子序列，所以答案为最长上升子序列长度。</p><p>推论：一个数列总是存在下面二者之一：一个长度为 <spanclass="math inline">\(\sqrt n\)</span> 的上升子序列或一个长度为 <spanclass="math inline">\(\sqrt n\)</span> 的下降子序列。</p><p>因此可以构造，每 <span class="math inline">\(\sqrt n\)</span>个一组，内部下降，整体上升，使得其 LIS 和 LDS 的 <spanclass="math inline">\(\max\)</span> 最小。</p><h3 id="tjoi-2015---组合数学">TJOI 2015 - 组合数学</h3><blockquote><p>给定一个网格图，每次从左上角出发，只能往右或往下走，最后到达右下角，每个格子有最低经过次数，问最少走几次？</p></blockquote><p>二元关系为向右向下走的可达性，且自己不可以到自己，是严格偏序。</p><p>求最小链覆盖，由 Dilworth定理，等价于求最长反链，也就是两两都是严格的左下与右上的关系。</p><p>因此从左下角到右上角做最长反链的 dp 即可。设 <spanclass="math inline">\(f[i][j]\)</span> 表示从左下角开始到 <spanclass="math inline">\((i, j)\)</span> 的最长反链。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1007</span><br><br><span class="hljs-keyword">int</span> a[N][N];<br><br>ll f[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) &#123;f[i][j] = <span class="hljs-number">0</span>; a[i][j] = rd();&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i; --i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) <br>            f[i][j] = max(&#123;f[i + <span class="hljs-number">1</span>][j], f[i][j - <span class="hljs-number">1</span>], f[i + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + a[i][j]&#125;);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, f[<span class="hljs-number">1</span>][m]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;  <br></code></pre></div></td></tr></table></figure><h3 id="gym-102565---artifact">Gym 102565 - Artifact</h3><blockquote><p>给一张有向图 <span class="math inline">\((|V|\le 3000, |E|\le20000)\)</span> ，问最多选出多少个点两两不可达。</p></blockquote><p>可达关系 <span class="math inline">\(iRj=\)</span> 可以从 <spanclass="math inline">\(i\)</span> 走到 <spanclass="math inline">\(j\)</span> ，发现并不满足反自反性，但 SCC缩点之后是一个DAG <spanclass="math inline">\((V&#39;,E&#39;)\)</span>，满足要求。</p><p>因此求最多的点数满足两两不可达，即两两不具有 <spanclass="math inline">\(R\)</span> 关系，因此所求即为 <spanclass="math inline">\((V&#39;,R)\)</span> 的最长反链。</p><p>由 Dilworth 定理求<strong>偏序关系</strong> <spanclass="math inline">\(R\)</span> 的最小链覆盖 (注意是<strong>原图的最小可重链覆盖</strong>)，我们有一种通用的做法：</p><ul><li><p><strong>对于偏序关系 <span class="math inline">\(R\)</span>，用图结构表示一定是 DAG，且由传递性任意可达的两点之间距离一定为 <spanclass="math inline">\(1\)</span> ；</strong></p><p>因此对于本题中的原图，需用传递闭包求出 <spanclass="math inline">\(R\)</span> ，得到偏序关系的图表示；</p></li><li><p>此时相当于求新图的最小不可重路径覆盖，即选最少的不重路径使得每个顶点恰好在一条路径中；</p></li><li><p>将每个点拆成入点和出点建立二分图，对于关系中存在的 <spanclass="math inline">\(xRy\ (x\ne y)\)</span> 连边：<spanclass="math inline">\((x_{出},y_{入})\)</span> 。</p></li><li><p>求最大匹配，证明优化目标的一致性：假设开始的时候每个点单独成链，一次匹配相当于将两个链连接起来。</p></li><li><p>所以结论为最小链覆盖 = 原图顶点数 <spanclass="math inline">\(-\)</span> 构造的二分图最大匹配。</p></li></ul><p>此题直接 floyd 传递闭包太慢，DAG 传递闭包可以用拓扑排序更新，再用<code>bitset</code> 加速复杂度为 <spanclass="math inline">\(O(\frac{nm}{\omega})\)</span> 。</p><p>匹配加速可以考虑使用 Hopcroft-Karp 或 Dinic，总复杂度为 <spanclass="math inline">\(O(m(\frac{n}{\omega}+\sqrt n))\)</span> 。<ahref="/2022/10/17/Official/ICPC/19-Latin-American/#a---algorithm-teaching">一道类似的题</a>。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmin</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> (a &gt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmax</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> (a &lt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>);&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr            first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc            second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb            push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp            make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mt            make_tuple</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii           pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> tiii          tuple<span class="hljs-meta-string">&lt;long, long, long&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(s)        (s).begin(), (s).end()</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x)     ((x) &amp; -(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y)  for (int (i) = (x); (i) &lt;= (y); ++(i))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, x, y)  for (int (i) = (x); (i) &gt;= (y); --(i))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 3007</span><br><br><span class="hljs-keyword">namespace</span> SCC &#123;<br><br>    <span class="hljs-keyword">bool</span> vis[N];<br><br>    <span class="hljs-keyword">int</span> scc, bl[N];<br><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N], re[N], nodes[N], order;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;e[u].push_back(v); re[v].push_back(u);&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>        vis[u] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) <span class="hljs-keyword">if</span> (!vis[v]) dfs1(v);<br>        order.push_back(u);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>        nodes[bl[u] = scc].push_back(u);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : re[u]) <span class="hljs-keyword">if</span> (!bl[v]) dfs2(v);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kosaraju</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u) <span class="hljs-keyword">if</span> (!vis[u]) dfs1(u);<br>        reverse(order.begin(), order.end());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : order) <span class="hljs-keyword">if</span> (!bl[u]) &#123;++scc; dfs2(u);&#125;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> indeg[N], outdeg[N];<br><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; source, sink;<br><br>    <span class="hljs-built_in">unordered_map</span>&lt;ll, <span class="hljs-keyword">bool</span>&gt; valid;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">has_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>        ll w = <span class="hljs-number">1000000000l</span>l * u + v;<br>        <span class="hljs-keyword">return</span> valid[w] ? <span class="hljs-literal">true</span> : (valid[w] = <span class="hljs-literal">true</span>, <span class="hljs-number">0</span>); <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shrink</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        valid.clear();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u) e[u].clear();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v = <span class="hljs-number">1</span>; v &lt;= n; ++v)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : re[v]) <br>                <span class="hljs-keyword">if</span> (bl[u] != bl[v] &amp;&amp; !has_edge(bl[u], bl[v])) &#123;<br>                    ++indeg[bl[v]]; ++outdeg[bl[u]]; e[bl[u]].push_back(bl[v]);<br>                &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= scc; ++u) <span class="hljs-keyword">if</span> (!indeg[u]) source.push_back(u); <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= scc; ++u) <span class="hljs-keyword">if</span> (!outdeg[u]) sink.push_back(u);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u) re[u].clear();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= scc; ++u) <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) re[v].push_back(u);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> Hopcroft_Karp &#123;<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">1000000000</span>;<br><br>    <span class="hljs-keyword">bool</span> vis[N];<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br>    <span class="hljs-keyword">int</span> nl, nr, ml[N], mr[N], dl[N], dr[N]; <span class="hljs-comment">// m for match, d for distance</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> q[N], hd, tl; hd = <span class="hljs-number">1</span>; tl = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(dl, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) * (nl + <span class="hljs-number">1</span>));<br>        <span class="hljs-built_in">memset</span>(dr, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) * (nr + <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= nl; ++i) <span class="hljs-keyword">if</span> (!ml[i]) &#123;dl[i] = <span class="hljs-number">0</span>; q[++tl] = i;&#125;<br>        <span class="hljs-keyword">int</span> dT = inf;<br>        <span class="hljs-keyword">while</span> (hd &lt;= tl) &#123;<br>            <span class="hljs-keyword">int</span> u = q[hd++];<br>            <span class="hljs-keyword">if</span> (dl[u] &gt;= dT) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>                <span class="hljs-keyword">if</span> (dr[v] == <span class="hljs-number">-1</span>) &#123;<br>                    dr[v] = dl[u] + <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">if</span> (!mr[v]) getmin(dT, dr[v] + <span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">else</span> &#123;dl[mr[v]] = dr[v] + <span class="hljs-number">1</span>; q[++tl] = mr[v];&#125;<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dT != inf;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) &#123;<br>            <span class="hljs-keyword">if</span> (vis[v] || dl[u] + <span class="hljs-number">1</span> != dr[v]) <span class="hljs-keyword">continue</span>;<br>            vis[v] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (!mr[v] || dfs(mr[v])) &#123;mr[v] = u; ml[u] = v; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;e[u].push_back(v);&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">max_matching</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(bfs()) &#123;<br>            <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">bool</span>) * (nr + <span class="hljs-number">1</span>));<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= nl; ++i) <span class="hljs-keyword">if</span> (!ml[i]) ans += dfs(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">bitset</span>&lt;N&gt; edg[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), v = rd(); SCC::add(u, v);<br>    &#125;<br>    SCC::kosaraju(n); SCC::shrink(n); n = SCC::scc;<br>    <span class="hljs-comment">// Transitive Closure   </span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i; --i) &#123;<br>        edg[i][i] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : SCC::e[i]) edg[i] |= edg[v];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>            <span class="hljs-keyword">if</span> (edg[i][j]) Hopcroft_Karp::add(i, j);<br>    &#125;<br>    Hopcroft_Karp::nl = Hopcroft_Karp::nr = n;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n - Hopcroft_Karp::max_matching());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;  <br></code></pre></div></td></tr></table></figure><h3 id="ctsc-2008---祭祀">CTSC 2008 - 祭祀</h3><blockquote><p>给一个 DAG ，问：(1) 最多选出多少个点两两不可达；(2)输出一种方案；(3) 输出每个点是否可以在某个方案中出现。</p></blockquote><ol type="1"><li><p>DAG 直接bitset暴力传递闭包复杂度 <spanclass="math inline">\(\mathcal{O}(\frac{n^3}{64})=\mathcal{O}(\frac{nm}{64})\)</span>，用Hopcraft-Karp 复杂度 <span class="math inline">\(\mathcal{O}(m\sqrtn)=\mathcal{O}(n^{2.5})\)</span>。</p></li><li><p>求出最长反链：按照 Konig 定理构造最小点覆盖的时候复杂度是 <spanclass="math inline">\(\mathcal{O}(m)\)</span>的，因为一个右侧点被打过标记之后，再经过他就不用管了。先找出来一个最小点覆盖，然后对于拆的点<strong>都不在最小点覆盖</strong>里的，加入最长反链。<ahref="https://r-64.blog.uoj.ac/blog/623">一个证明</a></p></li><li><p>枚举每个点，假设必选他，那么与他有偏序关系的所有点都不可以选，删掉这些之后求一下最长反链，看一下长度是否是原答案<span class="math inline">\(-1\)</span> 即可。</p></li></ol><p>总复杂度 <span class="math inline">\(\mathcal{O}(\frac{n^3}{64} + n^2+ n\times n^{2.5})=\mathcal{O}(n^{3.5})\)</span> ，对于 <spanclass="math inline">\(n=100\)</span> 可过。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmin</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> (a &gt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">getmax</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> (a &lt; b ? (a = b, <span class="hljs-literal">true</span>) : <span class="hljs-literal">false</span>);&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> V, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">1000000000</span>&gt;<br>struct Hopcroft_Karp &#123;<br>    <br>    <span class="hljs-keyword">bool</span> vis[V];<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[V];<br>    <span class="hljs-keyword">int</span> nl, nr, ml[V], mr[V], dl[V], dr[V]; <span class="hljs-comment">// m for match, d for distance</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= nl; ++i) &#123;ml[i] = <span class="hljs-number">0</span>; e[i].clear();&#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= nr; ++i) &#123;mr[i] = <span class="hljs-number">0</span>; vis[i] = <span class="hljs-literal">false</span>;&#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> q[V], hd, tl; hd = <span class="hljs-number">1</span>; tl = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(dl, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) * (nl + <span class="hljs-number">1</span>));<br>        <span class="hljs-built_in">memset</span>(dr, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) * (nr + <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= nl; ++i) <span class="hljs-keyword">if</span> (!ml[i]) &#123;dl[i] = <span class="hljs-number">0</span>; q[++tl] = i;&#125;<br>        <span class="hljs-keyword">int</span> dT = inf;<br>        <span class="hljs-keyword">while</span> (hd &lt;= tl) &#123;<br>            <span class="hljs-keyword">int</span> u = q[hd++];<br>            <span class="hljs-keyword">if</span> (dl[u] &gt;= dT) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>                <span class="hljs-keyword">if</span> (dr[v] == <span class="hljs-number">-1</span>) &#123;<br>                    dr[v] = dl[u] + <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">if</span> (!mr[v]) getmin(dT, dr[v] + <span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">else</span> &#123;dl[mr[v]] = dr[v] + <span class="hljs-number">1</span>; q[++tl] = mr[v];&#125;<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dT != inf;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) &#123;<br>            <span class="hljs-keyword">if</span> (vis[v] || dl[u] + <span class="hljs-number">1</span> != dr[v]) <span class="hljs-keyword">continue</span>;<br>            vis[v] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (!mr[v] || dfs(mr[v])) &#123;mr[v] = u; ml[u] = v; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;e[u].push_back(v);&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">max_matching</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(bfs()) &#123;<br>            <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">bool</span>) * (nr + <span class="hljs-number">1</span>));<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= nl; ++i) <span class="hljs-keyword">if</span> (!ml[i]) ans += dfs(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-keyword">bool</span> visl[V], visr[V], anti[V];<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addtag</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>        visl[u] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) &#123;<br>            <span class="hljs-keyword">if</span> (visr[v]) <span class="hljs-keyword">continue</span>;<br>            visr[v] = <span class="hljs-literal">true</span>;<br>            addtag(mr[v]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Antichain</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= nl; ++i)<br>            <span class="hljs-keyword">if</span> (!ml[i]) addtag(i);<br>        <span class="hljs-comment">// visl[i] = false or visr[i] = true : vertex cover</span><br>        <span class="hljs-comment">// visl[i] = true or visr[i] = false : independent set</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= nl; ++i) <br>            <span class="hljs-keyword">if</span> (visl[i] &amp;&amp; !visr[i]) anti[i] = <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 101</span><br><br><span class="hljs-keyword">bool</span> tag[N];<br><br>Hopcroft_Karp&lt;N&gt; f;<br><br><span class="hljs-built_in">bitset</span>&lt;N&gt; adj[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, u, v; i &lt;= m; ++i) &#123;<br>        u = rd(); v = rd(); adj[u][v] = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; ++k)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u)<br>            <span class="hljs-keyword">if</span> (adj[u][k]) adj[u] |= adj[k];<br>    f.nl = f.nr = n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v = <span class="hljs-number">1</span>; v &lt;= n; ++v) <br>            <span class="hljs-keyword">if</span> (adj[u][v]) f.add(u, v);<br>    <span class="hljs-keyword">int</span> ans = n - f.max_matching();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    f.Antichain();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;0&#x27;</span> + f.anti[i]); <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        f.clear();<br>        <span class="hljs-keyword">int</span> tot = n;<br>        <span class="hljs-built_in">memset</span>(tag, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(tag));<br>        tag[i] = <span class="hljs-literal">true</span>; --tot;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u)<br>            <span class="hljs-keyword">if</span> (adj[u][i] || adj[i][u]) &#123;tag[u] = <span class="hljs-literal">true</span>; --tot;&#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v = <span class="hljs-number">1</span>; v &lt;= n; ++v) <br>                <span class="hljs-keyword">if</span> (adj[u][v] &amp;&amp; !tag[u] &amp;&amp; !tag[v]) f.add(u, v);<br>        <span class="hljs-keyword">if</span> (tot - f.max_matching() == ans - <span class="hljs-number">1</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;0&#x27;</span>); <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>一些结合其他套路的题目： <ahref="https://www.spoj.com/problems/DIVREL/">SPOJ - DIVREL</a> | <ahref="/2022/01/31/Atcoder/abc237/#ex---hakata">ABC237Ex - hakata</a> |<a href="https://www.luogu.com.cn/problem/CF590E">CF590E -Birthday</a>.</p>]]></content>
    
    
    <categories>
      
      <category>Summary</category>
      
      <category>Algorithms</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Graphs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Approximate Algorithms (1) : Complexity Classes</title>
    <link href="/approximate-algorithms/complexity-classes/"/>
    <url>/approximate-algorithms/complexity-classes/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="i---p-and-np">I - P and NP</h2><p><strong>Polynomial Time Algorithm</strong></p><blockquote><p>Algorithm <strong>A</strong> runs in polynomial time if for everystring <span class="math inline">\(s\)</span> , <spanclass="math inline">\(A(s)\)</span> terminates in <spanclass="math inline">\(\leq p(|s|)\)</span> "steps".</p><p>Where <span class="math inline">\(|s|\)</span> is the length of <spanclass="math inline">\(s\)</span> <strong>in memory</strong>, and <spanclass="math inline">\(p(\cdot)\)</span> is some polynomial function.</p></blockquote><p>所以枚举约数复杂度 <span class="math inline">\(O(\sqrt n)\)</span>并不能算多项式算法，因为复杂度是 <spanclass="math inline">\(O(\sqrt{2^{|s|}}) = O(2^{\frac{|s|}{2}}),\|s|=\log_2n\)</span> 。</p><p><strong>P (Poly-time Problem)</strong></p><blockquote><p>P = Set of <strong>decision problems</strong> for which there existsa polynomial time algorithm.</p></blockquote><p>注意讨论的对象是 Decision Problem , 即判断 <spanclass="math inline">\(X\)</span> 是否在给定集合 <spanclass="math inline">\(S\)</span> 中，回答为 "yes" 或 "no" 。</p><p>一个比较著名的 P 问题是素数判断，Agrawal-Kayal-Saxena Algorithm(2002) ，获 2006 年哥德尔奖。</p><p><strong>NP (Non-deterministic Poly-time Problems)</strong></p><blockquote><p>NP = set of decision problems for which there exists a<strong>certifier</strong> <span class="math inline">\(C(s, t)\)</span>satisfying :</p><ul><li><p><span class="math inline">\(C(s, t)\)</span> is a poly-timealgorithm;</p></li><li><p>Certificate (or witness) <span class="math inline">\(t\)</span>is of polynomial size: <span class="math inline">\(|t| \leqp(|s|)\)</span> .</p></li></ul><p>Algorithm <span class="math inline">\(C(s, t)\)</span> is a<strong>certifier</strong> for problem <spanclass="math inline">\(\mathrm{X}\)</span> if for every string <spanclass="math inline">\(s\)</span> :</p><ul><li><span class="math inline">\(s \in X \Leftrightarrow\)</span> thereexists a string <span class="math inline">\(t\)</span> such tht <spanclass="math inline">\(C(s, t)=\)</span> yes.</li></ul></blockquote><p>注意只需要在回答 yes 的时候都存在 certificate 符合要求，no的时候无法提供 certificate，不用要求。</p><p><strong>Comparison</strong></p><blockquote><p>P. Decision problems for which there exists a poly-time<strong>algorithm</strong>.</p><p>NP. Decision problems for which there exists a poly-time<strong>certifier</strong>.</p></blockquote><p>P <span class="math inline">\(\subseteq\)</span> NP is obvious (usethe algorithm as the certifier) . Whether P = NP or not is still afamous open problem.</p><h2 id="ii---poly-time-reduction">II - Poly-time Reduction</h2><p><strong>Definition</strong></p><blockquote><p><strong>A poly-time reduction</strong> from decision problem <spanclass="math inline">\(A\)</span> to decision problem <spanclass="math inline">\(B\)</span> is a polytime algorithm fortransforming any instance <span class="math inline">\(a\)</span> ofproblem <span class="math inline">\(A\)</span> into instance <spanclass="math inline">\(b\)</span> of problem <spanclass="math inline">\(B\)</span>, such that</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Summary</category>
      
      <category>Class Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Approximate Algorithms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matrix Multiplication</title>
    <link href="/algorithms/matrix-multiplication/"/>
    <url>/algorithms/matrix-multiplication/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="递推数列">递推数列</h2><h2 id="路径计数">路径计数</h2><p>给定一张图，处理形如 “从 <span class="math inline">\(u\)</span> 到<span class="math inline">\(v\)</span> 恰好经过 <spanclass="math inline">\(k\)</span> 条边的路径条数” 的计数问题。</p><p>设 <span class="math inline">\(f[u][v][k]\)</span> 表示从 <spanclass="math inline">\(u\)</span> 到 <spanclass="math inline">\(v\)</span> 恰好经过 <spanclass="math inline">\(k\)</span> 条边的路径条数，设 <spanclass="math inline">\(e[u][v]=1\)</span> 表示存在一条从 <spanclass="math inline">\(u\)</span> 到 <spanclass="math inline">\(v\)</span> 的边，有转移 <spanclass="math display">\[f[u][v][k] = \sum_{1\le w\le n} f[u][w][k-1]\cdot e[w][v]\]</span> 这是一个典型的矩阵乘法，设 <spanclass="math inline">\(F[k]\)</span> 表示 <spanclass="math inline">\(k\)</span> 步的 <spanclass="math inline">\(f\)</span> 数组，有 <spanclass="math inline">\(F[k]=E^k (k\ge 0)\)</span> 。</p><h2 id="广义矩阵乘法">广义矩阵乘法</h2><p>使用矩阵乘法来维护的要求有两个：</p><ol type="1"><li>运算结果满足对应代数表达式；</li><li>满足结合律（用于快速幂加速）。</li></ol><p>比较严谨的结论是：矩阵乘法可以处理的代数结构为半环 <spanclass="math inline">\((A,+,\cdot)\)</span> ，即满足：</p><ul><li><span class="math inline">\((A,+)\)</span> 为带有单位元 <spanclass="math inline">\(0\)</span>的交换幺半群（单位元，结合律，交换律）；</li><li><span class="math inline">\((A,\cdot\ )\)</span> 为带有单位元 <spanclass="math inline">\(1\)</span> 的幺半群（单位元，结合律）；</li><li>乘法对加法同时有左、右分配律；</li><li>加法单位元 <span class="math inline">\(0\)</span> 抵消乘法。</li></ul><blockquote><p>In general, if the addition and multiplication satisfies the axiomsof <strong>semi-ring</strong>, then the associativity of multiplicationof matrices holds, enabling us to optimize DP with the matrixexponentiation like described above.</p><p>A semi-ring is a set <span class="math inline">\(A\)</span> equippedwith two binary operations, addition <spanclass="math inline">\(+\)</span> and multiplication <spanclass="math inline">\(\cdot\)</span> , such that all the followingproperties is satisfied:</p><ul><li><p><span class="math inline">\((A,+)\)</span> is an commutativemonoid; i.e. it satisfies the following three conditions:</p><ul><li>The associativity of <span class="math inline">\(+\)</span> holds.That is, for any <span class="math inline">\(a, b, c \in A\)</span>, itholds that <span class="math inline">\((a+b)+c=a+(b+c)\)</span>.</li><li>There exists an identity 0 of <spanclass="math inline">\(+\)</span>. That is, there exists <spanclass="math inline">\(0 \in A\)</span> such that <spanclass="math inline">\(a+0=0+a=a\)</span>.</li><li>The commutativity of <span class="math inline">\(+\)</span> holds.That is, for any <span class="math inline">\(a, b \in A\)</span>, itholds that <span class="math inline">\(a+b=b+a\)</span>.</li></ul></li><li><p><span class="math inline">\((A, \cdot)\)</span> is a monoid; i.e.it satisfies the following two conditions:</p><ul><li><p>The associativity of <span class="math inline">\(\cdot\)</span>holds. That is, for any <span class="math inline">\(a,b,c\in A\)</span>,it holds that <span class="math inline">\((a \cdot b) \cdot c=a \cdot(b\cdot c)\)</span> .</p></li><li><p>There exists an identity 1 of <spanclass="math inline">\(\cdot\)</span>. That is, there exists <spanclass="math inline">\(1 \in A\)</span> such that <spanclass="math inline">\(a \cdot 1=1 \cdot a=a\)</span>.</p></li></ul></li><li><p><span class="math inline">\(+\)</span> and <spanclass="math inline">\(\cdot\)</span> satisfies the followingdistributive property holds:</p><ul><li><p>For any <span class="math inline">\(a, b, c \in A\)</span>, itholds that <span class="math inline">\(a \cdot(b+c)=a \cdot b+a \cdotc\)</span> .</p></li><li><p>For any <span class="math inline">\(a, b, c \in A\)</span>, itholds that <span class="math inline">\((a+b) \cdot c=a \cdot c+b \cdotc\)</span> .</p></li></ul></li><li><p>For all <span class="math inline">\(a \in A\)</span>, it holdsthat <span class="math inline">\(0 \cdot a=a \cdot0=0\)</span>.</p></li></ul></blockquote><h3 id="一些例子">一些例子</h3><p>注意，使用广义矩阵乘法时，初始矩阵和单位矩阵对应的 <spanclass="math inline">\(0\)</span> 和 <spanclass="math inline">\(1\)</span> 自然的应当使用广义的 <spanclass="math inline">\(0\)</span> 和 <spanclass="math inline">\(1\)</span> 。</p><table style="width:100%;"><colgroup><col style="width: 2%" /><col style="width: 37%" /><col style="width: 25%" /><col style="width: 6%" /><col style="width: 21%" /><col style="width: 6%" /></colgroup><thead><tr class="header"><th style="text-align: center;">ID</th><th style="text-align: center;"><spanclass="math inline">\(A\)</span></th><th style="text-align: center;"><spanclass="math inline">\(+\)</span></th><th style="text-align: center;"><spanclass="math inline">\(0\)</span></th><th style="text-align: center;"><spanclass="math inline">\(\cdot\)</span></th><th style="text-align: center;"><spanclass="math inline">\(1\)</span></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;"><spanclass="math inline">\(\mathbb{R}\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\min\)</span></td><td style="text-align: center;"><spanclass="math inline">\(+\infty\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\max\)</span></td><td style="text-align: center;"><spanclass="math inline">\(-\infty\)</span></td></tr><tr class="even"><td style="text-align: center;">2</td><td style="text-align: center;"><spanclass="math inline">\(\mathbb{R}\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\max\)</span></td><td style="text-align: center;"><spanclass="math inline">\(-\infty\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\min\)</span></td><td style="text-align: center;"><spanclass="math inline">\(+\infty\)</span></td></tr><tr class="odd"><td style="text-align: center;">3</td><td style="text-align: center;"><spanclass="math inline">\(\mathbb{R}\cup \{-\infty \}\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\max\)</span></td><td style="text-align: center;"><spanclass="math inline">\(-\infty\)</span></td><td style="text-align: center;">ordinary addition <spanclass="math inline">\(+\)</span></td><td style="text-align: center;"><spanclass="math inline">\(0\)</span></td></tr><tr class="even"><td style="text-align: center;">4</td><td style="text-align: center;"><spanclass="math inline">\(\mathbb{R}\cup \{+\infty \}\)</span></td><td style="text-align: center;"><spanclass="math inline">\(\min\)</span></td><td style="text-align: center;"><spanclass="math inline">\(+\infty\)</span></td><td style="text-align: center;">ordinary addition <spanclass="math inline">\(+\)</span></td><td style="text-align: center;"><spanclass="math inline">\(0\)</span></td></tr><tr class="odd"><td style="text-align: center;">5</td><td style="text-align: center;"><span class="math inline">\(\forall n\in\mathbb{N^+},\ [0,2^n)\cap \mathbb{N}\)</span></td><td style="text-align: center;">bitwise OR</td><td style="text-align: center;"><spanclass="math inline">\(0\)</span></td><td style="text-align: center;">bitwise AND</td><td style="text-align: center;"><spanclass="math inline">\(2^n-1\)</span></td></tr><tr class="even"><td style="text-align: center;">6</td><td style="text-align: center;"><span class="math inline">\(\forall n\in\mathbb{N^+},\ [0,2^n)\cap \mathbb{N}\)</span></td><td style="text-align: center;">bitwise AND</td><td style="text-align: center;"><spanclass="math inline">\(2^n-1\)</span></td><td style="text-align: center;">bitwise OR</td><td style="text-align: center;"><spanclass="math inline">\(0\)</span></td></tr><tr class="odd"><td style="text-align: center;">7</td><td style="text-align: center;"><span class="math inline">\(\forall n\in\mathbb{N^+},\ [0,2^n)\cap \mathbb{N}\)</span></td><td style="text-align: center;">bitwise XOR</td><td style="text-align: center;"><spanclass="math inline">\(0\)</span></td><td style="text-align: center;">bitwise AND</td><td style="text-align: center;"><spanclass="math inline">\(2^n-1\)</span></td></tr></tbody></table><h3 id="abc-236-g---good-vertices">ABC 236 G - Good Vertices</h3><blockquote><p>有一张无向图，开始没有边，第 <span class="math inline">\(1\simm\)</span> 秒每秒加一条边 <span class="math inline">\(u_i,v_i\)</span>。</p><p>询问每个点 <span class="math inline">\(u\)</span>，询问最早的时刻，图中存在一条长度恰好为 <spanclass="math inline">\(l\)</span> 的从 <spanclass="math inline">\(1\)</span> 到 <spanclass="math inline">\(u\)</span> 的路径。</p></blockquote><p>将边加入的时间设为边权，即 <spanclass="math inline">\(e[u_i][v_i]=i\)</span> ，问题改为长度为 <spanclass="math inline">\(l\)</span> 的路径上最大边权最小是多少。</p><p>设 <span class="math inline">\(f[u][v][k]\)</span> 表示恰好经过 <spanclass="math inline">\(k\)</span> 条边从 <spanclass="math inline">\(u\)</span> 到 <spanclass="math inline">\(v\)</span> ，路径上的最大边权最小值。</p><p>枚举第 <span class="math inline">\(k-1\)</span> 步（即 <spanclass="math inline">\(v\)</span> 前一个）走到的点 <spanclass="math inline">\(w\)</span> ，转移方程为：<spanclass="math inline">\(f[u][v][k] = \min_{1\le w\le n} \big\{ \max(f[u][w][k-1], e[w][v])\big\}\)</span></p><p>只看一步转移，发现这是一个加法为 <spanclass="math inline">\(\min\)</span> ，乘法为 <spanclass="math inline">\(\max\)</span> 的矩阵乘法，检验：</p><ul><li>加法 <span class="math inline">\(\min\)</span> 的单位元为 <spanclass="math inline">\(+\infty\)</span> ，满足结合律交换律；</li><li>乘法 <span class="math inline">\(\max\)</span> 的单位元为 <spanclass="math inline">\(-\infty\)</span> ，满足结合律；</li><li>左分配律：<span class="math inline">\(\max(a,\min(b,c)) =\min(\max(a,b),\max(a,c))\)</span> ，由于 <spanclass="math inline">\(\max\)</span> 有交换律所以右分配律自然成立；</li><li>加法单位元抵消乘法： <span class="math inline">\(\max(+\infty, x) =+\infty\)</span></li></ul><p>所以可以用矩阵维护，对邻接矩阵做此时的矩阵快速幂即可，当然这个问题可以询问有向图以及任意点对。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 101</span><br><br><span class="hljs-keyword">int</span> n, m, l;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">min</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;b)</span> </span>&#123;<span class="hljs-keyword">return</span> a &lt; b ? a : b;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;b)</span> </span>&#123;<span class="hljs-keyword">return</span> a &lt; b ? b : a;&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">matrix</span> &#123;</span><br>    <span class="hljs-keyword">int</span> a[N][N];<br>    matrix(<span class="hljs-keyword">bool</span> id = <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(a));<br>        <span class="hljs-keyword">if</span> (id) <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i) a[i][i] = <span class="hljs-number">-1e9</span>;<br>    &#125;<br>    <span class="hljs-keyword">inline</span> matrix <span class="hljs-keyword">operator</span> * (<span class="hljs-keyword">const</span> matrix &amp;obj) <span class="hljs-keyword">const</span> &#123;<br>        matrix res;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; ++k)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>                    res.a[i][j] = min(res.a[i][j], max(a[i][k], obj.a[k][j]));<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> matrix <span class="hljs-title">fpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> t)</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        matrix res(1), x = *this;<br>        <span class="hljs-keyword">for</span> (; t; t &gt;&gt;= <span class="hljs-number">1</span>, x = x * x)<br>            <span class="hljs-keyword">if</span> (t &amp; <span class="hljs-number">1</span>) res = res * x;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125; A, res;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = rd(); m = rd(); l = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), v = rd();<br>        A.a[u][v] = min(A.a[u][v], i);<br>    &#125;<br>    res = A.fpow(l);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, res.a[<span class="hljs-number">1</span>][i] &gt; m ? <span class="hljs-number">-1</span> : res.a[<span class="hljs-number">1</span>][i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Summary</category>
      
      <category>Algorithms</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matrix Theory</tag>
      
      <tag>Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DSU on Tree</title>
    <link href="/algorithms/dsu-on-tree/"/>
    <url>/algorithms/dsu-on-tree/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="analysis">Analysis</h2><p>DSU on Tree 在一些比较简单的子树问题时可以替代点分治，复杂度也是<span class="math inline">\(\mathcal O(n\log n)\)</span> 。</p><p>按子树 size轻重链剖分，然后使用某个数据结构统计每个点的子树信息：</p><ol type="1"><li><p>先让轻儿子统计子树信息，并撤销对数据结构的影响；</p></li><li><p>如果有重儿子，统计重儿子子树信息，保留对数据结构的影响（不撤销）；</p></li><li><p>向数据结构中添加轻儿子子树信息和当前点信息，统计当前点信息。</p></li></ol><div class="note note-success">            <p>复杂度分析：</p><p>每个点只会在到根路径上遇到轻边时被添加 /撤销，由轻重连剖分每个点到根的路径上至多 <spanclass="math inline">\(\log n\)</span> 条轻边。</p><p>所以总复杂度是 <span class="math inline">\(\mathcal O(n \log n)\)</span> ，由于明显跑不满所以常数会很小。</p>          </div><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-keyword">int</span> sz[N], mxs[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    sz[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa) &#123;<br>            dfs(v, u); sz[u] += sz[v];<br>            <span class="hljs-keyword">if</span> (sz[v] &gt; sz[mxs[u]]) mxs[u] = v;<br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-comment">// adding information of u into data structures</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-comment">// deleting information of u from data structures</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    upd(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) <span class="hljs-keyword">if</span> (v != fa) upd(v, u);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    del(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) <span class="hljs-keyword">if</span> (v != fa) del(v, u);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dsu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa &amp;&amp; v != mxs[u]) &#123;dsu(v, u); del(v, u);&#125;<br>    <span class="hljs-keyword">if</span> (mxs[u]) dsu(mxs[u], u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa &amp;&amp; v != mxs[u]) upd(v, u);<br>    upd(u); <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), v = rd(); <br>        e[u].pb(v); e[v].pb(u);<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>); dsu(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="cf-600-e.-lomsat-gelral">CF 600 E. Lomsat gelral</h2><blockquote><p>一棵树每个点有一个颜色 <span class="math inline">\(c_i\)</span>，求每个点子树内出现次数最多的颜色的和。</p></blockquote><p>对颜色维护 <code>cnt</code> 数组，由于 DSU统计时只有加法，因此可以记录出现最多的次数 <code>mx</code>和最多次数的颜色的和 <code>res</code> 。</p><p>每次 <code>++cnt[col[u]]</code> 的时候讨论一下和 <code>mx</code>的关系更新即可（见 <code>upd</code> 函数）。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br>ll ans[N], res;<br><br><span class="hljs-keyword">int</span> cnt[N], col[N], mx;<br><br><span class="hljs-keyword">int</span> sz[N], mxs[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    sz[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa) &#123;<br>            dfs(v, u); sz[u] += sz[v];<br>            <span class="hljs-keyword">if</span> (sz[v] &gt; sz[mxs[u]]) mxs[u] = v;<br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-comment">// adding information of u into data structures</span><br>    ++cnt[col[u]];<br>    <span class="hljs-keyword">if</span> (cnt[col[u]] &gt; mx) &#123;mx = cnt[col[u]]; res = col[u];&#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt[col[u]] == mx) res += col[u];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-comment">// deleting information of u from data structures</span><br>    mx = <span class="hljs-number">0</span>; res = <span class="hljs-number">0</span>; cnt[col[u]] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    upd(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) <span class="hljs-keyword">if</span> (v != fa) upd(v, u);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    del(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) <span class="hljs-keyword">if</span> (v != fa) del(v, u);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dsu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa &amp;&amp; v != mxs[u]) &#123;dsu(v, u); del(v, u);&#125;<br>    <span class="hljs-keyword">if</span> (mxs[u]) dsu(mxs[u], u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa &amp;&amp; v != mxs[u]) upd(v, u);<br>    upd(u); ans[u] = res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) col[i] = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), v = rd(); <br>        e[u].pb(v); e[v].pb(u);<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>); dsu(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="cf-1009-f.-dominant-indices">CF 1009 F. Dominant Indices</h2><blockquote><p>给一棵树，对于每一个点求最小的 <span class="math inline">\(k\)</span>，使得子树内到他距离为 <span class="math inline">\(k\)</span>的点最多。</p></blockquote><p>做法和上一题完全相同，每次更新的时候讨论，超过了 <code>mx</code>直接覆盖 <code>res</code> ，等于 <code>mx</code> 和 <code>res</code> 取<span class="math inline">\(\min\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr        first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc        second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp        make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb        push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii       pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pic       pair<span class="hljs-meta-string">&lt;int, char&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000007</span><br><br><span class="hljs-keyword">int</span> cnt[N], ans[N], mx, res;<br><br><span class="hljs-keyword">int</span> sz[N], mxs[N], dep[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    sz[u] = <span class="hljs-number">1</span>; <br>    dep[u] = dep[fa] + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa) &#123;<br>            dfs(v, u); sz[u] += sz[v];<br>            <span class="hljs-keyword">if</span> (sz[v] &gt; sz[mxs[u]]) mxs[u] = v;<br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-comment">// adding information of u into data structures</span><br>    ++cnt[dep[u]];<br>    <span class="hljs-keyword">if</span> (cnt[dep[u]] &gt; mx) &#123;mx = cnt[dep[u]]; res = dep[u];&#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cnt[dep[u]] == mx) res = min(res, dep[u]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-comment">// deleting information of u from data structures</span><br>    mx = <span class="hljs-number">0</span>; res = <span class="hljs-number">0</span>; cnt[dep[u]] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    upd(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) <span class="hljs-keyword">if</span> (v != fa) upd(v, u);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    del(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) <span class="hljs-keyword">if</span> (v != fa) del(v, u);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dsu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa &amp;&amp; v != mxs[u]) &#123;dsu(v, u); del(v, u);&#125;<br>    <span class="hljs-keyword">if</span> (mxs[u]) dsu(mxs[u], u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa &amp;&amp; v != mxs[u]) upd(v, u);<br>    upd(u); ans[u] = res - dep[u];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), v = rd(); <br>        e[u].pb(v); e[v].pb(u);<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>); dsu(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="cf-208-e.-blood-cousins">CF 208 E. Blood Cousins</h2><blockquote><p>给一个森林，<span class="math inline">\(q\)</span> 次问与 <spanclass="math inline">\(u_i\)</span> 有共同的第 <spanclass="math inline">\(k_i\)</span> 级祖先的点的个数。</p></blockquote><p>询问其实与 <span class="math inline">\(u_i\)</span>关系不大，离线后是绑定在 <span class="math inline">\(u_i\)</span> 的<span class="math inline">\(k_i\)</span> 级祖先上的，因此需要快速求<span class="math inline">\(k\)</span> 级祖先。</p><p>然后使用 DSU 求出 <code>dep</code> 的 <code>cnt</code> 数组即可，由于DSU 本身也要用到轻重剖分，所以求祖先就也用树剖实现了。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-keyword">int</span> tot, dfn[N], seq[N], top[N], dep[N], ans[N], cnt[N], fa[N];<br><br><span class="hljs-keyword">int</span> sz[N], mxs[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; son[N];<br><br><span class="hljs-built_in">vector</span>&lt;pii&gt; que[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    sz[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) &#123;<br>        dfs(v); sz[u] += sz[v];<br>        <span class="hljs-keyword">if</span> (sz[v] &gt; sz[mxs[u]]) mxs[u] = v;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>    top[u] = t;<br>    dfn[u] = ++tot;<br>    seq[tot] = u;<br>    <span class="hljs-keyword">if</span> (mxs[u]) &#123;dep[mxs[u]] = dep[u] + <span class="hljs-number">1</span>; dfs2(mxs[u], t);&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) <br>        <span class="hljs-keyword">if</span> (!dfn[v]) &#123;dep[v] = dep[u] + <span class="hljs-number">1</span>; dfs2(v, v);&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    ++cnt[dep[u]];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) upd(v);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    --cnt[dep[u]];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) del(v);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dsu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) <span class="hljs-keyword">if</span> (v != mxs[u]) &#123;dsu(v); del(v);&#125;<br>    <span class="hljs-keyword">if</span> (mxs[u]) dsu(mxs[u]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) <span class="hljs-keyword">if</span> (v != mxs[u]) upd(v);<br>    ++cnt[dep[u]]; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> q : que[u]) ans[q.sc] = cnt[dep[u] + q.fr] - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">anc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (dep[u] &lt; k) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> nw = u;<br>    <span class="hljs-keyword">while</span> (dep[u] - dep[top[nw]] &lt; k) nw = fa[top[nw]];<br>    <span class="hljs-keyword">return</span> seq[dfn[nw] - (k - (dep[u] - dep[nw]))];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) son[fa[i] = rd()].pb(i);        <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : son[<span class="hljs-number">0</span>]) dfs(u);    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : son[<span class="hljs-number">0</span>]) dfs2(u, u); <br>    <span class="hljs-keyword">int</span> q = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), k = rd();<br>        <span class="hljs-keyword">int</span> w = anc(u, k);<br>        <span class="hljs-keyword">if</span> (w == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>        que[w].pb(mp(k, i));<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : son[<span class="hljs-number">0</span>]) &#123;dsu(u); del(u);&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>另一种比较有意思的做法：</p><ol type="1"><li>全部离线，DFS 时用栈记录从根到当前点的路径，得到 <spanclass="math inline">\(k\)</span> 级祖先，复杂度 <spanclass="math inline">\(\mathcal O(n)\)</span> 。</li><li>将询问按深度分类，先将该深度的点加入数据结构，然后就相当于求 DFS序上区间和。</li></ol><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr        first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc        second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp        make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb        push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii       pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pic       pair<span class="hljs-meta-string">&lt;int, char&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br><span class="hljs-built_in">vector</span>&lt;pii&gt; q[N], que[N];<br><br><span class="hljs-keyword">int</span> tot, dfn[N], sz[N], ans[N], stk[N], c[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; son[N], cur[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (; p &lt; N; p += lowbit(p)) c[p] += x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; p; p -= lowbit(p)) res += c[p];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> sum(r) - sum(l - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> dep)</span> </span>&#123;<br>    sz[u] = <span class="hljs-number">1</span>;<br>    stk[dep] = u; <br>    cur[dep].pb(u);<br>    dfn[u] = ++tot;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) &#123;dfs(v, dep + <span class="hljs-number">1</span>); sz[u] += sz[v];&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [k, id] : q[u]) <br>        <span class="hljs-keyword">if</span> (dep &gt; k) que[dep].pb(mp(stk[dep - k], id));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) son[rd()].pb(i);<br>    <span class="hljs-keyword">int</span> m = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), k = rd();<br>        q[u].pb(mp(k, i));<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : son[<span class="hljs-number">0</span>]) dfs(u, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : cur[i]) add(dfn[u], <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [u, id] : que[i]) <br>            ans[id] = sum(dfn[u], dfn[u] + sz[u] - <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : cur[i]) add(dfn[u], <span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="cf-246-e.-blood-cousins-return">CF 246 E. Blood CousinsReturn</h2><blockquote><p>一棵树每个点上有一个字符串，多次询问 <spanclass="math inline">\(u_i\)</span> 子树内深度为 <spanclass="math inline">\(k\)</span>的点对应的字符串集合中有多少个不同的。</p></blockquote><p>还是上面那个问题，改成用一个 <code>unordered_map</code>来计数每个深度的字符串即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-keyword">int</span> dfn[N], top[N], dep[N], ans[N], tot, seq[N], fa[N];<br><br><span class="hljs-keyword">int</span> sz[N], mxs[N];<br><br><span class="hljs-built_in">string</span> nam[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; son[N];<br><br><span class="hljs-built_in">vector</span>&lt;pii&gt; que[N];<br><br><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; cnt[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    sz[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) &#123;<br>        dfs(v); sz[u] += sz[v];<br>        <span class="hljs-keyword">if</span> (sz[v] &gt; sz[mxs[u]]) mxs[u] = v;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>    top[u] = t;<br>    dfn[u] = ++tot;<br>    seq[tot] = u;<br>    <span class="hljs-keyword">if</span> (mxs[u]) &#123;dep[mxs[u]] = dep[u] + <span class="hljs-number">1</span>; dfs2(mxs[u], t);&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) <br>        <span class="hljs-keyword">if</span> (!dfn[v]) &#123;dep[v] = dep[u] + <span class="hljs-number">1</span>; dfs2(v, v);&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-comment">// adding information of u into data structures</span><br>    ++cnt[dep[u]][nam[u]];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-comment">// deleting information of u from data structures</span><br>    --cnt[dep[u]][nam[u]];<br>    <span class="hljs-keyword">if</span> (!cnt[dep[u]][nam[u]]) cnt[dep[u]].erase(nam[u]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    upd(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) upd(v, u);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    del(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) del(v, u);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dsu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u])<br>        <span class="hljs-keyword">if</span> (v != mxs[u]) &#123;dsu(v, u); del(v, u);&#125;<br>    <span class="hljs-keyword">if</span> (mxs[u]) dsu(mxs[u], u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u])<br>        <span class="hljs-keyword">if</span> (v != mxs[u]) upd(v, u);<br>    upd(u); <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> q : que[u]) &#123;<br>        <span class="hljs-keyword">int</span> d = q.fr, id = q.sc;<br>        ans[id] = cnt[dep[u] + d].size();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-built_in">cout</span>.tie(<span class="hljs-literal">nullptr</span>);<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">int</span> n; <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; nam[i] &gt;&gt; fa[i];<br>        son[fa[i]].pb(i);        <br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : son[<span class="hljs-number">0</span>]) dfs(u);    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : son[<span class="hljs-number">0</span>]) dfs2(u, u); <br>    <span class="hljs-keyword">int</span> q; <span class="hljs-built_in">cin</span> &gt;&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, u, k; i &lt;= q; ++i) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; k;<br>        <span class="hljs-keyword">if</span> (dep[u] + k &gt; n) <span class="hljs-keyword">continue</span>;<br>        que[u].pb(mp(k, i));<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : son[<span class="hljs-number">0</span>]) &#123;dsu(u, u); del(u, u);&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; ++i) <span class="hljs-built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="cf-570-d.-tree-requests">CF 570 D. Tree Requests</h2><blockquote><p>一棵树每个点上有一个字符，每次询问 <spanclass="math inline">\(u_i\)</span> 子树内深度为 <spanclass="math inline">\(k_i\)</span>的所有点上的字符是否可以通过重排形成回文串。</p></blockquote><p>形成回文串的条件是出现奇数次的字符至多一种。</p><p>用 DSU on Tree 维护 <code>cnt[dep][c]</code> 表示在 <code>dep</code>这个深度上的点字符 <code>c</code> 的出现次数。</p><p>再用一个 <code>odd[dep]</code> 表示 <code>cnt[dep][c]</code> 是奇数的<code>c</code> 的个数，询问 <code>Yes</code> 就是对应深度的<code>odd[dep] &lt;= 1</code> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr        first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc        second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp        make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb        push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii       pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pic       pair<span class="hljs-meta-string">&lt;int, char&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500007</span><br><br><span class="hljs-keyword">bool</span> ans[N];<br><br><span class="hljs-keyword">int</span> cnt[N][<span class="hljs-number">26</span>], ch[N], odd[N];<br><br><span class="hljs-keyword">int</span> sz[N], mxs[N], dep[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; son[N];<br><br><span class="hljs-built_in">vector</span>&lt;pii&gt; que[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    sz[u] = <span class="hljs-number">1</span>; <br>    dep[u] = dep[fa] + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) &#123;<br>        dfs(v, u); sz[u] += sz[v];<br>        <span class="hljs-keyword">if</span> (sz[v] &gt; sz[mxs[u]]) mxs[u] = v;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-comment">// adding information of u into data structures</span><br>    ++cnt[dep[u]][ch[u]];<br>    (cnt[dep[u]][ch[u]] &amp; <span class="hljs-number">1</span>) ? ++odd[dep[u]] : --odd[dep[u]];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-comment">// deleting information of u from data structures</span><br>    cnt[dep[u]][ch[u]] = odd[dep[u]] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    upd(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) <span class="hljs-keyword">if</span> (v != fa) upd(v, u);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    del(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) <span class="hljs-keyword">if</span> (v != fa) del(v, u);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dsu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u])<br>        <span class="hljs-keyword">if</span> (v != fa &amp;&amp; v != mxs[u]) &#123;dsu(v, u); del(v, u);&#125;<br>    <span class="hljs-keyword">if</span> (mxs[u]) dsu(mxs[u], u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u])<br>        <span class="hljs-keyword">if</span> (v != fa &amp;&amp; v != mxs[u]) upd(v, u);<br>    upd(u); <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [k, id] : que[u]) ans[id] = (odd[k] &lt;= <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) son[rd()].pb(i);<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isalpha</span>(c)) c = getchar();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i, c = getchar()) ch[i] = c - <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), k = rd(); que[u].pb(mp(k, i));<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>); dsu(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) <span class="hljs-built_in">puts</span>(ans[i] ? <span class="hljs-string">&quot;Yes&quot;</span> : <span class="hljs-string">&quot;No&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="cf-375-d.-tree-and-queries">CF 375 D. Tree and Queries</h2><blockquote><p>一棵树每个点有一个颜色，每次询问 <spanclass="math inline">\(u_i\)</span> 子树内出现次数超过 <spanclass="math inline">\(k_i\)</span> 的颜色数。</p></blockquote><p>DSU on Tree 求出来子树内颜色的出现次数 <code>cnt</code> 数组，再对<code>cnt</code> 求出现次数 <code>cnt'</code> 数组，询问就是问<code>cnt'</code> 的 <span class="math inline">\(k_i\)</span>后缀和。</p><p>因此很容易 <span class="math inline">\(\mathcal O(n\log^2 n)\)</span>做，额外再用一个树状数组维护 <code>cnt'</code> 就好了。</p><p>但实际上可以 <span class="math inline">\(\mathcal O(n\log n)\)</span>处理，我们实际在做：1. 对 <code>cnt'</code> 中某个位置 <code>x</code>执行 <code>--cnt'[x], ++cnt'[x+1];</code> 2. 求后缀和。</p><p>可以发现修改操作对后缀和数组的影响是 <spanclass="math inline">\(\mathcal O(1)\)</span>的，所以我们可以直接在修改的同时维护每个位置的后缀和。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr        first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc        second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp        make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb        push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii       pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pic       pair<span class="hljs-meta-string">&lt;int, char&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br><span class="hljs-keyword">int</span> col[N], cnt[N], sum[N], ans[N];<br><br><span class="hljs-keyword">int</span> sz[N], mxs[N], dep[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-built_in">vector</span>&lt;pii&gt; que[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    sz[u] = <span class="hljs-number">1</span>; <br>    dep[u] = dep[fa] + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) <br>        <span class="hljs-keyword">if</span> (v != fa) &#123;<br>            dfs(v, u); sz[u] += sz[v];<br>            <span class="hljs-keyword">if</span> (sz[v] &gt; sz[mxs[u]]) mxs[u] = v;<br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-comment">// adding information of u into data structures</span><br>    ++sum[++cnt[col[u]]];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-comment">// deleting information of u from data structures</span><br>    sum[cnt[col[u]]--]--;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    upd(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) <span class="hljs-keyword">if</span> (v != fa) upd(v, u);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    del(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) <span class="hljs-keyword">if</span> (v != fa) del(v, u);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dsu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa &amp;&amp; v != mxs[u]) &#123;dsu(v, u); del(v, u);&#125;<br>    <span class="hljs-keyword">if</span> (mxs[u]) dsu(mxs[u], u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa &amp;&amp; v != mxs[u]) upd(v, u);<br>    upd(u); <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [k, id] : que[u]) ans[id] = sum[k];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) col[i] = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), v = rd(); e[u].pb(v); e[v].pb(u);   <br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), k = rd(); que[u].pb(mp(k, i));<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>); dsu(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="ccpc-changchun-f.-strange-memory">2020 CCPC Changchun F. StrangeMemory</h2><blockquote><p>给一棵树，每个点有一个权值 <span class="math inline">\(a_i\)</span>，求 <span class="math inline">\(\sum_{1\le i&lt;j\le n} [a_i\oplusa_j=a_{lca(i,j)}] (i\oplus j)\)</span></p></blockquote><p>直接 dsu on tree 会发现无法处理形如 <span class="math inline">\(\sum(w_i\oplus x)\)</span>的查询，因此可以按位统计（注意是节点编号的位数）。</p><p>每次将一个子树的答案先查出来再加入，因为 <spanclass="math inline">\(a_i&gt;0\)</span>所以不用考虑祖先后代关系的贡献。</p><p>总复杂度 <span class="math inline">\(\mathcal{O}(n\log^2 n)\)</span>，本题比较卡常，所以需要把所有轻儿子的子树点集预处理出来，省掉递归的常数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr        first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc        second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp        make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb        push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii       pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pic       pair<span class="hljs-meta-string">&lt;int, char&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000007</span><br><br><span class="hljs-keyword">int</span> cnt[N &lt;&lt; <span class="hljs-number">1</span>][<span class="hljs-number">2</span>], mx, res;<br><br><span class="hljs-keyword">int</span> sz[N], mxs[N], dep[N], a[N], b;<br><br>ll ans;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N], subtree[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    sz[u] = <span class="hljs-number">1</span>; <br>    dep[u] = dep[fa] + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa) &#123;<br>            dfs(v, u); sz[u] += sz[v];<br>            <span class="hljs-keyword">if</span> (sz[v] &gt; sz[mxs[u]]) mxs[u] = v;<br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa, <span class="hljs-keyword">int</span> w)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) <span class="hljs-keyword">if</span> (v != fa) calc(v, u, w);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dsu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa &amp;&amp; v != mxs[u]) &#123;<br>            dsu(v, u);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> k : subtree[v]) cnt[a[k]][(k &gt;&gt; b) &amp; <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        &#125;<br>    <span class="hljs-keyword">if</span> (mxs[u]) dsu(mxs[u], u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa &amp;&amp; v != mxs[u]) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> k : subtree[v]) <br>                ans += (<span class="hljs-number">1l</span>l &lt;&lt; b) * cnt[a[k] ^ a[u]][((k &gt;&gt; b) &amp; <span class="hljs-number">1</span>) ^ <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> k : subtree[v]) ++cnt[a[k]][(k &gt;&gt; b) &amp; <span class="hljs-number">1</span>];<br>        &#125;<br>    ++cnt[a[u]][(u &gt;&gt; b) &amp; <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_subtree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa, <span class="hljs-keyword">int</span> cur)</span> </span>&#123;<br>    subtree[cur].pb(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa) get_subtree(v, u, cur);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dsu_tree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa &amp;&amp; v != mxs[u]) get_subtree(v, u, v);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa) dsu_tree(v, u);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i] = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), v = rd(); <br>        e[u].pb(v); e[v].pb(u);<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>); dsu_tree(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>); <br>    <span class="hljs-keyword">for</span> (b = <span class="hljs-number">0</span>; b &lt;= <span class="hljs-number">16</span>; ++b) &#123;<br>        dsu(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>); <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u) cnt[a[u]][<span class="hljs-number">0</span>] = cnt[a[u]][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2id="cf-741-d.-arpas-letter-marked-tree-and-mehrdads-dokhtar-kosh-paths">CF741 D. Arpa’s letter-marked tree and Mehrdad’s Dokhtar-kosh paths</h2><blockquote><p>一棵树每条边上有一个字符 (a - v) ，每次询问 <spanclass="math inline">\(u_i\)</span>子树内最长的简单路径，满足其上的字符重排可形成回文串。</p></blockquote><p><span class="math inline">\((u,v)\)</span> 路径信息 <spanclass="math inline">\(=u\)</span> 到根信息 <spanclass="math inline">\(+v\)</span> 到根信息 <spanclass="math inline">\(-2*lca(u,v)\)</span> 到根信息。</p><p>字符集只有 <span class="math inline">\(22\)</span> ，状压 <spanclass="math inline">\(u\)</span> 到根每个字符的奇偶性 <spanclass="math inline">\(s_u\)</span> ，路径信息即为 <spanclass="math inline">\(s_u\oplus s_v\)</span> （lca信息因为异或两次消掉了）</p><p>考虑路径合并，每个点可能的配对方案只有 <spanclass="math inline">\(23\)</span> 种（异或后为 <spanclass="math inline">\(0\)</span> 或 <spanclass="math inline">\(2\)</span>的幂次，即最多允许一个字符出现奇数次）</p><p>DSU on Tree，统计此前子树的信息，维护每个状压值的最深深度，保证 lca是当前点需整个子树先查询后插入。</p><div class="note note-warning">            <p>写挂的地方：1. 子树内最长要和儿子的 <code>ans</code> 取 <spanclass="math inline">\(\max\)</span> ；2.枚举配对的状态时，得保证存在再更新。</p>          </div><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr        first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc        second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp        make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb        push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii       pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pic       pair<span class="hljs-meta-string">&lt;int, char&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500007</span><br><br><span class="hljs-keyword">int</span> ch[N], sta[N], mxd[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">22</span>], ans[N], res;<br><br><span class="hljs-keyword">int</span> sz[N], mxs[N], dep[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; son[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa, <span class="hljs-keyword">int</span> S)</span> </span>&#123;<br>    sz[u] = <span class="hljs-number">1</span>; <br>    dep[u] = dep[fa] + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (u != <span class="hljs-number">1</span>) S ^= (<span class="hljs-number">1</span> &lt;&lt; ch[u]);<br>    sta[u] = S;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) &#123;<br>            dfs(v, u, S); sz[u] += sz[v];<br>            <span class="hljs-keyword">if</span> (sz[v] &gt; sz[mxs[u]]) mxs[u] = v;<br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-comment">// adding information of u into data structures</span><br>    mxd[sta[u]] = max(mxd[sta[u]], dep[u]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-comment">// deleting information of u from data structures</span><br>    mxd[sta[u]] = <span class="hljs-number">0</span>; res = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    upd(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) <span class="hljs-keyword">if</span> (v != fa) upd(v, u);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    del(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) <span class="hljs-keyword">if</span> (v != fa) del(v, u);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updans</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> del)</span> </span>&#123; <br>  <span class="hljs-comment">// 枚举配对的状态需要保证存在！！！</span><br>    <span class="hljs-keyword">if</span> (mxd[sta[u]]) res = max(res, dep[u] + mxd[sta[u]] - <span class="hljs-number">2</span> * del);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">22</span>; ++i) <br>        <span class="hljs-keyword">if</span> (mxd[sta[u] ^ (<span class="hljs-number">1</span> &lt;&lt; i)]) res = max(res, dep[u] + mxd[sta[u] ^ (<span class="hljs-number">1</span> &lt;&lt; i)] - <span class="hljs-number">2</span> * del);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getans</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> del)</span> </span>&#123;<br>    updans(u, del);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) getans(v, del);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dsu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u])<br>        <span class="hljs-keyword">if</span> (v != fa &amp;&amp; v != mxs[u]) &#123;dsu(v, u); del(v, u);&#125;<br>    <span class="hljs-keyword">if</span> (mxs[u]) dsu(mxs[u], u);<br>    updans(u, dep[u]); upd(u); <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u])<br>        <span class="hljs-keyword">if</span> (v != fa &amp;&amp; v != mxs[u]) &#123;<br>            getans(v, dep[u]); <br>            res = max(res, ans[v]);<br>            upd(v, u);<br>        &#125;<br>    ans[u] = res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br>        son[rd()].pb(i);<br>        <span class="hljs-keyword">char</span> c = getchar();<br>        <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isalpha</span>(c)) c = getchar();<br>        ch[i] = (c - <span class="hljs-string">&#x27;a&#x27;</span>);<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>); dsu(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="hdu-7255-expected-inversions">HDU 7255 Expected Inversions</h2><p>换根 + DSU on Tree 统计信息，见多校题解。</p>]]></content>
    
    
    <categories>
      
      <category>Summary</category>
      
      <category>Algorithms</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DFS and Similar</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Beginner Contest 266</title>
    <link href="/atcoder/abc266/"/>
    <url>/atcoder/abc266/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ABCD 比较简单就不写了。</p><h2 id="e.-throwing-the-die">E. Throwing the Die</h2><blockquote><p>有 <span class="math inline">\(k\)</span>次掷骰子的机会，可以任意时刻喊停，得分就是停的时候骰子向上的数字，问最优策略期望得分。</p></blockquote><p>期望要倒着算。设 <span class="math inline">\(f[x]\)</span> 表示可以掷<span class="math inline">\(x\)</span> 次的最优期望得分，首先有 <spanclass="math inline">\(f[1] = 3.5\)</span> 。</p><p>接下来考虑 <span class="math inline">\(f[i]\)</span> 已知求 <spanclass="math inline">\(f[i + 1]\)</span> ：枚举第 <spanclass="math inline">\(i+1\)</span> 次的六种可能情况，如果本次得分比<span class="math inline">\(f[i]\)</span>要大就不会再投了，否则会继续投。</p><p>因此方程为 <span class="math inline">\(f[i + 1]=\frac{1}{6}\sum_{j=1}^6j\times\big[j &gt; f[i]\big]+f[i]\times \big[j\le f[i]\big]\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>  <span class="hljs-keyword">double</span> f[<span class="hljs-number">101</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">3.5</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br>      f[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">6</span>; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">1.0</span> * j &lt; f[i - <span class="hljs-number">1</span>]) f[i] += f[i - <span class="hljs-number">1</span>] / <span class="hljs-number">6</span>;<br>            <span class="hljs-keyword">else</span> f[i] += j / <span class="hljs-number">6.0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10lf\n&quot;</span>, f[n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="f.-well-defined-path-queries-on-a-namori">F. Well-defined PathQueries on a Namori</h2><blockquote><p>给一棵无向基环树，<span class="math inline">\(q\)</span> 次问 <spanclass="math inline">\(u_i\)</span> 和 <spanclass="math inline">\(v_i\)</span> 之间的简单路径是否唯一。</p></blockquote><p>路径不经过环就唯一，因此拓扑把环找出来删掉，如果两个点在同一棵树内答案就是<code>Yes</code> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-keyword">int</span> deg[N];<br><br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br><br><span class="hljs-keyword">int</span> col[N], cnt;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> c)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) <br>        <span class="hljs-keyword">if</span> (!col[v]) &#123;<br>            col[v] = c; dfs(v, c);<br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), v = rd();<br>        e[u].pb(v); e[v].pb(u);<br>        ++deg[u]; ++deg[v];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br>        <span class="hljs-keyword">if</span> (deg[i] == <span class="hljs-number">1</span>) &#123;vis[i] = <span class="hljs-literal">true</span>; q.push(i);&#125;<br>    <span class="hljs-keyword">while</span> (!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>            <span class="hljs-keyword">if</span> (!vis[v]) &#123;<br>                --deg[v];<br>                <span class="hljs-keyword">if</span> (deg[v] == <span class="hljs-number">1</span>) &#123;<br>                    vis[v] = <span class="hljs-literal">true</span>;<br>                    q.push(v);<br>                &#125;<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br>        <span class="hljs-keyword">if</span> (!vis[i]) col[i] = ++cnt;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span> (!vis[i]) dfs(i, col[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> q = rd(); q; --q) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), v = rd();<br>        <span class="hljs-built_in">puts</span>(col[u] == col[v] ? <span class="hljs-string">&quot;Yes&quot;</span> : <span class="hljs-string">&quot;No&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="g.-yet-another-rgb-sequence">G. Yet Another RGB Sequence</h2><blockquote><p>计数 <span class="math inline">\(R\)</span> 个 <code>r</code> ，<spanclass="math inline">\(G\)</span> 个 <code>g</code> ，<spanclass="math inline">\(B\)</span> 个 <code>b</code>的字符串，且其中<code>rg</code> 子串恰好 <span class="math inline">\(k\(k\le \min(R,G))\)</span> 个。</p></blockquote><p>先数出来 <span class="math inline">\(k\)</span> 个 <code>rg</code>、<span class="math inline">\(G-k\)</span> 个 <code>g</code> 、<spanclass="math inline">\(B\)</span> 个 <code>b</code> 的字符串个数是 <spanclass="math inline">\(\frac{(G+B)!}{k!(G-k)!B!}\)</span>（多重集的排列）</p><p>再将剩下的 <span class="math inline">\(R-k\)</span> 个 <code>r</code>插进去，因为不能插在 <code>g</code> 前面，所以只能插在 <code>rg</code>或 <code>b</code> 的前面（及最后）</p><p>因此就是 <span class="math inline">\(B+k\)</span> 个隔板和 <spanclass="math inline">\(R-k\)</span> 个球的排列个数问题，方案数为 <spanclass="math inline">\({R+B\choose R-k}\)</span> ，两部分乘起来即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 2000007</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 998244353</span><br><br><span class="hljs-keyword">int</span> fac[N], ifac[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (; t; t &gt;&gt;= <span class="hljs-number">1</span>, x = <span class="hljs-number">1l</span>l * x * x % mod)<br>        <span class="hljs-keyword">if</span> (t &amp; <span class="hljs-number">1</span>) res = <span class="hljs-number">1l</span>l * res * x % mod;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    fac[<span class="hljs-number">0</span>] = ifac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) fac[i] = <span class="hljs-number">1l</span>l * fac[i - <span class="hljs-number">1</span>] * i % mod;<br>    ifac[N - <span class="hljs-number">1</span>] = fpow(fac[N - <span class="hljs-number">1</span>], mod - <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = N - <span class="hljs-number">2</span>; i; --i) ifac[i] = <span class="hljs-number">1l</span>l * ifac[i + <span class="hljs-number">1</span>] * (i + <span class="hljs-number">1</span>) % mod;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n &lt; m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1l</span>l * fac[n] * ifac[m] % mod * ifac[n - m] % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    init();<br>    <span class="hljs-keyword">int</span> r = rd(), g = rd(), b = rd(), k = rd();<br>    r -= k; g -= k; <br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">1l</span>l * fac[g + b + k] * ifac[g] % mod * ifac[b] % mod * ifac[k] % mod;<br>    b += k;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-number">1l</span>l * ans * C(r + b, r) % mod);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="ex.-snuke-panic-2d">Ex. Snuke Panic (2D)</h2><blockquote><p>二维平面上 <span class="math inline">\(n\ (n\le 10^5)\)</span>个点，位于 <span class="math inline">\((x_i,y_i)\)</span> ，出现时间<span class="math inline">\(t_i\)</span> ，价值 <spanclass="math inline">\(a_i\)</span> 。</p><p>开始你在 <span class="math inline">\((0,0)\)</span>，每秒四选一：<span class="math inline">\(x\)</span> 方向 <spanclass="math inline">\(+1/-1/y\)</span> 方向 <spanclass="math inline">\(+1/\)</span> 不动。</p><p>恰好在 <span class="math inline">\(t_i\)</span> 时刻到达 <spanclass="math inline">\((x_i,y_i)\)</span> ，可以获得 <spanclass="math inline">\(a_i\)</span> ，求能得到的最大价值。</p></blockquote><p>直接设 <span class="math inline">\(f[t][x][y]\)</span> 表示前 <spanclass="math inline">\(t\)</span> 秒， <spanclass="math inline">\(t\)</span> 时在 <spanclass="math inline">\((x,y)\)</span> 能得到的最大价值；设 <spanclass="math inline">\(val(t,x,y)\)</span> 表示 <spanclass="math inline">\(t\)</span> 时刻 <spanclass="math inline">\((x,y)\)</span> 的价值。 <spanclass="math display">\[f[t][x][y]= \max \{f[t&#39;][x&#39;][y&#39;]\ |\ t&#39; \le t, y&#39;\le y, |x-x&#39;|+y-y&#39;\le t - t&#39;\} + val(t,x,y)\]</span> 由后两个限制条件有 <span class="math inline">\(t-t\ge y -y&#39;\ge 0\)</span> 因此第一个条件可以丢掉，剩下的条件写为： <spanclass="math display">\[\left\{\begin{array}{l}y&#39; \le y\\x - x&#39; + y - y&#39; \le t - t&#39;\\x&#39;-x + y - y&#39; \le t - t&#39;\end{array}\right.\ \ \Longrightarrow\left\{\begin{array}{l}y&#39; \le y\\t&#39; - x&#39; - y&#39; \le t - x - y\\t&#39; + x&#39; - y&#39; \le t + x - y\end{array}\right.\]</span></p><p>可以发现做个线性变换之后是个三维偏序，令 <spanclass="math inline">\(a=t-x-y,b=t+x-y\)</span> ，有： <spanclass="math display">\[f[a][b][y] = \max\{f[a&#39;][b&#39;][y&#39;]\ |\ a&#39;\le a, b&#39;\leb, y&#39;\le y \} + val(a,b,y)\]</span>三维都从小到大排序后可以去掉一维，剩下两维用二维树状数组维护即可，答案显然只会在<span class="math inline">\(val(a,b,y)\)</span> 有值处统计到。</p><p>但是即使离散化的二维树状数组也开不下，需要将一维用<code>unordered_map</code> 代替，时空复杂度均为 <spanclass="math inline">\(\mathcal O(n\log^2n)\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><span class="hljs-keyword">int</span> y, a, b, w;&#125; g[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; A, B;<br><br><span class="hljs-keyword">int</span> X, Y;<br><br><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, ll&gt; c[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">max</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<span class="hljs-keyword">return</span> a &gt; b ? a : b;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, ll w)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = x; i &lt;= X; i += lowbit(i))<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = y; j &lt;= Y; j += lowbit(j)) c[i][j] = max(c[i][j], w);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">qmax</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>    ll res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = x; i; i -= lowbit(i))<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = y; j; j -= lowbit(j)) res = max(res, c[i][j]);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">int</span> n = rd(), m = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> t = rd(), x = rd(), y = rd(), w = rd();<br>        <span class="hljs-keyword">if</span> (t - x - y &lt; <span class="hljs-number">0</span> || t + x - y &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>        g[++m].y = y; g[m].w = w;<br>        g[m].a = t - x - y; A.pb(g[m].a);<br>        g[m].b = t + x - y; B.pb(g[m].b);<br>    &#125;<br>    n = m;<br>    <span class="hljs-keyword">auto</span> cmp = [&amp;](node a, node b) &#123;<br>        <span class="hljs-keyword">if</span> (a.y != b.y) <span class="hljs-keyword">return</span> a.y &lt; b.y;<br>        <span class="hljs-keyword">if</span> (a.a != b.a) <span class="hljs-keyword">return</span> a.a &lt; b.a;<br>        <span class="hljs-keyword">return</span> a.b &lt; b.b;<br>    &#125;;<br>    sort(g + <span class="hljs-number">1</span>, g + <span class="hljs-number">1</span> + n, cmp);<br>    sort(all(A)); A.erase(unique(all(A)), A.end()); X = A.size();<br>    sort(all(B)); B.erase(unique(all(B)), B.end()); Y = B.size();<br><br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> a = lower_bound(all(A), g[i].a) - A.begin() + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> b = lower_bound(all(B), g[i].b) - B.begin() + <span class="hljs-number">1</span>;<br>        ll nw = qmax(a, b) + g[i].w;<br>        ans = max(ans, nw); upd(a, b, nw);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>AtCoder</category>
      
      <category>AtCoder Beginner Contest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dynamic Programming</tag>
      
      <tag>Counting</tag>
      
      <tag>Fenwick Tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Metacamp 2022</title>
    <link href="/misc/metacamp2022/"/>
    <url>/misc/metacamp2022/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>自闭了，因为疫情没能去成北京，线上打的决赛。</p><p>补题地址 &amp; 官方题解：<ahref="https://codeforces.com/gym/393017">Online A</a> , <ahref="https://www.zhihu.com/question/546431239/answer/2607476212">Solution</a>| <a href="https://codeforces.com/gym/393965">Online B</a> , <ahref="https://www.zhihu.com/question/546431239/answer/2620212366">Solution</a></p><h3 id="复读机">复读机</h3><blockquote><p><span class="math inline">\(n\)</span> 个人，每个人有一个 <spanclass="math inline">\(a_i,b_i\)</span> ，每次可以让 <spanclass="math inline">\(a_i\leftarrow a_{b_i}\)</span>，求最小操作次数使得所有数字都一样。</p></blockquote><p>图是一个内向基环树森林，显然只有环内的颜色有可能成为最终颜色，因此求一下所有环上颜色的交。</p><p>假设最终的颜色是 <span class="math inline">\(w\)</span>，那么最终需要的操作次数就是 <spanclass="math inline">\(n-cnt_w\)</span> ，每次把一条不是 <spanclass="math inline">\(w\)</span> 的链依次染色即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000007</span><br><br><span class="hljs-keyword">int</span> a[N], b[N], deg[N];<br><br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; cnt, tmpcnt;<br><br><span class="hljs-keyword">int</span> tot;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    vis[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (tmpcnt[a[u]] != tot) &#123;<br>        <span class="hljs-keyword">if</span> (tmpcnt[a[u]] &lt; tot - <span class="hljs-number">1</span>) tmpcnt[a[u]] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> tmpcnt[a[u]] = tot;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!vis[b[u]]) dfs(b[u]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> n = rd(); <br>    cnt.clear(); tmpcnt.clear();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        ++cnt[a[i] = rd()]; deg[i] = <span class="hljs-number">0</span>; vis[i] = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) ++deg[b[i] = rd()];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br>        <span class="hljs-keyword">if</span> (!deg[i]) q.push(i);<br>    <span class="hljs-keyword">while</span> (!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>        --deg[b[u]]; vis[u] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (!deg[b[u]]) q.push(b[u]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span> (!vis[i]) &#123;++tot; dfs(i);&#125;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">1e9</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u)<br>        <span class="hljs-keyword">if</span> (tmpcnt[a[u]] == tot) &#123;<br>            ans = min(ans, n - cnt[a[u]]);<br>        &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans &lt; <span class="hljs-number">1e9</span> ? ans : <span class="hljs-number">-1</span>);<br>&#125;  <br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="石头剪刀布">石头剪刀布</h3><blockquote><p>两个剪刀石头布的等长序列，每次可以把自己的序列的某个数移到最后，求赢的次数减操作次数的最大值。</p></blockquote><p>性质是被移到后面的数字顺序任意，因此被移到后面的数字可以尽量匹配赢。</p><p>设 <span class="math inline">\(f[i][a][b][c]\)</span> 表示前 <spanclass="math inline">\(i\)</span> 个，把 <spanclass="math inline">\(a\)</span> 个剪刀、<spanclass="math inline">\(b\)</span> 个石头、<spanclass="math inline">\(c\)</span> 个布移动到后面，剩余的最大赢次数。</p><p>最后对每个状态扫描的时候统计被操作的数字能赢多少即可，对每种记个后缀和即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = (x); i &lt;= (y); ++i)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, x, y) for (int i = (x); i &gt;= (y); --i)</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 107</span><br><br><span class="hljs-keyword">char</span> A[N], B[N];<br><br><span class="hljs-keyword">int</span> f[N][N][N][N], a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">tr</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;s&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">win</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">2</span> &amp;&amp; b == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">1</span> &amp;&amp; b == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span> &amp;&amp; b == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">int</span> suf[<span class="hljs-number">3</span>][N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, A + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, B + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        a[i] = tr(A[i]); b[i] = tr(B[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i; --i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; ++j) suf[j][i] = suf[j][i + <span class="hljs-number">1</span>];<br>        suf[b[i]][i]++;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0xcf</span>, <span class="hljs-keyword">sizeof</span>(f));<br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; x &lt;= i; ++x)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>; y &lt;= i - x; ++y)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> z = <span class="hljs-number">0</span>; z &lt;= i - x - y; ++z) &#123;<br>                    <span class="hljs-keyword">int</span> p = i - x - y - z;<br>                    f[i][x][y][z] = max(f[i][x][y][z], f[i - <span class="hljs-number">1</span>][x][y][z] + win(a[i], b[p]));<br>                    <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-number">0</span> &amp;&amp; x) f[i][x][y][z] = max(f[i][x][y][z], f[i - <span class="hljs-number">1</span>][x - <span class="hljs-number">1</span>][y][z]);<br>                    <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-number">1</span> &amp;&amp; y) f[i][x][y][z] = max(f[i][x][y][z], f[i - <span class="hljs-number">1</span>][x][y - <span class="hljs-number">1</span>][z]);<br>                    <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-number">2</span> &amp;&amp; z) f[i][x][y][z] = max(f[i][x][y][z], f[i - <span class="hljs-number">1</span>][x][y][z - <span class="hljs-number">1</span>]);<br>                &#125;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; x &lt;= n; ++x)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>; y &lt;= n - x; ++y)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> z = <span class="hljs-number">0</span>; z &lt;= n - x - y; ++z) &#123;<br>                <span class="hljs-keyword">int</span> tot = x + y + z;<br>                <span class="hljs-keyword">int</span> nw = f[n][x][y][z] + min(x, suf[<span class="hljs-number">2</span>][n - tot + <span class="hljs-number">1</span>]) + min(y, suf[<span class="hljs-number">0</span>][n - tot + <span class="hljs-number">1</span>]) + min(z, suf[<span class="hljs-number">1</span>][n - tot + <span class="hljs-number">1</span>]);<br>                ans = max(ans, nw - tot);<br>            &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="ksharpe">KSharpe</h3><blockquote><p>给定一个 <span class="math inline">\(01\)</span> 序列，求所有区间权值=（均值 / 标准差）的第 <span class="math inline">\(k\)</span>大，特殊的如果标准差为 <span class="math inline">\(0\)</span>则权值也定义为 <span class="math inline">\(0\)</span> 。</p></blockquote><p>推一推发现权值的平方 = 区间 <span class="math inline">\(1\)</span>的个数 / 区间 <span class="math inline">\(0\)</span>的个数，二分权值的平方第 <span class="math inline">\(k\)</span> 大为<span class="math inline">\(w\)</span> ，即统计多少个 <spanclass="math inline">\(l,r\)</span> 满足：</p><p><span class="math display">\[\frac{sum_r-sum_{l-1}}{(r - sum_r) - (l-1 - sum_{l-1})}\ge w\]</span> 记 <span class="math inline">\(f(x) =sum_x-w(x -sum_x)\)</span> ，所求即 <span class="math inline">\(f(r)\gef(l-1)\)</span> ，离散化 + 树状数组统计顺序对即可。</p><p>特殊的全 <span class="math inline">\(1\)</span> 区间会认为大于 <spanclass="math inline">\(w\)</span>恒成立，所以需要扣掉。提前数一下即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = (x); i &lt;= (y); ++i)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, x, y) for (int i = (x); i &gt;= (y); --i)</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br>ll k;<br><br><span class="hljs-keyword">int</span> n, sum[N];<br><br>ll c[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">double</span>, <span class="hljs-keyword">int</span>&gt; &gt; s;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">return</span> x &amp; -x;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (; x &lt; N; x += lowbit(x)) ++c[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    ll res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; x; x -= lowbit(x)) res += c[x];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br>ll cntint1 = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">int</span> ha[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">valid</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span> </span>&#123;<br>    s.clear();<br>    s.pb(mp(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) s.pb(mp(sum[i] - x * (i - sum[i]), i));<br>    sort(s.begin(), s.end());<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>; ha[s[<span class="hljs-number">0</span>].sc] = ++cnt;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (s[i].fr != s[i - <span class="hljs-number">1</span>].fr) ++cnt;<br>        ha[s[i].sc] = cnt;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(c, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(c));<br>    add(ha[<span class="hljs-number">0</span>]);<br>    ll tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        tot += calc(ha[i]); add(ha[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> tot - cntint1 &gt;= k;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = rd(); k = rd();<br>    <span class="hljs-keyword">int</span> cnt1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> w = rd();<br>        sum[i] = sum[i - <span class="hljs-number">1</span>] + w;<br>        <span class="hljs-keyword">if</span> (w == <span class="hljs-number">1</span>) ++cnt1;<br>        <span class="hljs-keyword">else</span> &#123;cntint1 += <span class="hljs-number">1l</span>l * cnt1 * (cnt1 + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; cnt1 = <span class="hljs-number">0</span>;&#125;<br>    &#125;<br>    cntint1 += <span class="hljs-number">1l</span>l * cnt1 * (cnt1 + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">double</span> l = <span class="hljs-number">0</span>, r = n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; ++i) &#123;<br>        <span class="hljs-keyword">double</span> mid = (r + l) / <span class="hljs-number">2</span>;<br>        valid(mid) ? l = mid : r = mid;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10lf\n&quot;</span>, <span class="hljs-built_in">sqrt</span>(l));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dynamic Programming</tag>
      
      <tag>DFS and Similar</tag>
      
      <tag>System of Difference Constraints</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022 HDU Multi-University Training Contest 8</title>
    <link href="/hdu/2022summer-8/"/>
    <url>/hdu/2022summer-8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="theramore">1001. Theramore</h2><blockquote><p>给一个 <span class="math inline">\(01\)</span>序列，每次可以对称翻转一个奇数长度的区间，问任意次操作能得到的最小字典序序列。</p></blockquote><p>核心点是翻转不会交换奇偶位上的数字，所以只用长度为 <spanclass="math inline">\(3\)</span> 的操作，对奇偶分别排序即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br><span class="hljs-keyword">char</span> s[N];<br><br><span class="hljs-keyword">int</span> even[<span class="hljs-number">2</span>], odd[<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    odd[<span class="hljs-number">0</span>] = odd[<span class="hljs-number">1</span>] = even[<span class="hljs-number">0</span>] = even[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (i &amp; <span class="hljs-number">1</span>) ++odd[s[i] - <span class="hljs-string">&#x27;0&#x27;</span>];<br>        <span class="hljs-keyword">else</span> ++even[s[i] - <span class="hljs-string">&#x27;0&#x27;</span>];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (i &amp; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (odd[<span class="hljs-number">0</span>]) &#123;<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;0&#x27;</span>); --odd[<span class="hljs-number">0</span>];&#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (even[<span class="hljs-number">0</span>]) &#123;<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;0&#x27;</span>); --even[<span class="hljs-number">0</span>];&#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="ironforge">1005. Ironforge</h2><blockquote><p>给一条链，每个点上有一个数字，每条边上有一个质数，多次询问是否能从<span class="math inline">\(x\)</span> 到 <spanclass="math inline">\(y\)</span> 。</p><p>每次经过一个点就可以得到这个点的全部质数，经过一条边必须要有边上的质数才能通过。</p></blockquote><p>复杂度分析题，主要目的是利用相邻的点的信息，求出每个点出发的可达区间<span class="math inline">\([l_i,r_i]\)</span> 。</p><p>判断能否通过边：预处理出来每条边两侧最近的包含对应质数的点的位置，想要通过区间要包含对应一侧的点。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-keyword">int</span> prm[N], mnd[N], tot;<br><br><span class="hljs-keyword">int</span> a[N], b[N], l[N], r[N], lst[N], L[N], R[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">inseg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> pos)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> pos &gt;= l[x] &amp;&amp; pos &lt;= r[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) l[i] = r[i] = i, a[i] = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) lst[i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> w = a[i];<br>        <span class="hljs-keyword">while</span>(w &gt; <span class="hljs-number">1</span>) &#123;lst[mnd[w]] = i; w = w / prm[mnd[w]];&#125;<br>        b[i] = mnd[rd()]; L[i] = lst[b[i]];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) lst[i] = n + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i; --i) &#123;<br>        <span class="hljs-keyword">int</span> w = a[i + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">while</span> (w &gt; <span class="hljs-number">1</span>) &#123;lst[mnd[w]] = i + <span class="hljs-number">1</span>; w = w / prm[mnd[w]];&#125;<br>        R[i] = lst[b[i]];<br>    &#125; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i; --i)<br>        <span class="hljs-keyword">while</span> (r[i] &lt; n &amp;&amp; inseg(i, L[r[i]])) r[i] = r[r[i] + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (!inseg(i, R[l[i] - <span class="hljs-number">1</span>])) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (r[i - <span class="hljs-number">1</span>] &gt;= i) &#123;l[i] = l[i - <span class="hljs-number">1</span>]; r[i] = r[i - <span class="hljs-number">1</span>]; <span class="hljs-keyword">continue</span>;&#125;<br>        l[i] = l[i - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">bool</span> fl = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (fl) &#123;<br>            fl = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (l[i] &gt; <span class="hljs-number">1</span> &amp;&amp; inseg(i, R[l[i] - <span class="hljs-number">1</span>])) &#123;<br>                <span class="hljs-keyword">if</span> (r[l[i] - <span class="hljs-number">1</span>] &gt;= i) &#123;<br>                    r[i] = r[l[i] - <span class="hljs-number">1</span>];<br>                    l[i] = l[l[i] - <span class="hljs-number">1</span>]; <span class="hljs-keyword">break</span>;<br>                &#125;<br>                l[i] = l[l[i] - <span class="hljs-number">1</span>];<br>                fl = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (r[i] &lt; n &amp;&amp; inseg(i, L[r[i]])) &#123;<br>                r[i] = r[r[i] + <span class="hljs-number">1</span>]; fl = <span class="hljs-number">1</span>;<br>            &#125; <br>        &#125;<br>    &#125; <br>    <span class="hljs-keyword">for</span> (; m; --m) &#123;<br>        <span class="hljs-keyword">int</span> x = rd(), y = rd();<br>        <span class="hljs-built_in">puts</span>(y &gt;= l[x] &amp;&amp; y &lt;= r[x] ? <span class="hljs-string">&quot;Yes&quot;</span> : <span class="hljs-string">&quot;No&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; N; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i]) &#123;prm[tot] = i; mnd[i] = tot++;&#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>, w; j &lt; tot; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">1l</span>l * i * prm[j] &gt;= N) <span class="hljs-keyword">break</span>;<br>            mnd[w = i * prm[j]] = j;<br>            vis[w] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (j == mnd[i]) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="darnassus">1007. Darnassus</h2><blockquote><p>给一个排列，建完全图 <span class="math inline">\(i\)</span> 和 <spanclass="math inline">\(j\)</span> 之间边权为 <spanclass="math inline">\(|i-j|\times |p_i-p_j|\)</span>，求最小生成树。</p></blockquote><p>注意到如果相邻连边边权都不会超过 <spanclass="math inline">\(n\)</span> ，所以只需要保留 <spanclass="math inline">\(n\)</span> 以内的边。</p><p>因此乘积两部分都按根号枚举即可，用桶排序保存所有的边，总复杂度 <spanclass="math inline">\(\mathcal O(n\sqrt n\alpha(n))\)</span>。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 50007</span><br><br><span class="hljs-keyword">int</span> f[N], p[N], q[N];<br><br><span class="hljs-built_in">vector</span>&lt;pii&gt; e[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">return</span> x == f[x] ? x : f[x] = find(f[x]);&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Abs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">return</span> x &lt; <span class="hljs-number">0</span> ? -x : x;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        f[i] = i; p[i] = rd(); q[p[i]] = i;<br>        e[i].clear();<br>    &#125;<br>    <span class="hljs-keyword">int</span> lim = <span class="hljs-built_in">sqrt</span>(n) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = max(<span class="hljs-number">1</span>, i - lim), w; j &lt; i; ++j) &#123;<br>            <span class="hljs-keyword">if</span> ((w = (i - j) * Abs(p[j] - p[i])) &gt; n) <span class="hljs-keyword">continue</span>;<br>            e[w].pb(mp(i, j));<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j, w, pj = max(<span class="hljs-number">1</span>, p[i] - lim); pj &lt; p[i]; ++pj) &#123;<br>            j = q[pj];<br>            <span class="hljs-keyword">if</span> (Abs(q[pj] - i) &lt;= lim) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> ((w = (p[i] - pj) * Abs(j - i)) &gt; n) <span class="hljs-keyword">continue</span>;<br>            e[w].pb(mp(i, j)); <br>        &#125;<br>    &#125;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> cnt = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> cur : e[i]) &#123;<br>            <span class="hljs-keyword">int</span> u = cur.fr, v = cur.sc;<br>            <span class="hljs-keyword">if</span> (find(u) != find(v)) &#123;<br>                --cnt;<br>                f[find(u)] = find(v);<br>                ans += i;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!cnt) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!cnt) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="orgrimmar">1008. Orgrimmar</h2><blockquote><p>给一棵树，求最大解离集的大小（诱导子图里每个点度不超过 <spanclass="math inline">\(1\)</span> ）</p></blockquote><p>设状态 <code>dp[u][0/1/2]</code> 表示 <spanclass="math inline">\(u\)</span> 节点：没选 / 选了，但儿子都没选 /选了，并且选了一个儿子。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500007</span><br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-keyword">int</span> f[N][<span class="hljs-number">3</span>];<br><br><span class="hljs-comment">// f[u][0] : not choose u</span><br><span class="hljs-comment">// f[u][1] : choose u, not choose u&#x27;s son</span><br><span class="hljs-comment">// f[u][2] : choose u, choose u&#x27;s son</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> dlt = <span class="hljs-number">0</span>;<br>    f[u][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    f[u][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    f[u][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) <br>        <span class="hljs-keyword">if</span> (v != fa) &#123;<br>            dfs(v, u);<br>            f[u][<span class="hljs-number">0</span>] += max(&#123;f[v][<span class="hljs-number">0</span>], f[v][<span class="hljs-number">1</span>], f[v][<span class="hljs-number">2</span>]&#125;);<br>            f[u][<span class="hljs-number">1</span>] += f[v][<span class="hljs-number">0</span>];<br>            dlt = max(dlt, f[v][<span class="hljs-number">1</span>] - f[v][<span class="hljs-number">0</span>]);<br>        &#125;<br>    f[u][<span class="hljs-number">2</span>] = f[u][<span class="hljs-number">1</span>] + dlt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) e[i].clear();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), v = rd();<br>        e[u].pb(v); e[v].pb(u);<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, max(&#123;f[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>], f[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]&#125;));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">(<span class="hljs-number">512</span>&lt;&lt;<span class="hljs-number">20</span>)</span></span>;  <span class="hljs-comment">// 512M</span><br>    __asm__ ( <span class="hljs-string">&quot;movq %0, %%rsp\n&quot;</span>::<span class="hljs-string">&quot;r&quot;</span>((<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(size)+size));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="vale-of-eternal">1010. Vale of Eternal</h2><blockquote><p>给一个点集，每秒每个点向上下左右距离 <spanclass="math inline">\(1\)</span> 的位置复制一个点，问第 <spanclass="math inline">\(t\)</span> 秒所有点的凸包面积大小。</p></blockquote><p>柴老师推的式子，前 <span class="math inline">\(t\)</span> 秒的增量为<span class="math inline">\(2t^2+t\sum \max(|\Delta x|,|\Deltay|)\)</span></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = (x); i &lt;= (y); ++i)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, x, y) for (int i = (x); i &gt;= (y); --i)</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> T;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> let const auto</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lett const T</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> letp const P <span class="hljs-comment">// P for point</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lets const S <span class="hljs-comment">// S for segment</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> letl const L <span class="hljs-comment">// L for line</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> letc const C <span class="hljs-comment">// C for convex</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> z(x) (abs((x)) &lt;= eps) <span class="hljs-comment">// is zero</span></span><br><br><span class="hljs-keyword">const</span> T eps = <span class="hljs-number">1e-8</span>;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">double</span> PI=<span class="hljs-number">3.1415926535897932384</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span> &#123;</span><br>    T x, y;<br>    P (T x = <span class="hljs-number">0</span>, T y = <span class="hljs-number">0</span>) : x(x), y(y) &#123;&#125;<br>    P <span class="hljs-keyword">operator</span> + (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x + p.x, y + p.y&#125;;&#125; <br>    P <span class="hljs-keyword">operator</span> - (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x - p.x, y - p.y&#125;;&#125; <br>    P <span class="hljs-keyword">operator</span> * (lett &amp;d) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x * d, y * d&#125;;&#125;<br>    P <span class="hljs-keyword">operator</span> / (lett &amp;d) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x / d, y / d&#125;;&#125;<br>    P <span class="hljs-keyword">operator</span> - () <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;-x, -y&#125;;&#125;<br><br>    T <span class="hljs-keyword">operator</span> | (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x * p.x + y * p.y;&#125; <span class="hljs-comment">// dot</span><br>    T <span class="hljs-keyword">operator</span> ^ (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x * p.y - y * p.x;&#125; <span class="hljs-comment">// cross</span><br>    <br>    <span class="hljs-comment">// P rot(double ang) const &#123; // counterclockwise rotation (ang) angle</span><br>    <span class="hljs-comment">//     double cosa = cos(ang), sina = sin(ang);</span><br>    <span class="hljs-comment">//     return &#123;x * cosa - y * sina, x * sina + y * cosa&#125;;</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> == (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> z(x - p.x) &amp;&amp; z(y - p.y);&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> != (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> ! <span class="hljs-keyword">operator</span> == (p);&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> z(x - p.x) ? y &lt; p.y : x &lt; p.x;&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &gt; (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> !(*<span class="hljs-keyword">this</span> &lt; p || *<span class="hljs-keyword">this</span> == p);&#125;<br>   <br>    <span class="hljs-comment">// left(counterclockwise) = 1 | on = 0 | right(clockwise) = -1</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ori</span><span class="hljs-params">(letp &amp;p)</span> <span class="hljs-keyword">const</span> </span>&#123;T t = (*<span class="hljs-keyword">this</span>) ^ p; <span class="hljs-keyword">return</span> (t &gt; eps) - (t &lt; -eps);&#125;<br>    <span class="hljs-function">T <span class="hljs-title">norm</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> x * x + y * y;&#125;<br><br>&#125; zero;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">abs</span><span class="hljs-params">(letp &amp;p)</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(p.norm());&#125;<br><span class="hljs-function">P <span class="hljs-title">normalize</span><span class="hljs-params">(letp &amp;p)</span> </span>&#123;<span class="hljs-keyword">return</span> p / <span class="hljs-built_in">abs</span>(p);&#125;<br><span class="hljs-function">P <span class="hljs-title">perp</span><span class="hljs-params">(letp &amp;p)</span> </span>&#123;<span class="hljs-keyword">return</span> &#123;-p.y, p.x&#125;;&#125; <span class="hljs-comment">// turn pi / 2 left</span><br><span class="hljs-function">P <span class="hljs-title">perpr</span><span class="hljs-params">(letp &amp;p)</span> </span>&#123;<span class="hljs-keyword">return</span> &#123;p.y, -p.x&#125;;&#125; <span class="hljs-comment">// turn pi / 2 right</span><br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">orth</span><span class="hljs-params">(letp &amp;p, letp &amp;q)</span> </span>&#123;<span class="hljs-keyword">return</span> (p | q) == <span class="hljs-number">0</span>;&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">para</span><span class="hljs-params">(letp &amp;p, letp &amp;q)</span> </span>&#123;<span class="hljs-keyword">return</span> (p ^ q) == <span class="hljs-number">0</span>;&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Polygon</span> &#123;</span><br>    <span class="hljs-built_in">vector</span>&lt;P&gt; p; <span class="hljs-comment">// counterclockwise</span><br>    Polygon(<span class="hljs-keyword">const</span> <span class="hljs-built_in">vector</span>&lt;P&gt; p = &#123;&#125;) : p(p) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">nxt</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">size_t</span> i)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> i == p.size() - <span class="hljs-number">1</span> ? <span class="hljs-number">0</span> : i + <span class="hljs-number">1</span>;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">pre</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">size_t</span> i)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> i == <span class="hljs-number">0</span> ? p.size() - <span class="hljs-number">1</span> : i - <span class="hljs-number">1</span>;&#125;<br>    <span class="hljs-function">T <span class="hljs-title">double_area</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        T sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; p.size(); ++i) sum += (p[i] ^ p[nxt(i)]);<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">C</span> :</span> Polygon &#123;<br>    C (<span class="hljs-keyword">const</span> <span class="hljs-built_in">vector</span>&lt;P&gt; &amp;p = &#123;&#125;) : Polygon(p) &#123;&#125;<br>&#125;;<br><br><span class="hljs-function">C <span class="hljs-title">convexHull</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;P&gt; p)</span> </span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;P&gt; st;<br>    sort(p.begin(), p.end());<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> check = [](<span class="hljs-keyword">const</span> <span class="hljs-built_in">vector</span>&lt;P&gt; &amp;st, letp &amp;u) &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> back1 = st.back(), back2 = *prev(st.end(), <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">return</span> (back1 - back2).ori(u - back2) &lt;= <span class="hljs-number">0</span>;<br>    &#125;;<br>    <span class="hljs-keyword">for</span> (letp &amp;u : p) &#123;<br>        <span class="hljs-keyword">while</span> (st.size() &gt; <span class="hljs-number">1</span> &amp;&amp; check(st, u)) st.pop_back();<br>        st.push_back(u);<br>    &#125;<br>    <span class="hljs-keyword">size_t</span> k=st.size();<br>    p.pop_back(); reverse(p.begin(),p.end());<br>    <span class="hljs-keyword">for</span> (letp &amp;u : p) &#123;<br>        <span class="hljs-keyword">while</span> (st.size() &gt; k &amp;&amp; check(st, u)) st.pop_back();<br>        st.push_back(u);<br>    &#125;<br>    st.pop_back();<br>    <span class="hljs-keyword">return</span> &#123;st&#125;;<br>&#125;<br><br>C c;<br><br><span class="hljs-built_in">vector</span>&lt;P&gt; p;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    p.clear();<br>    <span class="hljs-keyword">int</span> n = rd(), q = rd(); p.resize(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;p[i].x = rd(); p[i].y = rd();&#125;<br>    c = convexHull(p);<br>    ll s = c.double_area();<br>    ll dlt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; c.p.size(); ++i) &#123;<br>        P cur = c.p[c.nxt(i)] - c.p[i];<br>        dlt += max(<span class="hljs-built_in">abs</span>(cur.x), <span class="hljs-built_in">abs</span>(cur.y));<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; ++i) &#123;<br>        ll t = rd();<br>        ll ans = s + <span class="hljs-number">4</span> * t * t + <span class="hljs-number">2</span> * t * dlt;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, ans / <span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">puts</span>((ans &amp; <span class="hljs-number">1</span>) ? <span class="hljs-string">&quot;.5&quot;</span> : <span class="hljs-string">&quot;.0&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>HDU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Geometry</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022 NowCoder Multi-University Training Contest 7</title>
    <link href="/nowcoder/2022summer-7/"/>
    <url>/nowcoder/2022summer-7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="b.-rotate-sum-3">B. Rotate Sum 3</h2><blockquote><p>给一个凸包，每次操作将凸包按某个对称轴在三维空间里旋转任意角度，求无数次操作后扫过的体积。</p></blockquote><p>如果只有一个对称轴，答案就是若干个圆台的体积之和。</p><p>如果有超过一个对称轴，由于所有对称轴都过重心，最终的旋转体会形成一个球，半径是凸包顶点和重心的最远距离。</p><p>找对称轴：将凸包展开成角度和边长的序列，然后复制一遍跑 manacher，如果某个中心的回文半径大于 2n 即为对称轴。</p><ul><li><p>构造序列：角 <span class="math inline">\(ABC\)</span> 用点积<span class="math inline">\(|BA||BC|\cos \alpha\)</span> 代替（ <spanclass="math inline">\(\cos\alpha\)</span> 可以区分 <spanclass="math inline">\([0,\pi)\)</span> 的所有角度，此外对称要求两侧边也一样长，所以不用除掉模长），边长用长度平方代替，这样就都是整数，没有精度问题了。</p></li><li><p>计数对称轴：由于一个对称轴可能会被找到两次，需要去重，因为都过重心，所以方向向量叉积不等于<span class="math inline">\(0\)</span> 即为不同。</p></li></ul><p>算体积：取直线一侧的点，按照逆时针顺序依次算。代码里偷懒，直接复制出来一遍做，一定有一段是包含完整的点集。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> T;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lett const T</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> letp const P <span class="hljs-comment">// P for point</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lets const S <span class="hljs-comment">// S for segment</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> letl const L <span class="hljs-comment">// L for line</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> letc const C <span class="hljs-comment">// C for convex</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> z(x) (abs((x)) &lt;= eps) <span class="hljs-comment">// is zero</span></span><br><br><span class="hljs-keyword">const</span> T eps = <span class="hljs-number">1e-8</span>;<br><span class="hljs-keyword">const</span> T inf = <span class="hljs-number">1e18</span>;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.1415926535897932384</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span> &#123;</span><br>    T x, y;<br>    P (T x = <span class="hljs-number">0</span>, T y = <span class="hljs-number">0</span>) : x(x), y(y) &#123;&#125;<br>    P <span class="hljs-keyword">operator</span> + (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x + p.x, y + p.y&#125;;&#125; <br>    P <span class="hljs-keyword">operator</span> - (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x - p.x, y - p.y&#125;;&#125; <br>    P <span class="hljs-keyword">operator</span> * (lett &amp;d) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x * d, y * d&#125;;&#125;<br>    P <span class="hljs-keyword">operator</span> / (lett &amp;d) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x / d, y / d&#125;;&#125;<br><br>    T <span class="hljs-keyword">operator</span> | (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x * p.x + y * p.y;&#125; <span class="hljs-comment">// dot</span><br>    T <span class="hljs-keyword">operator</span> ^ (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x * p.y - y * p.x;&#125; <span class="hljs-comment">// cross</span><br><br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> == (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> z(x - p.x) &amp;&amp; z(y - p.y);&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> != (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> ! <span class="hljs-keyword">operator</span> == (p);&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> z(x - p.x) ? y &lt; p.y : x &lt; p.x;&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &gt; (letp &amp;p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> !(*<span class="hljs-keyword">this</span> &lt; p || *<span class="hljs-keyword">this</span> == p);&#125;<br>   <br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ori</span><span class="hljs-params">(letp &amp;p)</span> <span class="hljs-keyword">const</span> </span>&#123;T t = (*<span class="hljs-keyword">this</span>) ^ p; <span class="hljs-keyword">return</span> (t &gt; eps) - (t &lt; -eps);&#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">norm</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> x * x + y * y;&#125;<br>    <span class="hljs-function">P <span class="hljs-title">proj</span> <span class="hljs-params">(letp &amp;p)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> (*<span class="hljs-keyword">this</span>) * (((*<span class="hljs-keyword">this</span>) | p) / norm());&#125;<br>    <span class="hljs-function">P <span class="hljs-title">refl</span> <span class="hljs-params">(letp &amp;p)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> proj(p) * <span class="hljs-number">2</span> - p;&#125;<br><br>&#125; zero;<br><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> <span class="hljs-title">abs</span><span class="hljs-params">(letp &amp;p)</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(p.norm());&#125;<br><span class="hljs-function">P <span class="hljs-title">normalize</span><span class="hljs-params">(letp &amp;p)</span> </span>&#123;<span class="hljs-keyword">return</span> p / <span class="hljs-built_in">abs</span>(p);&#125;<br><span class="hljs-function">P <span class="hljs-title">perp</span><span class="hljs-params">(letp &amp;p)</span> </span>&#123;<span class="hljs-keyword">return</span> &#123;-p.y, p.x&#125;;&#125; <span class="hljs-comment">// turn pi / 2 left</span><br><span class="hljs-function">P <span class="hljs-title">perpr</span><span class="hljs-params">(letp &amp;p)</span> </span>&#123;<span class="hljs-keyword">return</span> &#123;p.y, -p.x&#125;;&#125; <span class="hljs-comment">// turn pi / 2 right</span><br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">orth</span><span class="hljs-params">(letp &amp;p, letp &amp;q)</span> </span>&#123;<span class="hljs-keyword">return</span> (p | q) == <span class="hljs-number">0</span>;&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">para</span><span class="hljs-params">(letp &amp;p, letp &amp;q)</span> </span>&#123;<span class="hljs-keyword">return</span> (p ^ q) == <span class="hljs-number">0</span>;&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">L</span> &#123;</span><br>    P p, v; <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ori</span> <span class="hljs-params">(letp &amp;a)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> v.ori(a - p);&#125; <br>    <span class="hljs-function">P <span class="hljs-title">inter</span><span class="hljs-params">(letl &amp;l)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> p + v * ((l.v ^ (p - l.p)) / (v ^ l.v));&#125; <br>    <span class="hljs-function">L <span class="hljs-title">shift</span><span class="hljs-params">(letp &amp;d)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> &#123;p + d, v&#125;;&#125;<br>    <span class="hljs-function">L <span class="hljs-title">shiftl</span><span class="hljs-params">(<span class="hljs-keyword">double</span> d)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> &#123;p + perp(v) * d / <span class="hljs-built_in">abs</span>(v), v&#125;;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> <span class="hljs-title">dis</span><span class="hljs-params">(letp &amp;a)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(v ^ (a - p)) / <span class="hljs-built_in">abs</span>(v);&#125; <br>&#125;;<br><br><span class="hljs-built_in">vector</span>&lt;P&gt; c;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 400007</span><br><br><span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> a[N];<br><br><span class="hljs-keyword">int</span> p[N];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pre(x) (x == 0 ? n - 1 : x - 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nxt(x) (x == n - 1 ? 0 : x + 1)</span><br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> r, <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> R, <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> h)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / <span class="hljs-number">3.0</span> * pi * h * (r * r + R * R + r * R);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    P cent; cent.x = cent.y = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> x = rd(), y = rd(); <br>        cent.x += x; cent.y += y;<br>        c.pb(&#123;x, y&#125;);<br>    &#125;<br>    cent = cent / n;<br>    <span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        a[++tot] = ((c[pre(i)] - c[i]) | (c[nxt(i)] - c[i]));<br>        a[++tot] = (c[nxt(i)] - c[i]).norm();<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span> * n; ++i) a[i] = a[i - <span class="hljs-number">2</span> * n];<br>    tot = <span class="hljs-number">4</span> * n;<br>    <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>, R = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; R) p[i] = min(p[(pos &lt;&lt; <span class="hljs-number">1</span>) - i], R - i);<br>        <span class="hljs-keyword">else</span> p[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span> &lt;= i - p[i] &amp;&amp; i + p[i] &lt;= tot &amp;&amp; z(a[i - p[i]] - a[i + p[i]])) ++p[i];<br>        <span class="hljs-keyword">if</span> (i + p[i] &gt; R) pos = i, R = i + p[i];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * p[i] - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">2</span> * n) s.pb(i);<br>    &#125;  <br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> d = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) d = max(d, <span class="hljs-built_in">abs</span>(cent - c[i]));<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ball = <span class="hljs-number">4.0</span> / <span class="hljs-number">3.0</span> * pi * d * d * d;<br>    <span class="hljs-keyword">bool</span> fl = <span class="hljs-number">0</span>;<br>    P dir;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : s) &#123;<br>        <span class="hljs-keyword">if</span> (i &amp; <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// node</span><br>            <span class="hljs-keyword">int</span> cur = i / <span class="hljs-number">2</span>;<br>            P dr = c[cur] - cent;<br>            <span class="hljs-keyword">if</span> (!fl) &#123;dir = dr; fl = <span class="hljs-number">1</span>;&#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (!z(dir ^ dr)) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.12Lf\n&quot;</span>, ball); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> cur = i / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>            P ct = (c[cur] + c[nxt(cur)]) / <span class="hljs-number">2</span>;<br>            P dr = ct - cent;<br>            <span class="hljs-keyword">if</span> (!fl) &#123;dir = dr; fl = <span class="hljs-number">1</span>;&#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (!z(dir ^ dr)) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.12Lf\n&quot;</span>, ball); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!fl) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    L l&#123;cent, dir&#125;;<br>    fl = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) c.pb(c[i]);<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ans = <span class="hljs-number">0</span>, tmp = <span class="hljs-number">0</span>;<br>    P lstp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> nw : c) &#123;<br>        <span class="hljs-keyword">if</span> (l.ori(nw) &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (fl) &#123;<br>                tmp += v(l.dis(lstp), l.dis(nw), <span class="hljs-built_in">fabs</span>(((lstp - nw) | l.v) / <span class="hljs-built_in">abs</span>(l.v)));<br>            &#125;<br>            fl = <span class="hljs-number">1</span>; lstp = nw;<br>        &#125; <span class="hljs-keyword">else</span> &#123;ans = max(ans, tmp); fl = <span class="hljs-number">0</span>; tmp = <span class="hljs-number">0</span>;&#125;<br>    &#125;<br>    ans = max(ans, tmp);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.12Lf\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>一道类似的多边形找对称轴题：<a href="https://loj.ac/p/2651">[POI2007] Axes of Symmetry</a></p><h2 id="f.-candies">F. Candies</h2><blockquote><p><span class="math inline">\(n\)</span>个数字形成一个环，每次可以删掉两个相邻的相同或和为 <spanclass="math inline">\(a\)</span> 的两个数字，问最多能删几次。</p></blockquote><p>每次暴力找到一个位置删除即可。证明比较巧妙：</p><p>对于所有的 <span class="math inline">\(x\in [a / 2, a]\)</span> 将<span class="math inline">\(x\)</span> 变为 <spanclass="math inline">\(a-x\)</span>，可以发现原本允许消除的数对现在依然允许消除。</p><p>因此只剩下相邻且相同的数字才可以消除，此时贪心显然是对的，删除顺序不会改变答案大小。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), a = rd(), ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        s.push_back(rd());<br>        <span class="hljs-keyword">while</span> (s.size() &gt;= <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">int</span> x = s[s.size() - <span class="hljs-number">1</span>], y = s[s.size() - <span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">if</span> (x != y &amp;&amp; x + y != a) <span class="hljs-keyword">break</span>;<br>            ++ans; s.pop_back(); s.pop_back();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (s.size() &gt;= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">if</span> (s.front() == s.back() || s.front() + s.back() == a) &#123;<br>            ++ans; s.pop_front(); s.pop_back();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="k.-great-party">K. Great Party</h2><blockquote><p>有 <span class="math inline">\(n\)</span> 堆石子，每堆 <spanclass="math inline">\(a_i\)</span>个，每次选一堆拿走若干个，剩余的可以选择合并到某一堆现存的中。</p><p>每次询问一个区间，问有多少个子区间先手必胜。</p></blockquote><p>少见的做出来的博弈题，按堆数从小到大考虑。</p><p>只有一堆，必胜；只有两堆，如果一样的话，因为不敢合并，所以可以对称操作，必败，否则必胜；三堆的必胜，因为可以通过拿+合并变成两堆一样多的；四堆的情况谁拿成三堆就输，因为三堆必胜，所以四堆的时候可以看成是<span class="math inline">\(a_i-1\)</span> 的 NIM 游戏，因为都拿到 <spanclass="math inline">\(1\)</span>就不得不合并了。五堆的时候一定可以对最大的操作使得变成四堆且 NIM 和为<span class="math inline">\(0\)</span> 。因此：</p><ul><li><p>偶数个即为 <span class="math inline">\(a_i - 1\)</span> 的 NIM游戏，因为转换成奇数的那个人必败。</p></li><li><p>奇数先手必胜，先手对最大那堆石子操作，使得剩偶数个且石子个数减一的异或和为0的局面。</p></li></ul><p>所以变成了查询区间内有多少个偶数长度的子区间异或和为 <spanclass="math inline">\(0\)</span>，莫队分奇偶统计即可。（让胖胖写的）</p><h2 id="l.-maximum-range">L. Maximum Range</h2>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Nowcoder</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Geometry</tag>
      
      <tag>Constructive Algorithm</tag>
      
      <tag>Game Theory</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022 NowCoder Multi-University Training Contest 3</title>
    <link href="/nowcoder/2022summer-3/"/>
    <url>/nowcoder/2022summer-3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="a.-ancestor">A. Ancestor</h2><blockquote><p>给两棵 <span class="math inline">\(n\)</span> 个节点的树 <spanclass="math inline">\(A,B\)</span> 和一个数集 <spanclass="math inline">\(S\)</span> ，问有多少个数满足 <spanclass="math inline">\(\{S\setminus a_i\}\)</span> 在 <spanclass="math inline">\(A\)</span> 中的 LCA 的点权比 <spanclass="math inline">\(B\)</span> 中的大。</p></blockquote><p><span class="math inline">\(\mathcal O(n\log n)\)</span>的做法是暴力求出来给定节点序列在两棵树中前后缀的 LCA，最后每个合并一下两侧即可。</p><p>有一个比较妙的 <span class="math inline">\(\mathcal O(n)\)</span>做法：考虑哪些点会作为 <span class="math inline">\(|S|-1\)</span> 个点的LCA 。</p><p>我们将数集里每个点的点权设为 <span class="math inline">\(1\)</span>，至多存在一个点 <span class="math inline">\(u\)</span> ，满足 <spanclass="math inline">\(u\)</span> 子树和为 <spanclass="math inline">\(|S|-1\)</span> 且深度最深。</p><ul><li>如果删掉的是这 <span class="math inline">\(|S|-1\)</span>个点中的某一个，剩余的点的 LCA 就是 <spanclass="math inline">\(S\)</span> 中所有点的 LCA 。</li><li>否则剩余的点就是这 <span class="math inline">\(|S| -1\)</span>个点，答案就是 <span class="math inline">\(u\)</span></li></ul><p>如果不存在这样的 <span class="math inline">\(u\)</span>，那么答案永远都是 <span class="math inline">\(S\)</span> 中所有点的 LCA。</p><p>综上可以发现，删掉某个点之后剩余点的 LCA可能的结果至多两种，因此可以一遍 DFS 之后 <spanclass="math inline">\(\mathcal O(1)\)</span> 查询。</p><p>特殊情况是 <span class="math inline">\(k=2\)</span> 的时候 <spanclass="math inline">\(u\)</span> 会有两个，所以单独判一下。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = (x); i &lt;= (y); ++i)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, x, y) for (int i = (x); i &gt;= (y); --i)</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br><span class="hljs-keyword">int</span> n, k, tot, x[N];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tree</span> &#123;</span><br>    <span class="hljs-keyword">int</span> lca, sub, cur;<br>    <span class="hljs-keyword">int</span> sz[N], sum[N], val[N];<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; son[N];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) dfs(v); <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : son[u]) &#123;sz[u] += sz[v]; sum[u] ^= sum[v];&#125;<br>        <span class="hljs-keyword">if</span> (!lca &amp;&amp; sz[u] == k) lca = u;<br>        <span class="hljs-keyword">if</span> (!sub &amp;&amp; sz[u] == k - <span class="hljs-number">1</span>) &#123;sub = u; cur = sum[u] ^ tot;&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<span class="hljs-keyword">return</span> u == cur ? val[sub] : val[lca];&#125;<br>&#125; tr[<span class="hljs-number">2</span>];<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = rd(); k = rd();<br>    rep(i, <span class="hljs-number">1</span>, k) tot ^= (x[i] = rd());<br>    rep(id, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>) &#123;<br>        rep(i, <span class="hljs-number">1</span>, n) tr[id].val[i] = rd();<br>        rep(i, <span class="hljs-number">2</span>, n) tr[id].son[rd()].pb(i);<br>        rep(i, <span class="hljs-number">1</span>, k) &#123;++tr[id].sz[x[i]]; tr[id].sum[x[i]] ^= x[i];&#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">2</span>) &#123;<br>        rep(id, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>) tr[id].dfs(<span class="hljs-number">1</span>); <br>        rep(i, <span class="hljs-number">1</span>, k) ans += tr[<span class="hljs-number">0</span>].query(x[i]) &gt; tr[<span class="hljs-number">1</span>].query(x[i]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        rep(i, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>) ans += (tr[<span class="hljs-number">0</span>].val[x[i]] &gt; tr[<span class="hljs-number">1</span>].val[x[i]]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="b.-boss">B. Boss</h2><blockquote><p>有 <span class="math inline">\(n\)</span> 个员工要派到 <spanclass="math inline">\(m\)</span> 个城市, 每个城市需要 <spanclass="math inline">\(a_{i}\)</span> 个员工，且 <spanclass="math inline">\(\sum_{i=1}^{m} a_{i}=n\ (n \leq 10^{5}, m \leq10)\)</span>, 求最小费用。</p></blockquote><p>（借鉴<ahref="https://hydro.ac/blog/7276/62e9cf41fe2b11dfe816cac4#1659490113017">柴老师博客</a>）</p><p>最小费用流模版题，但是直接跑费用流复杂度不对，要根据图的性质优化求最短路的算法。</p><p>左边是城市, 右边是员工, 每次找一条最短路, 必然是先走到左边的点,再经过若干次反悔, 最后走到右边的点。</p><p>一次反悔, 指先从左边走到右边, 再从右边走到左边，也就是 <spanclass="math inline">\(dis_{u,x}+dis_{x,v}\)</span> 。</p><p>所以路径可以拆成两部分：在左侧从 <spanclass="math inline">\(u\)</span> 开始经过若干次到 <spanclass="math inline">\(v\)</span> ，然后从 <spanclass="math inline">\(v\)</span> 选择右侧一个可以走的点走掉。</p><ul><li>对于左侧的点之间维护 <span class="math inline">\(m^2\)</span>个堆代表当前从 <span class="math inline">\(u\)</span> 经过一次反悔到<span class="math inline">\(v\)</span>的最短距离，每次增广用堆顶的直跑一遍 floyd 。</li><li>对于每个左侧的点维护一个堆代表到右侧所有可行的距离里最短的，第二部分的距离就是堆顶的值。</li></ul><p>求最短路就枚举所有的可能的 <span class="math inline">\(u,v\)</span>，因此单次增光复杂度为 <span class="math inline">\(\mathcal O(m^2\logn+m^3)\)</span> ，一共增广 <span class="math inline">\(n\)</span>次。</p><p>第一部分的堆维护的时候要考虑退流，求途径的节点需要再floyd的时候记一个 pre ，然后 dfs 往回找，细节见代码。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> K 11</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br><span class="hljs-keyword">bool</span> use[N];<br>ll ans;<br><span class="hljs-keyword">int</span> rem[K], dis[K][K], pre[K][K], mn[K][K];<br><span class="hljs-keyword">int</span> c[K][N], n, k;<br><span class="hljs-keyword">bool</span> go[K][N], back[N][K];<br><span class="hljs-keyword">bool</span> vis[K][K][N];<br><br><span class="hljs-built_in">priority_queue</span>&lt;pii, <span class="hljs-built_in">vector</span>&lt;pii&gt;, greater&lt;pii&gt; &gt; q[K][K], p[K];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!pre[u][v]) &#123;<br>        go[u][mn[u][v]] = back[mn[u][v]][v] = <span class="hljs-literal">false</span>;<br>        back[mn[u][v]][u] = go[v][mn[u][v]] = <span class="hljs-literal">true</span>;<br>        s.pb(mn[u][v]); <br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    dfs(u, pre[u][v]); dfs(pre[u][v], v);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(dis));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= k; ++u) &#123;<br>        dis[u][u] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!p[u].empty() &amp;&amp; use[p[u].top().second]) p[u].pop();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v = <span class="hljs-number">1</span>; v &lt;= k; ++v) &#123;<br>            <span class="hljs-keyword">while</span> (!q[u][v].empty()) &#123;<br>                <span class="hljs-keyword">int</span> x = q[u][v].top().second;<br>                <span class="hljs-keyword">if</span> (!go[u][x] || !back[x][v]) &#123;vis[u][v][x] = <span class="hljs-literal">false</span>; q[u][v].pop();&#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (q[u][v].size()) &#123;<br>                dis[u][v] = q[u][v].top().first;<br>                mn[u][v] = q[u][v].top().second;<br>                pre[u][v] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = <span class="hljs-number">1</span>; t &lt;= k; ++t)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= k; ++u)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v = <span class="hljs-number">1</span>; v &lt;= k; ++v) <br>                <span class="hljs-keyword">if</span> (dis[u][v] &gt; dis[u][t] + dis[t][v]) &#123;<br>                    pre[u][v] = t;<br>                    dis[u][v] = dis[u][t] + dis[t][v];<br>                &#125;<br>    <span class="hljs-keyword">int</span> mnu, mnv, cst = <span class="hljs-number">1e9</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= k; ++u)<br>        <span class="hljs-keyword">if</span> (rem[u])<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v = <span class="hljs-number">1</span>; v &lt;= k; ++v) &#123;<br>                <span class="hljs-keyword">int</span> nw = dis[u][v] + p[v].top().first;<br>                <span class="hljs-keyword">if</span> (nw &lt; cst) &#123;cst = nw; mnu = u; mnv = v;&#125;<br>            &#125;<br>    ans += cst; --rem[mnu];<br>    s.clear();<br>    <span class="hljs-keyword">if</span> (mnu != mnv) dfs(mnu, mnv);<br>    s.pb(p[mnv].top().second);<br>    go[mnv][p[mnv].top().second] = <span class="hljs-literal">false</span>;<br>    back[p[mnv].top().second][mnv] = <span class="hljs-literal">true</span>;<br>    use[p[mnv].top().second] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> t : s) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= k; ++u) <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v = <span class="hljs-number">1</span>; v &lt;= k; ++v) <br>                <span class="hljs-keyword">if</span> (go[u][t] &amp;&amp; back[t][v] &amp;&amp; !vis[u][v][t]) &#123;<br>                    vis[u][v][t] = <span class="hljs-literal">true</span>; q[u][v].push(mp(c[u][t] - c[v][t], t));<br>                &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = rd(); k = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i) rem[i] = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= k; ++j) &#123;<br>            c[j][i] = rd(); go[j][i] = <span class="hljs-literal">true</span>;<br>            p[j].push(mp(c[j][i], i)); <br>        &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) work();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="d.-directed">D. Directed</h2><p><ahref="https://zigzagk.top/2022/07/26/nowcoder2022acm3D">胖胖补的，戳我围观</a></p><h2 id="f.-fief">F. Fief</h2><blockquote><p>无向图每次询问两个点 <span class="math inline">\(x,y\)</span>，问是否存在一个点编号的排列以 <span class="math inline">\(x\)</span>开头以 <span class="math inline">\(y\)</span>结尾，且任意位置断开得到的两段都连通。</p></blockquote><p>这个问题的学名叫 “双极定向”，存一篇博客 <ahref="https://zx2003.blog.uoj.ac/blog/7299">浅谈双极定向及其应用 -zx2003</a></p><p>最后我们得出的结论是图必须联通，圆方树上的方点必须成一条链，询问的点不能是割点。</p><p>此外 <span class="math inline">\(n=2\)</span>的时候图不连通也是正确的，实在太细节了。让胖胖去写的，回头补完再贴代码。</p><h2 id="g.-geometry">G. Geometry</h2><blockquote><p>给两个不交的凸包 <span class="math inline">\(A,B\)</span>，每个凸包有个速度向量 <span class="math inline">\(v\)</span>，问两凸包碰撞的时间。</p></blockquote><p>首先运动是相对的，所以可以固定凸包 <spanclass="math inline">\(A\)</span> ，凸包 <spanclass="math inline">\(B\)</span> 的速度向量变为 <spanclass="math inline">\(v_B - v_A\)</span> 。</p><p>接下来就是套路题，同 [JSOI 2018] 战争，找一条射线与 <spanclass="math inline">\(A+(-B)\)</span>的交点，然后计算到交点的时刻即可。</p><p>因为只询问一次，所以枚举闵可夫斯基和上的每一条边直接和射线求交更新，其实可以优化到<span class="math inline">\(\mathcal O(\log n)\)</span> 查询。</p><p>因为数据范围有 <span class="math inline">\(10^9\)</span>，所以点积叉积的范围有 <span class="math inline">\(10^{18}\)</span>，直接判断交点是否在线段上可能会出一些问题。</p><p>一个判断阶段无精度误差的方法：分成端点在射线上、端点在射线两侧两种情况更新答案。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = (x); i &lt;= (y); ++i)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i, x, y) for (int i = (x); i &gt;= (y); --i)</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">double</span> T;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lett const T&amp;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> letp const P&amp; <span class="hljs-comment">// P for point</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lets const S&amp; <span class="hljs-comment">// S for segment</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> letl const L&amp; <span class="hljs-comment">// L for line</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> letc const C&amp; <span class="hljs-comment">// C for convex</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> z(x) (abs((x)) &lt;= eps) <span class="hljs-comment">// is zero</span></span><br><br><span class="hljs-keyword">const</span> T eps = <span class="hljs-number">1e-8</span>;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> PI=<span class="hljs-number">3.1415926535897932384</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span> &#123;</span><br>    T x, y;<br>    P (T x = <span class="hljs-number">0</span>, T y = <span class="hljs-number">0</span>) : x(x), y(y) &#123;&#125;<br>    P <span class="hljs-keyword">operator</span> + (letp p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x + p.x, y + p.y&#125;;&#125; <br>    P <span class="hljs-keyword">operator</span> - (letp p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x - p.x, y - p.y&#125;;&#125; <br>    P <span class="hljs-keyword">operator</span> * (lett d) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x * d, y * d&#125;;&#125;<br>    P <span class="hljs-keyword">operator</span> / (lett d) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> &#123;x / d, y / d&#125;;&#125;<br><br>    T <span class="hljs-keyword">operator</span> | (letp p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x * p.x + y * p.y;&#125; <span class="hljs-comment">// dot</span><br>    T <span class="hljs-keyword">operator</span> ^ (letp p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x * p.y - y * p.x;&#125; <span class="hljs-comment">// cross</span><br>    <br>    <span class="hljs-function">P <span class="hljs-title">rot</span><span class="hljs-params">(<span class="hljs-keyword">double</span> ang)</span> <span class="hljs-keyword">const</span> </span>&#123; <span class="hljs-comment">// rotation (ang) angle, need T = double</span><br>        <span class="hljs-keyword">double</span> cosa = <span class="hljs-built_in">cos</span>(ang), sina = <span class="hljs-built_in">sin</span>(ang);<br>        <span class="hljs-keyword">return</span> &#123;x * cosa - y * sina, x * sina + y * cosa&#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> == (letp p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> z(x - p.x) &amp;&amp; z(y - p.y);&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> != (letp p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> ! <span class="hljs-keyword">operator</span> == (p);&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (letp p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> z(x - p.x) ? y &lt; p.y : x &lt; p.x;&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &gt; (letp p) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> !(*<span class="hljs-keyword">this</span> &lt; p || *<span class="hljs-keyword">this</span> == p);&#125;<br>   <br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ori</span><span class="hljs-params">(letp p)</span> <span class="hljs-keyword">const</span> </span>&#123;T t = (*<span class="hljs-keyword">this</span>) ^ p; <span class="hljs-keyword">return</span> (t &gt; eps) - (t &lt; -eps);&#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">norm</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> x * x + y * y;&#125;<br>    <span class="hljs-function">P <span class="hljs-title">proj</span> <span class="hljs-params">(letp p)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> (*<span class="hljs-keyword">this</span>) * (((*<span class="hljs-keyword">this</span>) | p) / norm());&#125;<br>    <span class="hljs-function">P <span class="hljs-title">refl</span> <span class="hljs-params">(letp p)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> proj(p) * <span class="hljs-number">2</span> - p;&#125;<br><br>&#125; zero;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">abs</span><span class="hljs-params">(letp p)</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(p.norm());&#125;<br><span class="hljs-function">P <span class="hljs-title">normalize</span><span class="hljs-params">(letp p)</span> </span>&#123;<span class="hljs-keyword">return</span> p / <span class="hljs-built_in">abs</span>(p);&#125;<br><span class="hljs-function">P <span class="hljs-title">perp</span><span class="hljs-params">(letp p)</span> </span>&#123;<span class="hljs-keyword">return</span> &#123;-p.y, p.x&#125;;&#125; <span class="hljs-comment">// turn pi / 2 left</span><br><span class="hljs-function">P <span class="hljs-title">perpr</span><span class="hljs-params">(letp p)</span> </span>&#123;<span class="hljs-keyword">return</span> &#123;p.y, -p.x&#125;;&#125; <span class="hljs-comment">// turn pi / 2 right</span><br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">orth</span><span class="hljs-params">(letp p, letp q)</span> </span>&#123;<span class="hljs-keyword">return</span> (p | q) == <span class="hljs-number">0</span>;&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">para</span><span class="hljs-params">(letp p, letp q)</span> </span>&#123;<span class="hljs-keyword">return</span> (p ^ q) == <span class="hljs-number">0</span>;&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">argcmp</span> &#123;</span> <span class="hljs-comment">// compared by polar angle</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(letp a, letp b)</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> quad = [](letp a) &#123;<br>            <span class="hljs-keyword">if</span> (a.y &lt; -eps) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// halfplane with negative y</span><br>            <span class="hljs-keyword">if</span> (a.y &gt; eps) <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;  <span class="hljs-comment">// halfplane with positive y</span><br>            <span class="hljs-keyword">if</span> (a.x &lt; -eps) <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>; <span class="hljs-comment">// negative x-axis</span><br>            <span class="hljs-keyword">if</span> (a.x &gt; eps) <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;  <span class="hljs-comment">// positive x-axis</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>; <span class="hljs-comment">// origin</span><br>        &#125;;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> qa = quad(a), qb = quad(b);<br>        <span class="hljs-keyword">if</span> (qa != qb) <span class="hljs-keyword">return</span> qa &lt; qb; <br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> t = a ^ b; <span class="hljs-comment">//in the same quad</span><br>        <span class="hljs-comment">// sorted by length in increasing order when parallel</span><br>        <span class="hljs-comment">// if (z(t)) return norm(a) &lt; norm(b) - eps; </span><br>        <span class="hljs-keyword">return</span> t &gt; eps;<br>    &#125;    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">L</span> &#123;</span><br>    P p, v; <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ori</span> <span class="hljs-params">(letp a)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> v.ori(a - p);&#125; <br>    <span class="hljs-function">P <span class="hljs-title">inter</span><span class="hljs-params">(letl l)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> p + v * ((l.v ^ (p - l.p)) / (v ^ l.v));&#125; <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span> &#123;</span><br>    P a, b;<br><br>    <span class="hljs-comment">// on = -1 | out = 0 | in = 1</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">is_on</span><span class="hljs-params">(letp p)</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (p == a || p == b) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">return</span> (p - a).ori(p - b) == <span class="hljs-number">0</span> &amp;&amp; ((p - a) | (p - b)) &lt; -eps;<br>    &#125;<br><br>    <span class="hljs-comment">// cross on endpoints = -1 | not inter = 0 | inside = 1</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">is_inter</span><span class="hljs-params">(lets s)</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (is_on(s.a) || is_on(s.b) || s.is_on(a) || s.is_on(b)) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        letl l&#123;a, b - a&#125;, ls&#123;s.a,s.b - s.a&#125;;<br>        <span class="hljs-keyword">return</span> l.ori(s.a) * l.ori(s.b) == <span class="hljs-number">-1</span> &amp;&amp; ls.ori(a) * ls.ori(b) == <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Polygon</span> &#123;</span><br>    <span class="hljs-built_in">vector</span>&lt;P&gt; p; <span class="hljs-comment">// counterclockwise</span><br>    Polygon(<span class="hljs-keyword">const</span> <span class="hljs-built_in">vector</span>&lt;P&gt; p = &#123;&#125;) : p(p) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">nxt</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">size_t</span> i)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> i == p.size() - <span class="hljs-number">1</span> ? <span class="hljs-number">0</span> : i + <span class="hljs-number">1</span>;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">pre</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">size_t</span> i)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> i == <span class="hljs-number">0</span> ? p.size() - <span class="hljs-number">1</span> : i - <span class="hljs-number">1</span>;&#125;<br> <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">C</span> :</span> Polygon &#123;<br>    C (<span class="hljs-keyword">const</span> <span class="hljs-built_in">vector</span>&lt;P&gt; &amp;p = &#123;&#125;) : Polygon(p) &#123;&#125;<br>    C <span class="hljs-keyword">operator</span> + (letc c) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> &amp;p = <span class="hljs-keyword">this</span> -&gt; p;<br>        vector&lt;S&gt; e1(p.size()), e2(c.p.size());<br>        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;S&gt; <span class="hljs-title">edge</span><span class="hljs-params">(p.size() + c.p.size())</span></span>;<br>        <span class="hljs-built_in">vector</span>&lt;P&gt; res; res.reserve(p.size() + c.p.size());<br>        <br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> cmp = [](lets u, lets v) &#123;<br>            <span class="hljs-keyword">return</span> argcmp()(u.b - u.a, v.b - v.a);<br>        &#125;;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; p.size(); ++i) e1[i] = &#123;p[i], p[<span class="hljs-keyword">this</span> -&gt; nxt(i)]&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; c.p.size(); ++i) e2[i] = &#123;c.p[i], c.p[c.nxt(i)]&#125;;<br>        rotate(e1.begin(), min_element(e1.begin(), e1.end(), cmp), e1.end());<br>        rotate(e2.begin(), min_element(e2.begin(), e2.end(), cmp), e2.end());<br>        merge(e1.begin(), e1.end(), e2.begin(), e2.end(), edge.begin(), cmp);<br><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> check = [](<span class="hljs-keyword">const</span> <span class="hljs-built_in">vector</span>&lt;P&gt; &amp;res, letp u) &#123;<br>            <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> b1 = res.back(), b2 = *prev(res.end(), <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">return</span> (b1 - b2).ori(u - b1) == <span class="hljs-number">0</span> &amp;&amp; ((b1 - b2) | (u - b1)) &gt;= -eps;<br>        &#125;;<br>        <br>        <span class="hljs-keyword">auto</span> u = e1[<span class="hljs-number">0</span>].a + e2[<span class="hljs-number">0</span>].a;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> &amp;v : edge) &#123;<br>            <span class="hljs-keyword">while</span> (res.size() &gt; <span class="hljs-number">1</span> &amp;&amp; check(res, u)) res.pop_back();<br>            res.push_back(u); u = u + v.b - v.a;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (res.size() &gt; <span class="hljs-number">1</span> &amp;&amp; check(res, res[<span class="hljs-number">0</span>])) res.pop_back();<br>        <span class="hljs-keyword">return</span> &#123;res&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">// O(log n) : on = -1 | out = 0 | in = 1</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">is_in</span><span class="hljs-params">(letp a)</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> &amp;p = <span class="hljs-keyword">this</span> -&gt; p;<br>        <span class="hljs-keyword">if</span> (p.size() == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> a == p[<span class="hljs-number">0</span>] ? <span class="hljs-number">-1</span> : <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (p.size() == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> S&#123;p[<span class="hljs-number">0</span>], p[<span class="hljs-number">1</span>]&#125;.is_on(a) ? <span class="hljs-number">-1</span> : <span class="hljs-number">0</span>; <br>        <span class="hljs-keyword">if</span> (a == p[<span class="hljs-number">0</span>]) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span> ((p[<span class="hljs-number">1</span>] - p[<span class="hljs-number">0</span>]).ori(a - p[<span class="hljs-number">0</span>]) == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> ((p.back() - p[<span class="hljs-number">0</span>]).ori(a - p[<span class="hljs-number">0</span>]) == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> cmp = [&amp;](letp u, letp v) &#123;<span class="hljs-keyword">return</span> (u - p[<span class="hljs-number">0</span>]).ori(v - p[<span class="hljs-number">0</span>]) == <span class="hljs-number">1</span>;&#125;;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">size_t</span> i = lower_bound(p.begin() + <span class="hljs-number">1</span>, p.end(), a, cmp) - p.begin();<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> S&#123;p[<span class="hljs-number">0</span>], p[i]&#125;.is_on(a) ? <span class="hljs-number">-1</span> : <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (i == p.size() - <span class="hljs-number">1</span> &amp;&amp; S&#123;p[<span class="hljs-number">0</span>], p[i]&#125;.is_on(a)) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span> (S&#123;p[i - <span class="hljs-number">1</span>], p[i]&#125;.is_on(a)) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">return</span> (p[i] - p[i<span class="hljs-number">-1</span>]).ori(a - p[i - <span class="hljs-number">1</span>]) &gt; <span class="hljs-number">0</span>;<br>    &#125;<br><br>&#125; c, c_;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(); c.p.resize(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        T x = rd(), y = rd();<br>        c.p[i] = &#123;x, y&#125;;<br>    &#125;<br>    n = rd(); c_.p.resize(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        T x = -rd(), y = -rd();<br>        c_.p[i] = &#123;x, y&#125;;<br>    &#125;<br>    c = c + c_; <br>    P v;<br>    v.x = -rd(); v.y = -rd(); v.x += rd(); v.y += rd();<br>    <span class="hljs-keyword">if</span> (c.is_in(zero)) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-keyword">if</span> (v == zero) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    L l&#123;zero, v&#125;;<br>    <span class="hljs-keyword">double</span> ans = <span class="hljs-number">1e20</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; c.p.size(); ++i)  &#123;<br>        <span class="hljs-keyword">const</span> P a = c.p[i], b = c.p[c.nxt(i)];<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> oa = v.ori(a), ob = v.ori(b);<br>        <span class="hljs-keyword">if</span> (oa == <span class="hljs-number">0</span> &amp;&amp; (a | v) &gt; eps) ans = min(ans, <span class="hljs-built_in">abs</span>(a) / <span class="hljs-built_in">abs</span>(v));<br>        <span class="hljs-keyword">if</span> (ob == <span class="hljs-number">0</span> &amp;&amp; (b | v) &gt; eps) ans = min(ans, <span class="hljs-built_in">abs</span>(b) / <span class="hljs-built_in">abs</span>(v));<br>        <span class="hljs-keyword">if</span> (oa != <span class="hljs-number">0</span> &amp;&amp; ob != <span class="hljs-number">0</span> &amp;&amp; oa != ob) &#123;<br>            P p = l.inter(L&#123;a, b - a&#125;);<br>            <span class="hljs-keyword">if</span> ((p | v) &gt; eps) ans = min(ans, <span class="hljs-built_in">abs</span>(p) / <span class="hljs-built_in">abs</span>(v));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ans &lt; <span class="hljs-number">1e20</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10lf\n&quot;</span>, ans);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="j.-journey">J. Journey</h2><blockquote><p>有 <span class="math inline">\(n\)</span>个四通路口连接若干条双向道路（视为两条），每次到路口右转无代价，其他方向代价都是<span class="math inline">\(1\)</span> 。</p><p>问从 <span class="math inline">\(s_1\)</span> 到 <spanclass="math inline">\(s_2\)</span> 的路出发，到 <spanclass="math inline">\(t_1\)</span> 到 <spanclass="math inline">\(t_2\)</span> 的路的最小代价。</p></blockquote><p>以每条路（单向）为点建图，01-BFS 即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 2000007</span><br><br><span class="hljs-built_in">unordered_map</span>&lt;ll, <span class="hljs-keyword">int</span>&gt; f;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">ha</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1l</span>l * u * <span class="hljs-number">1e9</span> + v;&#125;<br><br><span class="hljs-keyword">int</span> tot, dis[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e0[N], e1[N];<br><br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(dis));  <br>    dis[s] = <span class="hljs-number">0</span>; q.push_back(s);  <br>    <span class="hljs-keyword">while</span> (!q.empty()) &#123;  <br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop_front();  <br>        <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">continue</span>; vis[u] = <span class="hljs-number">1</span>;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e0[u])<br>            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u]) &#123;<br>                dis[v] = dis[u]; q.push_front(v);<br>            &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e1[u])<br>            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + <span class="hljs-number">1</span>) &#123;<br>                dis[v] = dis[u] + <span class="hljs-number">1</span>; q.push_back(v);<br>            &#125;<br>    &#125;  <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> c[<span class="hljs-number">4</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; ++j) &#123;<br>            c[j] = rd();<br>            <span class="hljs-keyword">if</span> (!c[j]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (!f[ha(i, c[j])]) f[ha(i, c[j])] = ++tot;<br>            <span class="hljs-keyword">if</span> (!f[ha(c[j], i)]) f[ha(c[j], i)] = ++tot;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; ++j) <br>            <span class="hljs-keyword">if</span> (c[j]) &#123;<br>                <span class="hljs-keyword">if</span> (c[(j + <span class="hljs-number">1</span>) % <span class="hljs-number">4</span>]) e0[f[ha(c[j], i)]].push_back(f[ha(i, c[(j + <span class="hljs-number">1</span>) % <span class="hljs-number">4</span>])]);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> w = <span class="hljs-number">2</span>; w &lt;= <span class="hljs-number">4</span>; ++w) &#123;<br>                    <span class="hljs-keyword">int</span> t = (j + w) % <span class="hljs-number">4</span>;<br>                    <span class="hljs-keyword">if</span> (c[t]) e1[f[ha(c[j], i)]].push_back(f[ha(i, c[t])]);<br>                &#125;<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> x = rd(), y = rd();<br>    <span class="hljs-keyword">if</span> (!f[ha(x, y)]) f[ha(x, y)] = ++tot;<br>    <span class="hljs-keyword">int</span> u = f[ha(x, y)]; x = rd(), y = rd();<br>    <span class="hljs-keyword">if</span> (!f[ha(x, y)]) f[ha(x, y)] = ++tot;<br>    <span class="hljs-keyword">int</span> v = f[ha(x, y)];<br>    bfs(u);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dis[v] &gt;= <span class="hljs-number">1e9</span> ? <span class="hljs-number">-1</span> : dis[v]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Nowcoder</category>
      
    </categories>
    
    
    <tags>
      
      <tag>01-BFS</tag>
      
      <tag>Flows</tag>
      
      <tag>Minkowski Sum</tag>
      
      <tag>Connectivity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Beginner Contest 259</title>
    <link href="/atcoder/abc259/"/>
    <url>/atcoder/abc259/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="a---growth-record">A - Growth Record</h2><blockquote><p>主人公 <span class="math inline">\(N\)</span> 岁的时候身高是 <spanclass="math inline">\(T\)</span> , 已知他 <spanclass="math inline">\([1,X]\)</span> 期间每年长 <spanclass="math inline">\(D\)</span> ，后面不长个子，问 <spanclass="math inline">\(M\)</span> 岁的时候身高多少</p></blockquote><p><span class="math inline">\(0\)</span> 岁的身高是 <spanclass="math inline">\(T−X\times D\)</span> ，然后分情况讨论。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd(), x = rd(), t = rd(), d = rd();<br>    <span class="hljs-keyword">int</span> st = t - x * d;<br>    <span class="hljs-keyword">if</span> (m &gt; x) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, t);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, st + m * d);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="b---counterclockwise-rotation">B - CounterclockwiseRotation</h2><blockquote><p>给定坐标 <span class="math inline">\((x,y)\)</span>问绕原点逆时针旋转 <span class="math inline">\(d\)</span>角度后的坐标。</p></blockquote><p>坐标为 <span class="math inline">\(x^{\prime}=x * \cos d-y * \sin d,y^{\prime}=x * \sin d+y * \cosd\)</span>，可以用各种方法(诱导公式/旋转矩阵)推。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><span class="hljs-keyword">using</span> ld = <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-keyword">const</span> ld PI = <span class="hljs-number">3.1415926535</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vec</span> &#123;</span><br>    ld x, y;<br>    <span class="hljs-function">vec <span class="hljs-title">turn</span> <span class="hljs-params">(ld ang)</span> </span>&#123; <span class="hljs-comment">// 逆时针旋转 ang 角度</span><br>        ld cosa = <span class="hljs-built_in">cos</span>(ang), sina = <span class="hljs-built_in">sin</span>(ang);<br>        <span class="hljs-keyword">return</span> (vec)&#123;x * cosa - y * sina, x * sina + y * cosa&#125;;<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    vec a;<br>    a.x = rd(); a.y = rd();<br>    ld d = rd() / <span class="hljs-number">180.0</span> * PI;<br>    a = a.turn(d);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10Lf %.10Lf\n&quot;</span>, a.x, a.y);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="c---xx-to-xxx">C - XX to XXX</h2><blockquote><p>给定两个串 <span class="math inline">\(S\)</span> 和 <spanclass="math inline">\(T\)</span>, 每次可以向 <spanclass="math inline">\(S\)</span>中相邻且相同的两个字符中间塞一个相同的字符。问若干次操作后 <spanclass="math inline">\(S\)</span> 是否能变成 <spanclass="math inline">\(T\)</span> 。</p></blockquote><p>考虑双指针 <span class="math inline">\(\left(p t r_s, p tr_t\right)\)</span>, 从头对齐往后扫描，每次先不考虑扩张,能不能匹配上。</p><p>如果不能匹配上，即 <span class="math inline">\(S\left[p t r_s\right]\neq T\left[p t r_t\right]\)</span>, 那么 <spanclass="math inline">\(T\left[p t r_t\right]\)</span> 只能往回看，尝试用<span class="math inline">\(S\left[p t r_s-1\right]\)</span> 和 <spanclass="math inline">\(S\left[p t r_s-2\right]\)</span> 来扩张,否则无解。</p><p>记得最后要判断一下两个串的指针是否都走到了结尾。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><br><span class="hljs-keyword">char</span> s[N], t[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, t + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> m = <span class="hljs-built_in">strlen</span>(t + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> ptr = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (s[ptr] == t[i]) &#123;++ptr; <span class="hljs-keyword">continue</span>;&#125;<br>        <span class="hljs-keyword">if</span> (s[ptr - <span class="hljs-number">1</span>] != t[i]) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        <span class="hljs-keyword">if</span> (ptr &lt;= <span class="hljs-number">1</span> || s[ptr - <span class="hljs-number">1</span>] != s[ptr - <span class="hljs-number">2</span>]) &#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(ptr == n + <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;Yes&quot;</span> : <span class="hljs-string">&quot;No&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="d---circumferences">D - Circumferences</h2><blockquote><p>给定二维平面上的 <span class="math inline">\(n\)</span> 个圆,以及某个圆上的起点和某个圆上的终点。</p><p>只能走圆的边界 (可以通过两圆交点更换所在的圆），问能否从起点走到终点?</p></blockquote><p>并查集判连通性, 数据范围只需要 <spanclass="math inline">\(n^2\)</span> 暴力枚举判断是否有交点即可。</p><p>判断两圆有交点：不相离也不包含。</p><ul><li>相离：圆心距大于两圆半径之和。</li><li>包含：圆心距小于两圆半径之差的绝对值。</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 3007</span><br><br>ll x[N], y[N], r[N];<br><br><span class="hljs-keyword">int</span> f[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x == f[x] ? x : (f[x] = find(f[x]));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">sqr</span><span class="hljs-params">(ll x)</span> </span>&#123;<span class="hljs-keyword">return</span> x * x;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) f[i] = i;<br>    <span class="hljs-keyword">int</span> sx = rd(), sy = rd();<br>    <span class="hljs-keyword">int</span> tx = rd(), ty = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        x[i] = rd(); y[i] = rd(); r[i] = rd();<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (sqr(x[i] - x[j]) + sqr(y[i] - y[j]) &gt; sqr(r[i] + r[j])) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (sqr(x[i] - x[j]) + sqr(y[i] - y[j]) &lt; sqr(r[i] - r[j])) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">int</span> u = find(i), v = find(j);<br>            f[u] = v;<br>        &#125;<br>    <span class="hljs-keyword">int</span> px, py;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (sqr(sx - x[i]) + sqr(sy - y[i]) == sqr(r[i])) px = i;<br>        <span class="hljs-keyword">if</span> (sqr(tx - x[i]) + sqr(ty - y[i]) == sqr(r[i])) py = i;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(find(px) == find(py) ? <span class="hljs-string">&quot;Yes&quot;</span> : <span class="hljs-string">&quot;No&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="e---lcm-on-whiteboard">E - LCM on Whiteboard</h2><blockquote><p>给定 <span class="math inline">\(n\)</span> 个数字的标准分解,将其中的某一个变成 <span class="math inline">\(1\)</span> ,问操作后所有数字的最小公倍数有多少种不同的可能性?</p></blockquote><p>结论是所有数字的最小公倍数等于 <strong>每个质因数的指数</strong> 取<strong>所有数字对应质因数指数的 <spanclass="math inline">\(\max\)</span></strong>。</p><p>一个数字变成 <span class="math inline">\(1\)</span> 相当于对于 LCM什么都不提供, 那么什么时候会导致 LCM 变化呢?</p><p>首先他的某一个质因数指数要和 LCM 对应的相同,其次这个最大值在所有数字中是唯一的。</p><p>两个 <code>unordered_map</code> 实现： <code>mx[i]</code> 记录质因数<span class="math inline">\(i\)</span> 出现过的最大指数是多少,<code>cnt[i]</code> 记录有多少个数字对应这个最大指数。</p><p>那么一个数字有贡献也就对应于<code>e[i]==mx[i] &amp;&amp; cnt[i]==1</code> 。</p><p>此外没有影响的所有数字总体会对答案产生一个贡献, 即原本所有数的 LCM。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><span class="hljs-keyword">using</span> ld = <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; mx, cnt;<br><br><span class="hljs-built_in">vector</span>&lt;pii&gt; s[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> m = rd();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) &#123;<br>            <span class="hljs-keyword">int</span> a = rd(), b = rd();<br>            s[i].pb(mp(a, b));<br>            <span class="hljs-keyword">if</span> (mx[a] &lt; b) &#123;mx[a] = b; cnt[a] = <span class="hljs-number">1</span>;&#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mx[a] == b) ++cnt[a];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> fl = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">bool</span> tag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [a, b] : s[i]) &#123;<br>            <span class="hljs-keyword">if</span> (mx[a] == b &amp;&amp; cnt[a] == <span class="hljs-number">1</span>) &#123;tag = <span class="hljs-number">1</span>; <span class="hljs-keyword">break</span>;&#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (tag) ++ans;<br>        <span class="hljs-keyword">else</span> fl = <span class="hljs-number">1</span>;<br>    &#125;<br>    ans += fl;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="f---select-edges">F - Select Edges</h2><blockquote><p>给定一棵树, 每条边有一个边权 <span class="math inline">\(w\)</span>,每个点有一个限制 <span class="math inline">\(d_i\)</span> 。</p><p>选一个边集, 使得每个点相邻的边在这个集合里的个数不超过 <spanclass="math inline">\(d_i\)</span>, 并且最大化集合里边的 <spanclass="math inline">\(\sum w\)</span> 。</p></blockquote><p>设 <span class="math inline">\(f[i][0 / 1]\)</span> 表示节点 <spanclass="math inline">\(i\)</span> 及其子树内, 是否要选 <spanclass="math inline">\(i\)</span> 到父亲的边 <spanclass="math inline">\((0/1)\)</span> ， 能得到的最大价值。</p><ul><li>不选到父亲的边: 就是最多把 <span class="math inline">\(d_i\)</span>个儿子的贡献从 <span class="math inline">\(f [son] [0]\)</span> 改为<span class="math inline">\(f[s o n] [1] +w[u][son]\)</span>，挑能贡献最多的选（修改后较修改前差值最大的 <spanclass="math inline">\(d_i\)</span> 个)</li><li>选到父亲的边： 就是最多把 <span class="math inline">\(d_i-1\)</span>个儿子的贡献从 <span class="math inline">\(f [son] [0]\)</span> 改为<span class="math inline">\(f[s o n] [1] +w[u][son]\)</span> ;特殊的如果 <span class="math inline">\(d_i=0\)</span> 则 <spanclass="math inline">\(f[i][1]=-\mathrm{inf}\)</span></li></ul><p>直接 DP 就好了, 复杂度是 <span class="math inline">\(O(n \logn)\)</span> 的（因为涉及到儿子贡献的排序）。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><span class="hljs-keyword">using</span> ld = <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 300007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-built_in">vector</span>&lt;pii&gt; e[N];<br><span class="hljs-built_in">vector</span>&lt;ll&gt; tmp;<br><br><span class="hljs-keyword">int</span> d[N];<br><br>ll f[N][<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    ll sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [v, w] : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa) dfs(v, u);<br>    tmp.clear();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [v, w] : e[u]) <br>        <span class="hljs-keyword">if</span> (v != fa) &#123;<br>            sum += f[v][<span class="hljs-number">0</span>];<br>            tmp.push_back(f[v][<span class="hljs-number">1</span>] + w - f[v][<span class="hljs-number">0</span>]);<br>        &#125;<br>    sort(tmp.begin(), tmp.end());<br>    reverse(tmp.begin(), tmp.end());<br>    <span class="hljs-keyword">if</span> (d[u] == <span class="hljs-number">0</span>) &#123;<br>        f[u][<span class="hljs-number">0</span>] = sum;<br>        f[u][<span class="hljs-number">1</span>] = <span class="hljs-number">-1e18</span>; <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        f[u][<span class="hljs-number">0</span>] = f[u][<span class="hljs-number">1</span>] = sum;<br>        <span class="hljs-keyword">int</span> len = tmp.size();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (tmp[i] &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span> (i &lt; d[u]) f[u][<span class="hljs-number">0</span>] += tmp[i];<br>            <span class="hljs-keyword">if</span> (i &lt; d[u] - <span class="hljs-number">1</span>) f[u][<span class="hljs-number">1</span>] += tmp[i];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) d[i] = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), v = rd(), w = max(<span class="hljs-number">0</span>, rd());<br>        e[u].pb(mp(v, w)); e[v].pb(mp(u, w));<br>    &#125;<br>    dfs(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, max(f[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="g---grid-card-game">G - Grid Card Game</h2><blockquote><p>给定一个数字矩阵 <span class="math inline">\((1\le H,W\le100)\)</span> ，选定一些行一些列，使得：</p><ul><li>负数的位置所在行列不能同时选中。</li><li>定义一个位置被覆盖当且仅当所在行/列被覆盖，最大化被覆盖的位置权值和。</li></ul></blockquote><p>假设把所有非负数都选了，考虑最小割表示选择需要产生的代价，两排点左边表示行右边表示列。</p><p>假如选第 <span class="math inline">\(i\)</span>行，代价就是该行的负值的和 <span class="math inline">\((S,R_i,-\sum_j\left[A_{i, j}&lt;0\right] A_{i j})\)</span></p><p>假如选第 <span class="math inline">\(i\)</span>列，代价就是该列的负值的和 <span class="math inline">\((C_i,T,-\sum_j\left[A_{j, i}&lt;0\right] A_{j i})\)</span></p><p>接下来两排点之间的边表示<strong>对应格子的状态，割掉表示选择了对应行列都未选</strong></p><ul><li>若 <span class="math inline">\(A_{x,y}\ge 0\)</span>，则行列都未选的代价就是扣掉这个位置的贡献 <spanclass="math inline">\((R_i, C_j,A_{i j})\)</span></li><li>若 <span class="math inline">\(A_{x,y}&lt;0\)</span>，则所在行列不能同时选，即不允许左右都被割掉，那么限制的方法就是强制中间的边被割，即</li></ul><h2 id="ex---yet-another-path-counting">Ex - Yet Another PathCounting</h2><blockquote><p>给定一个矩阵 <span class="math inline">\(A_{n \times n}(1 \leq n \leq400)\)</span>, 从某个格子出发,每次可以向右或向下走。问起点终点的数字相同的路径有多少条?</p></blockquote><p>首先枚举数字是多少，然后考虑计算这个数字对应的所有点之间的贡献。根据每种数字出现次数讨论:</p><ul><li><p>如果出现次数不超过 <span class="math inline">\(n\)</span>,那么直接暴力枚举任意两个位置算贡献, 答案是 <spanclass="math inline">\(\left(\begin{array}{c}\Delta x+\Delta y \\ \Deltax\end{array}\right)\)</span> 。 复杂度是 <spanclass="math inline">\(O\left(\sum_{\sum c n t_i=n^2, c n t_i \leq n} c nt_i^2\right) \leq O\left(n \times n^2\right)=O\left(n^3\right)\)</span>，用 <span class="math inline">\(a^2+b^2 \leq(a+b)^2\)</span>放缩一下。</p></li><li><p>如果出现次数超过 <span class="math inline">\(n\)</span>,那么种类数不会超过 <span class="math inline">\(n\)</span> 个,对每种颜色跑一个 <span class="math inline">\(O\left(n^2\right)\)</span>的 DP：</p><p>这个 DP 和 <ahref="http://blog.gyx.me/2022/04/12/Atcoder/agc001/">AGC001E</a>的方法是一样的，设 <code>f[i][j]</code> 表示所有可能的起点走到 <spanclass="math inline">\((i,j)\)</span> 的总方案数。</p><p><code>f[i][j] = f[i - 1][j] + f[i][j - 1]</code>，此外如果这个点是我们要的颜色还要 <code>f[i][j]++</code> 。</p></li></ul><p>因此总复杂度也是 <span class="math inline">\(O(n^3)\)</span> 的。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><span class="hljs-keyword">using</span> ld = <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NN 407</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 160007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 998244353</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-keyword">int</span> n, c[N][N], a[NN][NN], f[NN][NN], ans;<br><br><span class="hljs-built_in">vector</span>&lt;pii&gt; pos[M];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> col)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(f));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) &#123;<br>            f[i][j] = (f[i - <span class="hljs-number">1</span>][j] + f[i][j - <span class="hljs-number">1</span>]) % mod;<br>            <span class="hljs-keyword">if</span> (a[i][j] == col) &#123;<br>                f[i][j] = (f[i][j] + <span class="hljs-number">1</span>) % mod;<br>                ans = (ans + f[i][j]) % mod;<br>            &#125;<br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    c[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) &#123;<br>        c[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; ++j) <br>            c[i][j] = (c[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + c[i - <span class="hljs-number">1</span>][j]) % mod;<br>    &#125;<br>    n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) &#123;<br>            a[i][j] = rd();<br>            pos[a[i][j]].push_back(mp(i, j));<br>        &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n * n; i; --i) &#123;<br>        <span class="hljs-keyword">if</span> (pos[i].size() &gt; n) calc(i);<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> sz = pos[i].size();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; sz; ++j)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; sz; ++k) &#123;<br>                    <span class="hljs-keyword">auto</span> [sx, sy] = pos[i][j];<br>                    <span class="hljs-keyword">auto</span> [tx, ty] = pos[i][k];<br>                    <span class="hljs-keyword">if</span> (tx &lt; sx || ty &lt; sy) <span class="hljs-keyword">continue</span>;<br>                    ans = (ans + c[tx - sx + ty - sy][tx - sx]) % mod;<br>                &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>AtCoder</category>
      
      <category>AtCoder Beginner Contest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dynamic Programming</tag>
      
      <tag>Number Theory</tag>
      
      <tag>Threshold Optimization</tag>
      
      <tag>Counting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sophomore Year</title>
    <link href="/sophomore/"/>
    <url>/sophomore/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天是 2021 年 7 月 6 日，星期三。</p><p>两年前的今天，高考的前夜。担心感冒不敢开空调，燥热地躺在床上，辗转反侧。</p><p>碰巧昨晚又梦到了还在高中，困扰在时时刻刻的恐惧中，惊醒后久久才反应过来，已经上了两年大学了。</p><p>正好今天 22级班助的聘用正式确定下来了，大二的生活算是尘埃落定，回顾一下这一年。</p><h2 id="算法竞赛">算法竞赛</h2><p>首先谈竞赛，这一年算是经历了很多事情，打了一年的银，但是对竞赛的感情经历了很多变化。</p><p>大概从去年 7月份的沈阳银首开始，自己进入了一个目标很不明确的时期。</p><p>暑假多校打的一般，除此外也没有进行太多的训练。队内排名基本稳定在第三名的位置（和前后都有一定距离）。</p><p>温水煮青蛙，没有紧张感，也没有什么太具体的目标。就这样浑浑噩噩的打了网络赛、CCPC桂林银、ICPC 沈阳银。</p><p>寒假安排的很紧，除了算法竞赛还插了数模美赛集训、DL &amp; CV的假期交流课程、兼职教小孩 C 语言。</p><p>但就最后的结果来看，寒假可以说碌碌无为。美赛拿了 S奖，线上交流没学到太多，竞赛的刷题量只能说保持水平。</p><hr /><p><ahref="https://www.zhihu.com/question/528099946/answer/2444748583">如何评价2022 年 ICPC 昆明赛区？</a></p><p>开学之后为了备战省赛和昆明，训练量加了不少，也是有点魔怔的一段时间。</p><p>3 月某天看到了一个人的 CodeForces满屏绿色，有点受刺激，于是自己也离谱地连续打卡了近 50 天。</p><p>期间课几乎都没听，作业都尽量用最短的时间解决掉了，计组实验也和冯老师说全部都堆到比赛后验收。</p><p>于是到了浙江省赛和昆明。因为疫情各种延期，两个比赛在同一个周末的两天举办。</p><p>省赛打的很顺利，前两个小时几次榜一，最后因为做不动期望题 E拿了第四，不过也算是不错的成绩。</p><p>昆明打之前觉得一切准备的都还不错，甚至还有 Eva在做志愿者，应该会很踏实。</p><p>然而正赛开始之后就傻眼了。首先是大量的期望概率题目，签到想不出来；接下来比赛节奏完全没体验过，1h过了一题，然后一直持续到 4h才有过题。期间一直让自己冷静下来，安慰自己把有想法的题都过了就没问题，但是心里一直很慌。直到最后真的三题结束了，自己还没有反应过来发生了什么。</p><p>印象很深的是 Eva走过来坐在我旁边，哭了出来，我问她为什么哭，她说真的替我很伤心。</p><p>反应过来之后，想想自己花了大半个学期训练，课程都快结束了，什么都没开始学；竞赛也没拿到想要的奖项，甚至差两名就要打铜；正逢当天是2022的多省联合省选。一切都让我回忆起了当年省选退役时那段黑暗的日子，无力挣扎，也很想哭。</p><p>当晚自然是又做了噩梦，时间线十分的混乱，又是刚退役回去学文化课，又是赛场上自己一个又一个错误的决定。<strong>仿佛自己又要面对竞赛打的不好就会退役，退役就要回去面对那段整日担惊受怕、生活在高压和恐惧中的文化课生活。</strong></p><p>昆明之后经历的生活也确实像高中退役后补欠下的债，上课听不懂，作业不会做，计算机组成原理四五个大实验一点还没开始写（甚至是还没学会）。最噩梦的是期末季也开始了，在大家都开始复习的时候，自己从头开始。</p><hr /><p>之后五月的某天，因为要宣传这个赛季的结果，集训队开了一次会，然后拍集体照。</p><p>开会的时候，刘老师谈到了暑假组队的事情：“原则上自由组队，大家敞开说，原有的队伍也可以重组，不要拿队伍磨合的好说事情，留给磨合的时间有很多。”听完我突然有了重组的想法，虽然昆明爆炸的主要原因是我决策失误，但是这个赛季的队伍确实也有明显的问题。</p><p>之后也有两个比较巧合的事情让我真的开始思考这件事情。一个是在高级数据结构课上，刘老师突然问我，我们队要不要重组。另一个是恰好有一个实力比较强的队伍会拆散，其中一个队员的长处我认为比较互补。</p><p>但是提出换队友这个事情确实比较尴尬，首先打了一年银并不是某一个人的问题，其次确实这只是我自己的想法。自己根本不知道该如何开口商量这个事情，如果真的换了，我也不知道应该怎么面对被换出去的队友。</p><p>经历了很长一段的权衡后，我终于还是和刘老师商量了这个事情。第二天刘老师给我的答复是：如果所有人都同意，他可以同意。那天纠结了很久，最后一口气和相关的所有人都聊完了。中间聊天的过程真的很害怕，自己不知道怎么开口，也不好意思开口。但好在最后所有人都同意了，更换的队友也和另外两个很强的选手重新组了队伍。</p><p>真的很感谢涉及到这个艰难的过程的所有人，大家都因为我的选择或多或少受到了一些影响，尤其是被换出去的队友。到现在我还是很内疚，真的很感谢他能理解我的想法。</p><hr /><p>接下来的比赛只剩下了校赛，第 26 次 CSP和蓝桥杯的国赛。这段时间几乎都在做期末大作业，偶尔做几道题保持水平。</p><p>但意外的是这几场比赛打的都还可以，杭电校赛靠手速拿到了一等奖，CSP -26 靠卡常 AK 了。<ahref="https://www.zhihu.com/question/537352219/answer/2529131672">如何评价CSP - 26</a></p><p>此外 5月底的时候刘老师找到我，让我作为负责人组织一下今年广西省赛的出题，兴奋又有点紧张。</p><p>于是在期末前的几个星期，拉了出题团队，大家一起挤时间出题造题，还在考试周期间拉了几个集训队员验题。</p><p>期末最后一门考完当晚开始赶工题目的最后一部分，配置spj到了半夜两点多，第二天早上修 pdf版题面又发现了好多语法错误，改完反复读了好几遍之后终于在 ddl前整理好了。</p><p>好在最后两天的比赛都很圆满，第一次做正式比赛的负责人，感觉收获很多（至少学会了用 PTA 和 Polygon ）。</p><p>把 Colin 和 Eva的名字留在一场正式赛的题面里，以及给好多人讲题都是曾经的梦想啊。<ahref="https://www.zhihu.com/question/539876341/answer/2546339734">如何评价第五届GXCPC</a></p><hr /><p>总而言之，这一年的竞赛经历虽然比较曲折，但也确实让我认真地思考了自己到底想要什么。</p><p>下一个赛季大概率是最后一年参赛了，希望自己在想要摆烂的时候能从这一年的经历中汲取动力，加油。</p><h2 id="课内学习">课内学习</h2><p>单从成绩上来看，和大一相比可能课程难度降低了，所以成绩比大一要好一些。</p><p>大二上意外地打出了历史最高绩点；大二下某门学分很重的课因为某些原因爆炸了，绩点没稳住，不过也过去了。</p><p>成绩撇开不谈，记录几门我觉得很收获很多或值得推荐的课程和老师，仅供参考。</p><ul><li><p>形式语言与自动机（黄孝喜老师）：收获主要是此前对这个领域了解很少，上完能比较充分的了解到这个领域的一些基础模型，学编译的时候也能轻松些。课程中涉及到很多非常好玩的小算法，其中的构造思路也是比较有意义的。我最后期末考前还在沉迷构造图灵机无法自拔（虽然非常遗憾期末不考）</p></li><li><p>数字电路/计算机组成原理（冯建文老师）：作为一个对硬件十分反感的人来说真的很感谢冯老师硬逼着我把偏硬的这两门课学完了。作业和实验的任务量都比较大，但是冯老师真的非常负责，有什么问题基本都会不厌其烦的回答完。对我而言主要收获是学到了一个计算机系的学生应该知道的硬件相关内容。</p></li><li><p>概率论与数理统计（张安老师）：老师人超好，授课很清晰，要求很明确，作业量不大，治好了我的积分恐惧症。</p></li><li><p>密码学（胡耿然老师）：比较全面的介绍密码学的基础内容，上课也很轻松，对数论有一些要求（快速幂和逆元）。</p></li><li><p>影视音乐鉴赏（徐艳老师）：上课主要是看电影，很适合在繁忙的课程安排中放松一下。需要做的事情非常非常少，只要做完要求的事情就可以放心拿很好很好的成绩（不能再明说了，懂得都懂吧）</p></li><li><p>电子钢琴（盛晨老师）：这个课偏钢琴普及向，课程考核也主要根据每个人的基础决定，期末考试就是一首自选曲目。因为我和Eva都有一些底子，所以上课基本就是两个人弹想弹的曲子，一个学期弹了很多四手联弹非常开心，期末也选择了四手联弹的方式，选的《摇篮曲》。推荐的原因主要是很难有其他方式可以如此方便的摸到键盘，所以比较感兴趣的同学推荐试一试，没坑，但是如果在意成绩的话最好还是有一点钢琴基础。</p></li><li><p>体育舞蹈（董晓波老师）：每周都能和 Eva去跳一次舞非常开心！上课比较轻松，老师教的很好，运动量即使是我也能撑得住，成绩对我来说也非常满意了。此外貌似有几组同学经过一个学期真的成了情侣，有需求的同学可以去试试桃花运（</p></li></ul><h2 id="未来">未来</h2><p>大二这一年一直在考虑未来的发展，如果决定进企业的话，对我而言其实本科毕业直接上班可能比读研更有效。</p><p>借助一些契机和尝试，也让我明白自己还是有热爱的，所以决定试一试，本科毕业之后继续读书，先不去工作啦。</p><p>关于方向，还是决定离开机器学习这个领域了，非常感谢导师能够理解和支持我的想法。</p><p>毕竟还年轻，还有试错的机会，此时能比较轻松地放下对失败的顾虑，去追求自己的学术理想何尝不是一件大幸事。</p><h2 id="我们">我们</h2><p>我们的爱情在这一年里有很多很感动的时刻，也有很多次吵架走到低谷。</p><p>时间长了不像刚开始谈恋爱那样激烈，但是日常平静生活中的一次次相互扶持，润物无声。</p><p>关于爱情，还是没有什么太多可以讲出来的，所以分享几个这一年中我觉得值得纪念的事情吧：</p><ul><li><p>一起选修了电子钢琴，期末考核曲目选择了四手联弹《摇篮曲》</p></li><li><p>我通过大二上的体测，大二下一起选修了体育舞蹈，作为舞伴一起上课和考试</p><p>印象很深的是大二上体测的最后一项一千米，Eva最后两圈全程陪我跑完，按照商量好的方案每 10 秒给我报一次时间。</p><p>最后的一段冲刺真的没有力气了，完全盯着终点线的 Eva在跑。最后体测分数正好 60 分，0.1 都没多。</p></li><li><p>大二两次期末的突击复习，能一起承受住期末的压力，比较平稳的度过。</p><p>其实主要是帮我复习，因为有的课我考试前一天还啥都不会， Eva经常因为压力太大会哭出来。</p><p>复习期间压力很大的环境下很容易发生争吵，真的很感动我们能一起挺过来那段时间，生气也能快速调整情绪。</p></li><li><p>教 Eva 学算法， Eva 能进杭电女队，参加下一个赛季的女生赛（Eva进队的时候我真的很激动）。</p></li><li><p>一起去当下一届英才班的班助（大一刚谈恋爱的时候就聊起来过这个事情，发现我们都挺喜欢带学弟学妹的）。</p></li></ul><p>最后很想分享一句话，在两个人的感情遇到问题的时候，我觉得这是一个很好的衡量自己做的是否正确的标准。</p><p><img src="\img\love.jpeg" /></p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Regular Contest 061</title>
    <link href="/atcoder/arc061/"/>
    <url>/atcoder/arc061/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="c---many-formulas">C - Many Formulas</h1><blockquote><p>给定一个数字串，可以在任意位置添加加号，问所有表达式结果的和是多少。</p></blockquote><p>考虑一个前缀后面补一个新的数字： +如果断开，那么前缀的贡献是前面的结果 +如果不断开，那么前缀的贡献是前面除去最后一段 + 最后一段 <spanclass="math inline">\(\times 10\)</span> + 最后一个数字的贡献就是数值<span class="math inline">\(\times 2^{len}\)</span>，即可能的划分方案数</p><p>记 <span class="math inline">\(f_i\)</span> 表示前缀 <spanclass="math inline">\(i\)</span> 的答案，<spanclass="math inline">\(g_i\)</span> 表示前缀 <spanclass="math inline">\(i\)</span> 最后一段的答案，有：</p><p><span class="math display">\[\begin{array}{l}f_i &amp;= 2^i * digit_i + f_{i-1} + (f_{i-1} - g_{i-1}) + g_{i-1}\times 10\\g_i &amp;= 2^i * digit_i + g_{i-1} \times 10\end{array}\]</span></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;  </span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;  <br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">char</span> c = getchar();  <br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);  <br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);  <br>    <span class="hljs-keyword">return</span> f ? -x : x;  <br>&#125;  <br>  <br><span class="hljs-keyword">char</span> s[<span class="hljs-number">11</span>];  <br>  <br>ll f[<span class="hljs-number">11</span>], g[<span class="hljs-number">11</span>];  <br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);  <br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, pw = <span class="hljs-number">1</span>; i &lt;= len; ++i, pw = pw * <span class="hljs-number">2</span>) &#123;  <br>        f[i] = pw * (s[i] - <span class="hljs-string">&#x27;0&#x27;</span>) + f[i - <span class="hljs-number">1</span>] * <span class="hljs-number">2</span> + g[i - <span class="hljs-number">1</span>] * <span class="hljs-number">9</span>;  <br>        g[i] = pw * (s[i] - <span class="hljs-string">&#x27;0&#x27;</span>) + g[i - <span class="hljs-number">1</span>] * <span class="hljs-number">10</span>;  <br>    &#125;  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, f[len]);  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="d---snukes-coloring">D - Snuke's Coloring</h1><blockquote><p>给定一个 <span class="math inline">\(H\times W\)</span>的网格，初始所有位置都是白色，然后给定 <spanclass="math inline">\(n\)</span> 个点染成黑色。问所有的九宫格里，黑色点数为 <span class="math inline">\(0\dots9\)</span> 的九宫格分别有多少个。</p></blockquote><p>初始所有的九宫格都是白色，然后每次加入一个点模拟一下即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;  </span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;  <br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">char</span> c = getchar();  <br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);  <br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);  <br>    <span class="hljs-keyword">return</span> f ? -x : x;  <br>&#125;  <br>  <br><span class="hljs-built_in">unordered_map</span>&lt;ll, <span class="hljs-keyword">bool</span>&gt; vis;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">pos</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1l</span>l * x * <span class="hljs-number">1000000000</span> + y;&#125;  <br>  <br>ll ans[<span class="hljs-number">10</span>];  <br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">int</span> h = rd(), w = rd();  <br>    ans[<span class="hljs-number">0</span>] = <span class="hljs-number">1l</span>l * (h - <span class="hljs-number">2</span>) * (w - <span class="hljs-number">2</span>);  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> n = rd(); n; --n) &#123;  <br>        <span class="hljs-keyword">int</span> x = rd(), y = rd();  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> a = max(<span class="hljs-number">1</span>, x - <span class="hljs-number">2</span>); a &lt;= min(x, h - <span class="hljs-number">2</span>); ++a)  <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> b = max(<span class="hljs-number">1</span>, y - <span class="hljs-number">2</span>); b &lt;= min(y, w - <span class="hljs-number">2</span>); ++b) &#123;  <br>                <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;  <br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> dx = <span class="hljs-number">0</span>; dx &lt; <span class="hljs-number">3</span>; ++dx)  <br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> dy = <span class="hljs-number">0</span>; dy &lt; <span class="hljs-number">3</span>; ++dy) cnt += vis[pos(a + dx, b + dy)];  <br>                --ans[cnt]; ++ans[cnt + <span class="hljs-number">1</span>];  <br>            &#125;  <br>        vis[pos(x, y)] = <span class="hljs-number">1</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans[i]);  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="e---snukes-subway-trip">E - Snuke's Subway Trip</h1><blockquote><p><span class="math inline">\(n\)</span> 个点 <spanclass="math inline">\(m\)</span> 条边的无向图，每个边有一个颜色。一个路径的初始代价是 <span class="math inline">\(1\)</span>，每换一次颜色代价 <span class="math inline">\(+1\)</span> ，求 <spanclass="math inline">\(1\)</span> 到 <spanclass="math inline">\(n\)</span> 的最短路。</p></blockquote><p>考虑直接建分层图（每个点的实点建立 <spanclass="math inline">\(m\)</span> 个虚点，虚点间连原图的边）。</p><p>真实的点向对应的虚点连边权为 <span class="math inline">\(1\)</span>，虚点之间连原图的边边权为 <span class="math inline">\(0\)</span>，最终答案除 <span class="math inline">\(2\)</span> 即可。</p><p>可以发现有用的点其实只有 <spanclass="math inline">\(\mathcal{O}(n+m)\)</span>，因此可以直接建图做（用一个 <code>unordered_map</code> ）。</p><p>然后在图上跑 01-BFS 即可，复杂度 <spanclass="math inline">\(\mathcal{O}(n+m)\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;  </span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;  <br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">char</span> c = getchar();  <br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);  <br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);  <br>    <span class="hljs-keyword">return</span> f ? -x : x;  <br>&#125;  <br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500007  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 2000007  </span><br>  <br><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; id[N];  <br>  <br><span class="hljs-keyword">int</span> tot, hd[N];  <br>  <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><span class="hljs-keyword">int</span> to, nxt; <span class="hljs-keyword">bool</span> w;&#125; e[M];  <br>  <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">bool</span> w)</span> </span>&#123;  <br>    e[++tot].to = v; e[tot].w = w; e[tot].nxt = hd[u]; hd[u] = tot;  <br>    e[++tot].to = u; e[tot].w = w; e[tot].nxt = hd[v]; hd[v] = tot;  <br>&#125;  <br>  <br><span class="hljs-keyword">int</span> dis[N];  <br>  <br><span class="hljs-keyword">bool</span> vis[N];  <br>  <br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; q;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();  <br>    <span class="hljs-keyword">int</span> totn = n;  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;  <br>        <span class="hljs-keyword">int</span> u = rd(), v = rd(), c = rd();  <br>        <span class="hljs-keyword">if</span> (!id[u][c]) &#123;id[u][c] = ++totn; add(u, totn, <span class="hljs-number">1</span>);&#125;  <br>        <span class="hljs-keyword">if</span> (!id[v][c]) &#123;id[v][c] = ++totn; add(v, totn, <span class="hljs-number">1</span>);&#125;  <br>        add(id[u][c], id[v][c], <span class="hljs-number">0</span>);  <br>    &#125;  <br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(dis));  <br>    dis[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>; q.push_back(<span class="hljs-number">1</span>);  <br>    <span class="hljs-keyword">while</span> (!q.empty()) &#123;  <br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop_front();  <br>        <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">continue</span>; vis[u] = <span class="hljs-number">1</span>;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = hd[u], v; i; i = e[i].nxt) &#123;  <br>            <span class="hljs-keyword">if</span> (dis[u] + e[i].w &lt; dis[v = e[i].to]) &#123;  <br>                dis[v] = dis[u] + e[i].w;  <br>                e[i].w ? q.push_back(v) : q.push_front(v);  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dis[n] == dis[<span class="hljs-number">0</span>] ? <span class="hljs-number">-1</span> : dis[n] / <span class="hljs-number">2</span>);  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="f---card-game-for-three">F - Card Game for Three</h1><blockquote><p>三个人 A,B,C ，每个人分别有 <spanclass="math inline">\(n,m,k\)</span> 张卡，每张卡的卡面都可能是 A/B/C之一。 从 A 开始翻牌，每次翻到的牌子上写的是谁，下一个翻牌的就是谁。轮到某个人时，如果他没有牌了就胜利，问总共 <spanclass="math inline">\(3^{n+m+k}\)</span> 种方案中，A胜利的方案数有多少。</p></blockquote><p>这道题目的出发点完全想错了，不能将三个人分开想，因为有可能会有 A - B- C - A 循环。</p><p>考虑将整个操作序列连起来（长度 <spanclass="math inline">\(n+m+k\)</span>），每个操作序列一定对应于一种牌序。</p><p>那么也就是要求：某个前缀有 <span class="math inline">\(n\)</span> 个A ，且这段前缀内 B, C 的数量对应不超过 <spanclass="math inline">\(m,k\)</span> 。</p><ul><li>前一个条件避免数重，强制最后一个是 A 即可。</li><li>后一个条件考虑容斥做，由于长度限制容易发现两个反例只会出现一个：</li></ul><p><span class="math display">\[\begin{array}{l}ans &amp;= \displaystyle \sum_{len=n}^{n+m+k} {len - 1\choose n -1}\bigg({2^{len - n} - \sum_{a = m+1}^{len - n}{len - n\choosea}-\sum_{b=k+1}^{len - n}{len - n\choose b}}\bigg)3^{n+m+k-len}\end{array}\]</span> 设 <span class="math inline">\(f_x=\sum_{i=m}^x{x\choosei}\)</span> ，然后用组合数定义优化这个东西：</p><p><span class="math display">\[f_x = \sum_{i=m}^x{x\choose i} = \sum_{i=m}^x \bigg({x-1\choosei}+{x-1\choose i - 1}\bigg) = 2f_{x-1} + {x - 1\choose m - 1}\]</span> 就变成 <span class="math inline">\(\mathcal{O}(n+m+k)\)</span>的了。。。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;  </span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;  <br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">char</span> c = getchar();  <br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);  <br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);  <br>    <span class="hljs-keyword">return</span> f ? -x : x;  <br>&#125;  <br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000007  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 1000000007  </span><br>  <br><span class="hljs-keyword">namespace</span> Comb &#123;  <br>    <span class="hljs-keyword">int</span> fac[N], ifac[N];  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> t)</span> </span>&#123;  <br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span>;  <br>        <span class="hljs-keyword">for</span> (; t; t &gt;&gt;= <span class="hljs-number">1</span>, x = <span class="hljs-number">1l</span>l * x * x % mod)  <br>            <span class="hljs-keyword">if</span> (t &amp; <span class="hljs-number">1</span>) res = <span class="hljs-number">1l</span>l * res * x % mod;  <br>        <span class="hljs-keyword">return</span> res;  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;  <br>        fac[<span class="hljs-number">0</span>] = ifac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) fac[i] = <span class="hljs-number">1l</span>l * fac[i - <span class="hljs-number">1</span>] * i % mod;  <br>        ifac[N - <span class="hljs-number">1</span>] = fpow(fac[N - <span class="hljs-number">1</span>], mod - <span class="hljs-number">2</span>);  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = N - <span class="hljs-number">2</span>; i; --i) ifac[i] = <span class="hljs-number">1l</span>l * ifac[i + <span class="hljs-number">1</span>] * (i + <span class="hljs-number">1</span>) % mod;  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span> </span>&#123;  <br>        <span class="hljs-keyword">if</span> (n &lt; m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1l</span>l * fac[n] * ifac[m] % mod * ifac[n - m] % mod;  <br>    &#125;  <br>&#125;  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> Comb;  <br>  <br>ll pw2[N] = &#123;<span class="hljs-number">1</span>&#125;, pw3[N] = &#123;<span class="hljs-number">1</span>&#125;, f1[N], f2[N];  <br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    init();  <br>    ll ans = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">int</span> n = rd(), m = rd(), k = rd();  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) &#123;  <br>        pw2[i] = (pw2[i - <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">1</span>) % mod;  <br>        pw3[i] = pw3[i - <span class="hljs-number">1</span>] * <span class="hljs-number">3</span> % mod;  <br>        f1[i] = (<span class="hljs-number">2</span> * f1[i - <span class="hljs-number">1</span>] + C(i - <span class="hljs-number">1</span>, m)) % mod;  <br>        f2[i] = (<span class="hljs-number">2</span> * f2[i - <span class="hljs-number">1</span>] + C(i - <span class="hljs-number">1</span>, k)) % mod;  <br>    &#125;  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = n; l &lt;= n + m + k; ++l) &#123;  <br>        ll w = ((pw2[l - n] - f1[l - n] - f2[l - n]) % mod + mod) % mod;  <br>        ans = (ans + C(l - <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>) * w % mod * pw3[n + m + k - l]) % mod;  <br>    &#125;  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>AtCoder</category>
      
      <category>AtCoder Regular Contest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dynamic Programming</tag>
      
      <tag>STL</tag>
      
      <tag>Combinatorics</tag>
      
      <tag>01-BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Regular Contest 060</title>
    <link href="/atcoder/arc060/"/>
    <url>/atcoder/arc060/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="c---tak-and-cards">C - Tak and Cards</h1><blockquote><p>给定 <span class="math inline">\(n\)</span>个有序数字，求有多少个下标集，对应的数字平均数是 <spanclass="math inline">\(A\)</span></p></blockquote><p>数据范围很小，用背包计数就好了，注意枚举的上下界。 <figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 57</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 5007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> B 2500</span><br><br>ll f[N][M];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), A = rd();<br>    f[<span class="hljs-number">0</span>][B] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> w = rd() - A;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v = max(-B, -B + w); v &lt;= min(B, B + w); ++v)<br>            f[i][v + B] = f[i - <span class="hljs-number">1</span>][v + B] + f[i - <span class="hljs-number">1</span>][v - w + B];<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, f[n][B] - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></p><h1 id="d---digit-sum">D - Digit Sum</h1><blockquote><p>给定两个数字 <span class="math inline">\(n\ (n\le 10^{11})\)</span>和 <span class="math inline">\(s\)</span> ，求最小的进制 <spanclass="math inline">\(b\)</span> ，使得 <spanclass="math inline">\(n\)</span> 在 <spanclass="math inline">\(b\)</span> 进制下的数位和等于 <spanclass="math inline">\(s\)</span> 。</p></blockquote><p>一道典型的根号讨论题目。</p><ul><li>当 <span class="math inline">\(b\le \sqrt{n}\)</span>时，直接暴力验证。</li><li>当 <span class="math inline">\(b\ge \sqrt{n}\)</span>时，数字最多是两位数，可以写成 <spanclass="math inline">\(n=pb+q,s=p+q\)</span> ，联立得 <spanclass="math inline">\(n-s=p(b-1)\)</span></li></ul><p>注意后一种情况判断要求：<span class="math inline">\(b\ge \sqrt{n},\0\le q&lt; b\)</span></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;  </span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;  <br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">calc</span><span class="hljs-params">(ll n, ll b)</span> </span>&#123;  <br>    ll ans = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">for</span> (; n; ans += n % b, n /= b);  <br>    <span class="hljs-keyword">return</span> ans;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    ll n, s;  <br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; s;  <br>    <span class="hljs-keyword">if</span> (n &lt; s) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;  <br>    <span class="hljs-keyword">if</span> (n == s) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, n + <span class="hljs-number">1</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;  <br>    ll lim = <span class="hljs-built_in">sqrt</span>(n);  <br>    <span class="hljs-keyword">for</span> (ll i = <span class="hljs-number">2</span>; i &lt;= lim; ++i)  <br>        <span class="hljs-keyword">if</span> (calc(n, i) == s) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, i); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;  <br>    n -= s;  <br>    ll ans = <span class="hljs-number">1e18</span>;  <br>    <span class="hljs-keyword">for</span> (ll i = <span class="hljs-built_in">sqrt</span>(n); i &gt;= <span class="hljs-number">1</span>; --i)  <br>        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) &#123;  <br>            <span class="hljs-keyword">if</span> (i &gt;= lim &amp;&amp; s - n / i &lt; i + <span class="hljs-number">1</span> &amp;&amp; s &gt;= n / i) ans = min(ans, i + <span class="hljs-number">1</span>);  <br>            <span class="hljs-keyword">if</span> (n / i &gt;= lim &amp;&amp; s - i &lt; n / i + <span class="hljs-number">1</span> &amp;&amp; s &gt;= i) ans = min(ans, n / i + <span class="hljs-number">1</span>);  <br>        &#125;  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans == <span class="hljs-number">1e18</span> ? <span class="hljs-number">-1</span> : ans);  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="e---tak-and-hotels">E - Tak and Hotels</h1><blockquote><p>给定数轴上的 <span class="math inline">\(n\)</span>个点，每次查询两个点 <span class="math inline">\(a,b\)</span> ：</p><p>问从 <span class="math inline">\(a\)</span> 到 <spanclass="math inline">\(b\)</span> ，在给定的点之间跳跃，每次距离不超过<span class="math inline">\(L\)</span> ，最少多少次。</p></blockquote><p>考虑倍增，设 <span class="math inline">\(mx_{i,j}\)</span> 表示从<span class="math inline">\(i\)</span> 向右跳 <spanclass="math inline">\(2^j\)</span>步，最多能跳到哪里，组合的时候记得判一下最后一步即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;  </span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;  <br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">char</span> c = getchar();  <br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);  <br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);  <br>    <span class="hljs-keyword">return</span> f ? -x : x;  <br>&#125;  <br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007   </span><br>  <br><span class="hljs-keyword">int</span> r[N][<span class="hljs-number">18</span>], x[N];  <br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">int</span> n = rd();  <br>    <span class="hljs-keyword">int</span> t = log2(n) + <span class="hljs-number">1</span>;  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) x[i] = rd();  <br>    <span class="hljs-keyword">int</span> l = rd(), q = rd();  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, rpos = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;  <br>        <span class="hljs-keyword">while</span> (rpos &lt; n &amp;&amp; x[rpos + <span class="hljs-number">1</span>] - x[i] &lt;= l) ++rpos;  <br>        r[i][<span class="hljs-number">0</span>] = rpos;  <br>    &#125;  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= t; ++i)  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>; l &lt;= n; ++l) r[l][i] = r[r[l][i - <span class="hljs-number">1</span>]][i - <span class="hljs-number">1</span>];  <br>  <br>    <span class="hljs-keyword">for</span> (; q; --q) &#123;  <br>        <span class="hljs-keyword">int</span> a = rd(), b = rd();  <br>        <span class="hljs-keyword">if</span> (a &gt; b) swap(a, b);  <br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = t; ~i; --i)  <br>            <span class="hljs-keyword">if</span> (r[a][i] &lt; b) &#123;  <br>                ans += (<span class="hljs-number">1</span> &lt;&lt; i);  <br>                a = r[a][i];  <br>            &#125;  <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans + <span class="hljs-number">1</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="f---best-representation">F - Best Representation</h1><blockquote><p>定义无循环节（完整补齐）的字符串是好的。</p><p>定义将一个串划分为若干好的字符串，这个划分是好的。</p><p>定义一个划分是最优的，当且仅当划分是好的并且划分的子串数最少。</p><p>给定串 <span class="math inline">\(S\ (|S|\le 5\times 10^5)\)</span>求最优划分所需的子串数和最优划分个数。</p></blockquote><ul><li>如果 <span class="math inline">\(S\)</span>自己本身无循环节，两个答案都是 <spanclass="math inline">\(1\)</span></li><li>如果 <span class="math inline">\(S\)</span>所有字母都相同，第一个答案是 <span class="math inline">\(n\)</span>，第二个是 <span class="math inline">\(1\)</span></li><li>如果 <span class="math inline">\(S\)</span>有循环节且所有字母都不同，第一个答案是 <spanclass="math inline">\(2\)</span> （在任意循环节中间切开）</li></ul><p>对于第三种情况枚举分割点计数，需要快速判断一个前缀/后缀有无循环节。</p><p>对正反两个串都做一下 kmp 就可以了，若 <spanclass="math inline">\((n-nxt[n])\ |\ n\)</span> 则有循环节。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500007</span><br><br><span class="hljs-keyword">char</span> s[N];<br><br><span class="hljs-keyword">int</span> nxt[N], nxtr[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">pre</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (nxt[x] == <span class="hljs-number">0</span>) || (x % (x - nxt[x]) &gt; <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">suf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (nxtr[x] == <span class="hljs-number">0</span>) || (x % (x - nxtr[x]) &gt; <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">bool</span> fl = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>, pos; i &lt;= len; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (s[i] != s[i - <span class="hljs-number">1</span>]) fl = <span class="hljs-number">1</span>;<br>        pos = nxt[i - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">while</span> (pos &amp;&amp; s[pos + <span class="hljs-number">1</span>] != s[i]) pos = nxt[pos];<br>        <span class="hljs-keyword">if</span> (pos != <span class="hljs-number">0</span>) nxt[i] = pos + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> nxt[i] = (s[<span class="hljs-number">1</span>] == s[i]);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!fl) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n1\n&quot;</span>, len); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-keyword">if</span> (pre(len)) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1\n1&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2&quot;</span>);<br>    reverse(s + <span class="hljs-number">1</span>, s + <span class="hljs-number">1</span> + len);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>, pos; i &lt;= len; ++i) &#123;<br>        pos = nxtr[i - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">while</span> (pos &amp;&amp; s[pos + <span class="hljs-number">1</span>] != s[i]) pos = nxtr[pos];<br>        <span class="hljs-keyword">if</span> (pos != <span class="hljs-number">0</span>) nxtr[i] = pos + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> nxtr[i] = (s[<span class="hljs-number">1</span>] == s[i]);<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; len; ++i)<br>        <span class="hljs-keyword">if</span> (pre(i) &amp;&amp; suf(len - i)) ++ans;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>AtCoder</category>
      
      <category>AtCoder Regular Contest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>String</tag>
      
      <tag>Knapsack Problem</tag>
      
      <tag>Greedy</tag>
      
      <tag>Threshold Optimization</tag>
      
      <tag>Binary Lifting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Regular Contest 059</title>
    <link href="/atcoder/arc059/"/>
    <url>/atcoder/arc059/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="c---be-together">C - Be Together</h1><p>直接枚举最终结果是谁就行了，C 语言题。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 107</span><br><br><span class="hljs-keyword">int</span> n, a[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sqr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">return</span> x * x;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        ans += sqr(a[i] - x);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i] = rd();<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">2e9</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> w = <span class="hljs-number">-100</span>; w &lt;= <span class="hljs-number">100</span>; ++w) ans = min(ans, calc(w));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="d---unbalanced">D - Unbalanced</h1><blockquote><p>给定一个字符串，找一个不平衡子串，子串中出现次数最多的字符次数超过长度的一半。</p></blockquote><ul><li>长度为 <span class="math inline">\(2n\)</span>的不平衡串，该字符一定出现了至少 <spanclass="math inline">\(n+1\)</span> 次，因此一定有连续两个字符相同；</li><li>长度为 <span class="math inline">\(2n+1\)</span>的不平衡串，唯一特殊的情况是形如 abacada 这种，一定存在长度为 <spanclass="math inline">\(3\)</span> 的不平衡子串；</li></ul><p>综上，如果存在不平衡，那么最小的长度不会超过 <spanclass="math inline">\(3\)</span> ，直接扫描即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br><span class="hljs-keyword">char</span> s[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (s[n - <span class="hljs-number">1</span>] == s[n]) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, n - <span class="hljs-number">1</span>, n); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">2</span>; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (s[i] == s[i + <span class="hljs-number">1</span>]) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, i, i + <span class="hljs-number">1</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        <span class="hljs-keyword">if</span> (s[i] == s[i + <span class="hljs-number">2</span>]) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, i, i + <span class="hljs-number">2</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1 -1&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="e---children-and-candies">E - Children and Candies</h1><p><span class="math display">\[\begin{array}{l}ans &amp;= \displaystyle\sum_{x_1 = a_1}^{b_1}\sum_{x_2 =a_2}^{b_2}\cdots\sum_{x_n = a_n}^{b_n} \sum_{\substack{\sumc_i=C\\c_i\ge 0}}\prod_{i=1}^n x_i^{c_i}\\&amp;\displaystyle= \sum_{\substack{\sum c_i=C\\c_i\ge 0}} \sum_{x_1 =a_1}^{b_1} x_1^{c_1}\sum_{x_2 = a_2}^{b_2}x_2^{c_2}\cdots\sum_{x_n =a_n}^{b_n} x_n^{c_n}\\&amp;\displaystyle= \sum_{\substack{\sum c_i=C\\c_i\ge0}}\prod_{i=1}^n\bigg(\sum_{x_i = a_i}^{b_i} x_i^{c_i}\bigg)\\\end{array}\]</span> 我们可以预处理出 <span class="math inline">\(pw_{i,k}=\sum_{x_i=a_i}^{b_i} x_i^k\)</span> ，有</p><p><span class="math display">\[ans = \sum_{\substack{\sum c_i=C\\c_i\ge 0}}\prod_{i=1}^n\bigg(\sum_{x_i= a_i}^{b_i} x_i^{c_i}\bigg) =\displaystyle\sum_{c_1=0}^Cpw_{1,c_1}\sum_{\substack{c_2+\cdots + c_n=C-c_1\\c_i\ge0}}\prod_{i=2}^n pw_{i,c_i}\]</span> 按照这个思路继续拆分 <span class="math inline">\(c_2,\cdots,c_n\)</span> ，本质上就是一个背包的动态规划。</p><p>设 <span class="math inline">\(f_{i,j}\)</span> 表示考虑前 <spanclass="math inline">\(i\)</span> 个变量，指数的和是 <spanclass="math inline">\(j\)</span> ，对 <spanclass="math inline">\(ans\)</span> 的贡献是多少。</p><p>枚举第 <span class="math inline">\(i\)</span> 个指数占用了 <spanclass="math inline">\(k\ (k\le j)\)</span> ，则转移方程： <spanclass="math display">\[f_{i,j}\leftarrow \sum_{k=0}^j f_{i-1,j-k}\times pw_{i,k}\]</span> 时间复杂度 <spanclass="math inline">\(\mathcal{O}(n^3)\)</span> ，空间复杂度 <spanclass="math inline">\(\mathcal{O}(n^2)\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 407</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 1000000007</span><br><br><span class="hljs-keyword">int</span> a[N], b[N], pw[N][N], f[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), c = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i] = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) b[i] = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = a[i]; j &lt;= b[i]; ++j)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>, nw = <span class="hljs-number">1</span>; t &lt;= c; ++t, nw = <span class="hljs-number">1l</span>l * nw * j % mod)<br>                pw[i][t] = (pw[i][t] + nw) % mod;<br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= c; ++j)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt;= j; ++k)<br>                f[i][j] = (f[i][j] + <span class="hljs-number">1l</span>l * f[i - <span class="hljs-number">1</span>][j - k] * pw[i][k]) % mod;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f[n][c]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="f---unhappy-hacking">F - Unhappy Hacking</h1><blockquote><p>求 <span class="math inline">\(n\)</span> 次操作生成一个给定串 <spanclass="math inline">\(s\)</span> 的方案数： 每次操作三选一：结尾加 <spanclass="math inline">\(0\)</span> ，结尾加 <spanclass="math inline">\(1\)</span>，删除结尾一个字符（若空就什么都不做）</p></blockquote><p>冷静一下这个计数和串是什么没关系，因为所有长度相同的串生成的概率相同。</p><p>设 <span class="math inline">\(f_{i,j}\)</span> 表示 <spanclass="math inline">\(i\)</span> 次操作生成长度为 <spanclass="math inline">\(j\)</span> 的串的方案数，有： + 删除：<spanclass="math inline">\(f_{i,j} \leftarrow f_{i-1,j+1}+[j ==0]f_{i-1,j}\)</span><br />+ 添加：<span class="math inline">\([j&gt;0] f_{i,j}\leftarrowf_{i-1,j-1}\times 2\)</span></p><p>答案就是 <span class="math inline">\(f_{n,|s|}\times2^{-|s|}\)</span> ，复杂度为 <spanclass="math inline">\(\mathcal{O}(n^2)\)</span> ，感觉可能还能优化。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;  </span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;  <br><span class="hljs-keyword">using</span> ll = <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>;<br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 5007  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 1000000007  </span><br>  <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> t)</span> </span>&#123;  <br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span>;  <br>    <span class="hljs-keyword">for</span> (; t; t &gt;&gt;= <span class="hljs-number">1</span>, x = <span class="hljs-number">1l</span>l * x * x % mod)  <br>        <span class="hljs-keyword">if</span> (t &amp; <span class="hljs-number">1</span>) res = <span class="hljs-number">1l</span>l * res * x % mod;  <br>    <span class="hljs-keyword">return</span> res;  <br>&#125;  <br>  <br><span class="hljs-keyword">char</span> s[N];  <br>  <br><span class="hljs-keyword">int</span> f[N][N], pw[N] = &#123;<span class="hljs-number">1</span>&#125;;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;a = (a + b) % mod;&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">int</span> n;  <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);  <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);  <br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) pw[i] = (pw[i - <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">1</span>) % mod;  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= n; ++j) &#123;  <br>            add(f[i][j], f[i - <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>]);  <br>            <span class="hljs-keyword">if</span> (!j) add(f[i][j], f[i - <span class="hljs-number">1</span>][j]);  <br>            <span class="hljs-keyword">else</span> add(f[i][j], (f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">1</span>) % mod);  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">int</span> m = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);  <br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">1l</span>l * f[n][m] * fpow(pw[m], mod - <span class="hljs-number">2</span>) % mod;  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>AtCoder</category>
      
      <category>AtCoder Regular Contest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Knapsack Problem</tag>
      
      <tag>Counting</tag>
      
      <tag>Combinatorics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Beginner Contest 253</title>
    <link href="/atcoder/abc253/"/>
    <url>/atcoder/abc253/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>A, B 比较简单就不写了。</p><p>我的代码 : <ahref="https://atcoder.jp/contests/abc253/submissions?f.Task=&amp;f.LanguageName=&amp;f.Status=AC&amp;f.User=SGColin">AllSubmissions - SGColin</a></p><h3 id="c.-max---min-query">C. Max - Min Query</h3><blockquote><p>维护一个 multiset ，支持插入一个 <spanclass="math inline">\(x\)</span> ，删除 <spanclass="math inline">\(\min(c_i,s.count(x))\)</span> 个 <spanclass="math inline">\(x\)</span> ，查询最大值-最小值。</p></blockquote><p>开始想想直接模拟复杂度是对的就写了 <code>multiset</code>，<del>没想到<code>multiset</code> 的 <code>lower_bound</code> 太慢了 T了几个点。</del></p><p>Upd : 经提醒应该是 <code>count</code> 函数太慢了，官网描述是"Logarithmic in <a href="http://cplusplus.com/multiset::size">size</a>and linear in the number of matches" ，也就是说复杂度是 <spanclass="math inline">\(\mathcal{O}(k+\log n)\)</span> ，其中 <spanclass="math inline">\(k\)</span> 是查询数字的出现次数，所以加入 <spanclass="math inline">\(10^5\)</span> 个点之后，多查几次就超时了。</p><p>所以改为用 <code>map</code>维护一个计数器，每次某个数字新出现/消失的时候再对 <code>set</code>操作。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; cnt;<br><br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> op = rd();<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">int</span> x = rd();<br>            ++cnt[x];<br>            <span class="hljs-keyword">if</span> (cnt[x] == <span class="hljs-number">1</span>) s.insert(x);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">int</span> x = rd();<br>            <span class="hljs-keyword">int</span> t = min(rd(), cnt[x]);<br>            cnt[x] -= t;<br>            <span class="hljs-keyword">if</span> (cnt[x] == <span class="hljs-number">0</span>) s.erase(x);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, (*--s.end()) - (*s.begin()));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="d.-fizzbuzz-sum-hard">D. FizzBuzz Sum Hard</h3><blockquote><p>给定 <span class="math inline">\(n,a,b\)</span> 找出 <spanclass="math inline">\([1,n]\)</span> 内不是 <spanclass="math inline">\(a\)</span> 或 <spanclass="math inline">\(b\)</span> 倍数的数字的和。</p></blockquote><p>简单的容斥原理，扣掉 <span class="math inline">\(a,b\)</span>的倍数，加上 <span class="math inline">\(\text{lcm}(a,b)\)</span>的倍数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> b ? gcd(b, a % b) : a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), a = rd(), b = rd();<br>    ll sum = <span class="hljs-number">1l</span>l * n * (n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> ka = n / a;<br>    <span class="hljs-keyword">int</span> kb = n / b;<br>    sum -= <span class="hljs-number">1l</span>l * a * ka * (ka + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    sum -= <span class="hljs-number">1l</span>l * b * kb * (kb + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    ll lcm = <span class="hljs-number">1l</span>l * a * b / gcd(a, b);<br>    ll kl = n / lcm;<br>    sum += <span class="hljs-number">1l</span>l * lcm * kl * (kl + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, sum);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="e.-distance-sequence">E. Distance Sequence</h3><blockquote><p>计数长度为 <span class="math inline">\(n\)</span> 的序列 <spanclass="math inline">\(\{a_i\}\)</span> ：(1) <spanclass="math inline">\(a_i\in[1,m]\)</span> ; (2) <spanclass="math inline">\(\forall i\in[2,n], |a_i-a_{i-1}|\ge k\)</span>.</p></blockquote><p>直接 DP ，设 <span class="math inline">\(f_{i,j}\)</span> 表示长度为<span class="math inline">\(i\)</span> 的序列，结尾是 <spanclass="math inline">\(j\)</span> 的方案数，有： <spanclass="math display">\[f_{i,j}=\sum_{w\in[1,j-k]\cup[j+k,m]} f_{i-1,w}\]</span> 用一个前缀和优化即可，注意下 <spanclass="math inline">\(k=0\)</span> 时不要算重，复杂度 <spanclass="math inline">\(O(nm)\)</span></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 5007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 998244353</span><br><br><span class="hljs-keyword">int</span> f[N][M], sum[N][M];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (; t; t &gt;&gt;= <span class="hljs-number">1</span>, x = <span class="hljs-number">1l</span>l * x * x % mod)<br>        <span class="hljs-keyword">if</span> (t &amp; <span class="hljs-number">1</span>) res = <span class="hljs-number">1l</span>l * res * x % mod;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd(), k = rd();<br>    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, fpow(m, n)); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        f[<span class="hljs-number">1</span>][i] = <span class="hljs-number">1</span>; sum[<span class="hljs-number">1</span>][i] = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) &#123;<br>            <span class="hljs-keyword">int</span> l = max(<span class="hljs-number">0</span>, j - k);<br>            <span class="hljs-keyword">int</span> r = min(m, j + k - <span class="hljs-number">1</span>);<br>            f[i][j] = (sum[i - <span class="hljs-number">1</span>][m] - sum[i - <span class="hljs-number">1</span>][r] + mod) % mod;<br>            f[i][j] = (f[i][j] + sum[i - <span class="hljs-number">1</span>][l]) % mod;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) <br>            sum[i][j] = (sum[i][j - <span class="hljs-number">1</span>] + f[i][j]) % mod;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, sum[n][m]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="f.-operations-on-a-matrix">F. Operations on a Matrix</h3><blockquote><p>维护一个初始是全 <span class="math inline">\(0\)</span> 的 <spanclass="math inline">\(n\times m\ (n,m\le 2\ast 10^5)\)</span>的矩阵，支持：</p><ul><li>对 <span class="math inline">\([l_i,r_i]\)</span>这些列的每一个元素加 <span class="math inline">\(x\)</span></li><li>将第 <span class="math inline">\(i\)</span> 行全部赋值为 <spanclass="math inline">\(x\)</span></li><li>查询矩阵中 <span class="math inline">\((x_i,y_i)\)</span> 的值</li></ul></blockquote><p>记录每行最后一次被赋值的时间戳 <spanclass="math inline">\(lst_i\)</span> 和赋值 <spanclass="math inline">\(x_i\)</span> ，则答案为 <spanclass="math inline">\(x_i\)</span> + <spanclass="math inline">\([lst,now]\)</span> 这段操作里对 <spanclass="math inline">\(y_i\)</span> 加的值。</p><ul><li><p>在线的做法就是写一个主席树 + 标记持久化；</p></li><li><p>离线的做法就是把后面的贡献写做前缀和差分，然后两个时刻维护一下。</p></li></ul><p>学到了简老师的主席树写法 OwO</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><br><span class="hljs-keyword">int</span> tot, rttot;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> ls, rs;<br>    ll sum;<br>&#125; c[N &lt;&lt; <span class="hljs-number">6</span>];<br><br><span class="hljs-keyword">int</span> rot[N], lst[N];<br><br>ll x[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">copy</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span> </span>&#123;<br>    c[++tot] = c[rt];<br>    <span class="hljs-keyword">return</span> tot;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    rt = copy(rt);<br>    <span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;<br>        c[rt].sum += x; <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (L &lt;= mid) upd(c[rt].ls, l, mid, L, R, x);<br>    <span class="hljs-keyword">if</span> (R &gt; mid) upd(c[rt].rs, mid + <span class="hljs-number">1</span>, r, L, R, x);<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rtl, <span class="hljs-keyword">int</span> rtr, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>    ll res = c[rtr].sum - c[rtl].sum;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> res;<br>    <span class="hljs-keyword">if</span> (p &lt;= mid) res += query(c[rtl].ls, c[rtr].ls, l, mid, p);<br>    <span class="hljs-keyword">else</span> res += query(c[rtl].rs, c[rtr].rs, mid + <span class="hljs-number">1</span>, r, p);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd(), q = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; ++i) &#123;<br>        <span class="hljs-keyword">int</span> op = rd();<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br>            ++rttot;<br>            rot[rttot] = rot[rttot - <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">int</span> l = rd(), r = rd(), v = rd();<br>            upd(rot[rttot], <span class="hljs-number">1</span>, m, l, r, v);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">int</span> p = rd(); <br>            x[p] = rd(); <br>            lst[p] = rttot;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> row = rd(), col = rd();<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, x[row] + query(rot[lst[row]], rot[rttot], <span class="hljs-number">1</span>, m, col));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><h3 id="g.-swap-many-times">G. Swap Many Times</h3><blockquote><p>对于 <span class="math inline">\(n\)</span> ，初始化一个序列 <spanclass="math inline">\(a_1,\cdots,a_n\)</span> ，满足 <spanclass="math inline">\(a_i=i\)</span> 。</p><p>对于 <span class="math inline">\(n\)</span> ，有 <spanclass="math inline">\(\frac{n(n+1)}{2}\)</span> 个形如 <spanclass="math inline">\((x,y)\)</span> 的满足 <spanclass="math inline">\(1\le x&lt;y\le n\)</span> 的数对，按照 pair的规则排序。</p><p>给定 <span class="math inline">\(L,R\)</span> ，对于这个 pair序列的第 <span class="math inline">\(L\)</span> 个到第 <spanclass="math inline">\(R\)</span> 个，依次操作：交换 <spanclass="math inline">\(a_x\)</span> 和 <spanclass="math inline">\(a_y\)</span></p><p>求最终的序列。</p></blockquote><p>观察这个序列， <span class="math inline">\(x\)</span> 相同的 pair是连续出现的，考虑对于同一个 <span class="math inline">\(x\)</span>把所有操作都做掉。</p><p>假设以 <span class="math inline">\(x\)</span> 为 <code>first</code>的在 <span class="math inline">\([L,R]\)</span> 内的操作为 <spanclass="math inline">\((x,y_a),(x,y_a+1),\cdots,(x,y_b)\)</span></p><p>那么实际操作的结果就是把序列中 <spanclass="math inline">\(x,y_a,y_a+1,\cdots,y_b\)</span> 这些位置整体向右shift 一个位置。</p><p>枚举 <span class="math inline">\(x\)</span>，然后只需要一个支持某个位置插入删除的数据结构就可以了。</p><p>然后昨天趁机学了一下 rope ，内核是块状链表，理论复杂度 <spanclass="math inline">\(\mathcal{O}(n\sqrt{n})\)</span>，实际表现速度很快。</p><p>只能说非常好用，可惜 Clang 编译不了，是在 Custom Test手动调试的。</p><blockquote><p>p.s. 题解的做法貌似不需要数据结构，好像很精妙</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/rope&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_cxx;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br>rope&lt;<span class="hljs-keyword">int</span>&gt; s;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    ll L = rd(), R = rd();<br>    ll l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i) s.push_back(i);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        l = r + <span class="hljs-number">1</span>; r = l + n - i - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (L &lt;= r &amp;&amp; R &gt;= l) &#123;<br>            <span class="hljs-keyword">int</span> ll = max(l, L), rr = min(r, R);<br>            <span class="hljs-keyword">int</span> pl = i + <span class="hljs-number">1</span> + ll - l;<br>            <span class="hljs-keyword">int</span> pr = i + <span class="hljs-number">1</span> + rr - l;<br>            <span class="hljs-keyword">int</span> x = s[pr];<br>            s.erase(pr, <span class="hljs-number">1</span>);<br>            s.insert(pl, s[i]);<br>            s.erase(i, <span class="hljs-number">1</span>);<br>            s.insert(i, x);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, s[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>AtCoder</category>
      
      <category>AtCoder Beginner Contest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dynamic Programming</tag>
      
      <tag>STL</tag>
      
      <tag>Persistent Data Structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Two Identical Machines Scheduling with Agreement Graphs</title>
    <link href="/paper-notes/machine-scheduling-with-agreement-graph/"/>
    <url>/paper-notes/machine-scheduling-with-agreement-graph/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><ahref="/material/TCS19_New%20results_in_two%20identical_machines_scheduling_with_agreement_graphs.pdf">Newresults in two identical machines scheduling with agreementgraphs</a></p><p>收录于 TCS 2019的一篇文章，基于许可图的独立双机流水安排问题的一些新进展。</p><h2 id="问题模型">问题模型</h2><p>有 <span class="math inline">\(n\)</span> 个任务，第 <spanclass="math inline">\(i\)</span> 个任务需要的时间是 <spanclass="math inline">\(p_i\)</span> 。</p><p>一共有两台机器，每个任务都需要被连续地安排到某一个机器上完成。</p><p>将任务抽象成点，给定一个许可图，两个任务有边则可以分别在两个机器上同时执行。</p><p>求一个安排方案，最小化最后一个被做完的任务完成时间。</p><p><strong>现有结论：</strong></p><ul><li>许可图是树的情况下，此问题是 NP-Hard 的</li><li>许可图是毛毛虫的情况下，存在 <spanclass="math inline">\(\mathcal{O}(n)\)</span> 求最优解的方法</li></ul><h2 id="毛毛虫">毛毛虫</h2><p>毛毛虫是一种特殊的树，由一个核心路径和若干到路径距离为 <spanclass="math inline">\(1\)</span> 的点构成。</p><h3 id="notation">Notation</h3><table><colgroup><col style="width: 58%" /><col style="width: 41%" /></colgroup><thead><tr class="header"><th style="text-align: center;">Meaning</th><th style="text-align: center;">Notation</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Processing time</td><td style="text-align: center;"><spanclass="math inline">\(p\)</span></td></tr><tr class="even"><td style="text-align: center;">Maximum weighted independent set of theagreement graph <span class="math inline">\(G\)</span></td><td style="text-align: center;"><spanclass="math inline">\(I_p(G)\)</span></td></tr><tr class="odd"><td style="text-align: center;">Weight of <spanclass="math inline">\(I_p(G)\)</span> (<strong>a lower bound on theoptimal makespan</strong>)</td><td style="text-align: center;"><spanclass="math inline">\(\overline{I_p}(G) =\sum_{j\in I_p(G)}p_j\)</span></td></tr><tr class="even"><td style="text-align: center;">Set of neighbors of a job <spanclass="math inline">\(j\)</span> (generalized for a subset <spanclass="math inline">\(J&#39;\)</span>)</td><td style="text-align: center;"><spanclass="math inline">\(N(j)/N(J&#39;)\)</span></td></tr><tr class="odd"><td style="text-align: center;">Set of leaves connected to job <spanclass="math inline">\(j\)</span></td><td style="text-align: center;"><spanclass="math inline">\(Lv(j)\)</span></td></tr><tr class="even"><td style="text-align: center;">Starting time of a job <spanclass="math inline">\(j\)</span></td><td style="text-align: center;"><spanclass="math inline">\(t_j\)</span></td></tr><tr class="odd"><td style="text-align: center;">Minimum starting time of a subset <spanclass="math inline">\(J&#39;\)</span></td><td style="text-align: center;"><spanclass="math inline">\(t_j(J&#39;)=\min_{k\inJ&#39;}\{t_k\}\)</span></td></tr></tbody></table><h3 id="algorithm">Algorithm</h3><p>见原文 [4.2] Caterpillar scheduling algorithm。</p><h3 id="polynomiality-and-optimality-proof">Polynomiality and OptimalityProof</h3><p>为了简单描述，我们称在 MWIS 里的点为黑点，其余点为白点。</p><p>可以发现断掉白点之间的所有边后，这个新的图的性质是所有的边都是黑-白边。</p><blockquote><p><strong>Claim 1.</strong> 对于每个新的连通块 <spanclass="math inline">\(CAT_i\)</span> ，其内的黑点集 <spanclass="math inline">\(S_i^*\)</span> 仍然是 <spanclass="math inline">\(CAT_i\)</span> 的 MWIS</p></blockquote><p>假设存在其他的 MWIS <span class="math inline">\(I_p(CAT_i)\)</span>使得 <span class="math inline">\(\overline{I_p}(CAT_i) &gt; \sum_{j\inS_i^*} p_j\)</span> ，那么我们考虑将 <spanclass="math inline">\(CAT_i\)</span> 这一部分的 MWIS换成这个新的集合，其他部分的 MWIS 不变，那么还原回仍是原图的一个IS，而这个新的 IS 比原来的 MWIS 权值还大，所以矛盾了。 <spanclass="math display">\[\sum_{j \in S^{\prime}} p_{j}=\overline{I_{p}}(C A T)-\sum_{j \inS_{i}^{*}} p_{j}+\overline{I_{p}}\left(C AT_{i}\right)&gt;\overline{I_{p}}(C A T)\]</span></p><blockquote><p><strong>Claim 2.</strong> 对于每个新的连通块 <spanclass="math inline">\(CAT_i\)</span> 的点集 <spanclass="math inline">\(J_i\)</span>，其内任何一个白点子集的点权和不会超过其邻居黑点的点权和</p></blockquote><p>假设存在这样的一个白点集 <span class="math inline">\(W\)</span> 满足<span class="math inline">\(\sum_{j \in W} p_{j} &gt; \sum_{j \in N(W)}p_{j}\)</span> ，那么考虑将 <span class="math inline">\(S_i^*\)</span>换成 <span class="math inline">\(S&#39;= (S_i^*\setminus N(W))\cupW\)</span> ，易证<span class="math inline">\(S&#39;\)</span>也是一个独立集，且比 <span class="math inline">\(S_i^*\)</span>权值和还要大，矛盾。 <span class="math display">\[\sum_{j \in S^{\prime}} p_{j}=\sum_{j \in S_{i}^{*}} p_{j}-\sum_{j \inN(W)} p_{j}+\sum_{j \in W} p_{j}&gt;\sum_{j \in S_{i}^{*}} p_{j}\]</span></p><blockquote><p><strong>Claim 3.</strong> 对于任意白点 <spanclass="math inline">\(\beta\)</span>，其邻居黑点都会被连续地安排在第一个机器上</p></blockquote><p>分类讨论一下，如果是叶子显然；如果不是叶子，假设链上的顺序是 <spanclass="math inline">\(\alpha-\beta-\gamma\)</span> ，那么黑点顺序显然是<span class="math inline">\(\alpha-(\beta\)</span> 的叶子 <spanclass="math inline">\()-\gamma\)</span></p><blockquote><p><strong>Claim 4.</strong> 对于任意两个白点 <spanclass="math inline">\(\alpha,\beta\)</span>，如果他们被连续地安排在了某一个机器上，那么他们一定有公共邻居。</p></blockquote><p>同样分类讨论 <span class="math inline">\(\alpha\)</span> 和 <spanclass="math inline">\(\beta\)</span>的位置关系（分别是主干/叶子）即可。</p><blockquote><p><strong>Claim 5.</strong>对于任意连续安排的白点集，其邻居一定是被连续安排在一个区间内的</p></blockquote><p>前两条的自然结果，当然也需要第二条辅助理解一下，证明黑色一定是连续的。</p><hr /><blockquote><p><strong>Lemma 1.</strong> 每一个白点都会被安排在邻居对应的区间里</p></blockquote><p>反证法，不符合的就两种情况：</p><ol type="1"><li><span class="math inline">\(t_\beta &lt; t(N(\beta ))\)</span>：这种情况不存在，因为算法中每个黑点是连续安排的，如果出现该情况，这个白点会与非邻接的黑点重合，与许可图的要求相冲突。</li><li><span class="math inline">\(t_\beta+p_\beta &gt; t(N(\beta )) +\sum_{j\in N(\beta)} p_j\)</span> ：这种情况不存在，考虑从 <spanclass="math inline">\(\beta\)</span> 往前的第一个满足 <spanclass="math inline">\(t_\alpha=t_{N(\alpha)}\)</span> 的任务 <spanclass="math inline">\(\alpha\)</span> ，那么从 <spanclass="math inline">\(\alpha\)</span> 到 <spanclass="math inline">\(\beta\)</span> 这一段是连续安排的，由事实 <spanclass="math inline">\(5\)</span>，连续安排的白点集，其邻居一定是被连续安排在一个区间内的，因此白点的区间就是<span class="math inline">\([t_\alpha,t_\alpha+\sum_{j\in[\alpha,\beta]}p_j]\)</span> ，黑点的区间就是 <spanclass="math inline">\([t(N([\alpha,\beta])),t(N([\alpha,\beta])) +\sum_{j\in N([\alpha,\beta])} p_j]\)</span> ; 又由事实 <spanclass="math inline">\(2\)</span> ，对于 <spanclass="math inline">\(J_i\)</span>内任何一个白点子集，其点权和不会超过其邻居黑点的点权和，因此有 <spanclass="math inline">\(t_\alpha+\sum_{j\in[\alpha,\beta]} p_j \le\sum_{j\in N([\alpha,\beta])} p_j\)</span> ，因此 <spanclass="math inline">\([\alpha, \beta]\)</span>这一段的白点终止时间不超过黑点，因此作为最后一个完成的白点 <spanclass="math inline">\(\beta\)</span> ，有 <spanclass="math inline">\(t_\beta+p_\beta \le t(N(\beta )) + \sum_{j\inN(\beta)} p_j\)</span></li></ol><blockquote><p><strong>Theorithm 2</strong>. 本算法求出的安排方案为最优解。</p></blockquote><p>由引理 <span class="math inline">\(1\)</span> ，每个 <spanclass="math inline">\(\sigma_i\)</span>所需要的时间就是其中黑点所需的时间，即 <spanclass="math inline">\(\overline{I_p}(CAT_i)\)</span> ，因此总方案 <spanclass="math inline">\(\sigma\)</span> 所需的时间 <spanclass="math inline">\(\sum_{i} \overline{I_p}(CAT_i) =\overline{I_p}(CAT)\)</span> ，即答案下界。</p><h2 id="总结">总结</h2><p>最后放一个 pdf 版的总结：</p><div class="row">    <embed src="/material/notes_SWA.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>Summary</category>
      
      <category>Paper Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Graphs</tag>
      
      <tag>Greedy</tag>
      
      <tag>Scheduling</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round #787 (Div. 3)</title>
    <link href="/codeforces/cf787/"/>
    <url>/codeforces/cf787/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="a.-food-for-animals">A. Food for Animals</h2><blockquote><p><span class="math inline">\(a\)</span> 个狗粮，<spanclass="math inline">\(b\)</span> 个猫粮，<spanclass="math inline">\(c\)</span> 个通用粮（都能吃），能不能保证 <spanclass="math inline">\(n\)</span> 个狗 <spanclass="math inline">\(m\)</span> 个猫都有的吃？</p></blockquote><p>每个都先减掉专用的食物，剩下的看通用的够不够分即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a = rd(), b = rd(), c = rd();<br>    <span class="hljs-keyword">int</span> n = max(<span class="hljs-number">0</span>, rd() - a), m = max(<span class="hljs-number">0</span>, rd() - b);<br>    <span class="hljs-built_in">puts</span>(n + m &gt; c ? <span class="hljs-string">&quot;NO&quot;</span> : <span class="hljs-string">&quot;YES&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="b.-make-it-increasing">B. Make It Increasing</h2><blockquote><p>给一个数列，每次操作把一个位置整除 <spanclass="math inline">\(2\)</span> ，最少操作多少次使得数列严格递增？</p></blockquote><p>从后往前倒推，答案是固定的，一直做到符合要求即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> a[<span class="hljs-number">57</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i] = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i; --i) <br>        <span class="hljs-keyword">if</span> (a[i] &gt;= a[i + <span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-keyword">if</span> (a[i + <span class="hljs-number">1</span>] == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>); <span class="hljs-keyword">return</span>;&#125;<br>            <span class="hljs-keyword">while</span> (a[i] &gt;= a[i + <span class="hljs-number">1</span>]) &#123;++ans; a[i] = a[i] / <span class="hljs-number">2</span>;&#125;<br>        &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="c.-detective-task">C. Detective Task</h2><blockquote><p>有一幅画， <span class="math inline">\(n\)</span>个人看，中间某一时刻被某一个人偷走了。</p><p>问每个人他看的时候画还在不在，答案可能是有 (1) / 无 (0) / 忘记了(?)。</p><p>好人会说实话/忘记了，偷走的人会随机选一个答案，求有多少个嫌疑人。</p></blockquote><ul><li>最后一个说有（1）的人，前面的人都不会是嫌疑人：如果前面的人是嫌疑人，那么他进去的时候应该已经被偷了，他就说谎了。</li><li>第一个说无（0）的人，后面的人都不会是嫌疑人：如果后面的人是嫌疑人，那么他进去的时候还没被偷，他就说谎了</li></ul><p>因此答案是从最后一个说有的人到第一个说无的人这一段的人数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">string</span> s;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; s;<br>    <span class="hljs-keyword">int</span> n = s.length();<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) <br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;1&#x27;</span>) l = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = l; i &lt; n; ++i) <br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;r = i; <span class="hljs-keyword">break</span>;&#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, r - l + <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="d.-vertical-paths">D. Vertical Paths</h2><blockquote><p>给一棵树，问最少分成多少个从上到下的链，并输出方案。</p></blockquote><p>显然每个叶子都需要一个链，每个非叶子挑一个叶子挂上就行了，纯考实现。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-keyword">int</span> n, rt, f[N], cnt;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res[N], son[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> bel)</span> </span>&#123;<br>    res[bel].push_back(u);<br>    <span class="hljs-keyword">if</span> (son[u].empty()) &#123;++cnt; <span class="hljs-keyword">return</span>;&#125;<br>    dfs(son[u][<span class="hljs-number">0</span>], bel);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; son[u].size(); ++i) dfs(son[u][i], son[u][i]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    n = rd(); cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;res[i].clear(); son[i].clear();&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        f[i] = rd(); <br>        <span class="hljs-keyword">if</span> (f[i] == i) rt = i;<br>        <span class="hljs-keyword">else</span> son[f[i]].push_back(i);<br>    &#125;<br>    dfs(rt, rt); <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, cnt);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span> (!res[i].empty()) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, (<span class="hljs-keyword">int</span>)res[i].size());<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> j : res[i]) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, j); <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        &#125;  <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="e.-replace-with-the-previous-minimize">E. Replace With thePrevious, Minimize</h2><blockquote><p>给一个字符串，每次操作你可以选定一个字符，并把串中的<strong>所有</strong>这个字符换成字典序前一个（a变成 z ）</p><p>问 <span class="math inline">\(k\)</span>次操作内，字符串可能的字典序最小的结果是什么？</p></blockquote><p>首先如果 <span class="math inline">\(k&gt;25\)</span> ，那么我从 z 到b 都操作一遍就都变成 aaaaaaa 这样子了。</p><p>否则也一定不会对 a操作，因为次数不够变回来了，因此操作是单向的，没有循环的。</p><p>因此按照字典序贪心就完事了，维护一个 <spanclass="math inline">\(\Sigma\to \Sigma\)</span>的转移表，每次可以的话往前移动一下。</p><p>需要注意的是利用此前的结果，也就是每次做完之后记得把前缀覆盖一下。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">string</span> s;<br><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">char</span>&gt; tr;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), k = rd();<br>    <span class="hljs-built_in">cin</span> &gt;&gt; s;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> i = <span class="hljs-string">&#x27;a&#x27;</span>; i &lt;= <span class="hljs-string">&#x27;z&#x27;</span>; ++i) tr[i] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : s) &#123;<br>        <span class="hljs-keyword">while</span> (k &amp;&amp; tr[i] &gt; <span class="hljs-string">&#x27;a&#x27;</span>) &#123;<br>            --tr[i]; --k;<br>            tr[i] = tr[tr[i]];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> j = i; j &gt;= tr[i]; --j) tr[j] = min(tr[j], tr[i]);<br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : s) <span class="hljs-built_in">putchar</span>(tr[i]); <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="f.-vlad-and-unfinished-business">F. Vlad and UnfinishedBusiness</h2><blockquote><p>给一棵树，树上的两个点 <span class="math inline">\(x, y\)</span>，以及一系列点 <span class="math inline">\(a_1, a_2,\dots,a_k\)</span></p><p>求一个最短路径，从 <span class="math inline">\(x\)</span>出发，以任意顺序遍历完 <span class="math inline">\(a_1, a_2,\dots,a_k\)</span> ，最后走到 <span class="math inline">\(y\)</span></p></blockquote><p>首先一个常见的套路（虚树）是，树上遍历一个点集的最短回路，就是所有点按照dfs序一次性访问。</p><p>现在考虑让树以 <span class="math inline">\(x\)</span>为根，现在需要遍历 <spanclass="math inline">\(a_1,a_2,\dots,a_k\)</span> 这些点，最后再走到<span class="math inline">\(y\)</span> 。</p><p>其实可以看成回路遍历点集 <span class="math inline">\(x, a_1,a_2,\dots, a_k,y\)</span> ，最后再把 <spanclass="math inline">\(x\)</span> 到 <spanclass="math inline">\(y\)</span> 的距离（也就是 <spanclass="math inline">\(y\)</span> 的深度）扣掉。</p><p>所以按照 dfs 序依次访问即可，可能比较难写。</p><p>另外一种简单的写法是暴力往根跳，跳到第一个访问到的点即可，往答案里累加新增的点数* 2 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N], seq;<br><br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-keyword">int</span> n, k, x, y, f[N], ans;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa, <span class="hljs-keyword">int</span> dep)</span> </span>&#123;<br>    f[u] = fa;<br>    <span class="hljs-keyword">if</span> (u == y) ans = -dep;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (v != fa) dfs(v, u, dep + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    seq.clear();<br>    n = rd(); k = rd(); x = rd(); y = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) vis[i] = <span class="hljs-number">0</span>, e[i].clear();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i) seq.push_back(rd());<br>    seq.push_back(y);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), v = rd();<br>        e[u].push_back(v); e[v].push_back(u);<br>    &#125;<br>    dfs(x, x, <span class="hljs-number">0</span>);<br>    vis[x] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : seq)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = i; !vis[u]; u = f[u]) vis[u] = <span class="hljs-number">1</span>, ans += <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="g.-sorting-pancakes">G. Sorting Pancakes</h2><blockquote><p>给你一个序列，每次操作可以选两个相邻的两个位置一个 <spanclass="math inline">\(-1\)</span> 一个 <spanclass="math inline">\(+1\)</span> ，问最小操作多少次是的序列单减。</p></blockquote><p>看到这种问题一般都是 dp ，就是状态设计需要好好考虑一下。</p><p>设 <span class="math inline">\(f_{i,j}\)</span> 表示考虑了前 <spanclass="math inline">\(i\)</span> 位，前缀和是 <spanclass="math inline">\(j\)</span>的最小操作数，那么转移就是枚举序列最终下一个位置的数字 <spanclass="math inline">\(k\)</span> 。</p><p>即 <span class="math inline">\(f_{i+1,j+k}=\min\{f_{i+1,j+k}, f_{i,j}+ cost (i + 1, j+k)\}\)</span> 其中 <span class="math inline">\(cost(x,w)\)</span> 表示前缀 <span class="math inline">\(x\)</span>在此前基础上变成总和 <span class="math inline">\(w\)</span>的最小代价。</p><p>考虑 <span class="math inline">\(f_{i,j}\)</span> 里已经包含了让前缀<span class="math inline">\(i\)</span>合法的代价，现在其实只需要考虑新一位是 <spanclass="math inline">\(k\)</span> 的代价。</p><p>本质上我们只需要考虑第 <span class="math inline">\(i+1\)</span>位和后面的后缀交流的多少次，即 <spanclass="math inline">\(cost(i+1,j+k)=|\sum_{p=1}^{i+1}a_p-(j+k)|\)</span></p><p>那么怎么保证序列单减呢？把枚举 <span class="math inline">\(k\)</span>的循环放到最外面，从大到小，这样转移是从大到小的，比较妙。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 257</span><br><br><span class="hljs-keyword">int</span> a[N], s[N], f[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br>        s[i] = s[i - <span class="hljs-number">1</span>] + (a[i] = rd());<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(f));<br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = m; ~k; --k)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= m - k; ++j) <br>                f[i + <span class="hljs-number">1</span>][j + k] = min(f[i + <span class="hljs-number">1</span>][j + k], f[i][j] + <span class="hljs-built_in">abs</span>(j + k - s[i + <span class="hljs-number">1</span>]));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f[n][m]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Codeforces</category>
      
      <category>Codeforces Round</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dynamic Programming</tag>
      
      <tag>DFS and Similar</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dynamic Programming on Intervals</title>
    <link href="/algorithms/dp-interval/"/>
    <url>/algorithms/dp-interval/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="normal-problems">Normal Problems</h2><p>区间动态规划的一般形式：枚举长度（阶段），枚举左端点，需要的话再枚举分割点</p><h3 id="unlock-the-padlock">Unlock the Padlock</h3><div class="note note-warning">            <p><ahref="https://codingcompetitions.withgoogle.com/kickstart/round/00000000008caa74/0000000000acef55">Source:Google Kick Start 2022 Round B</a></p><p>一个滚轮密码锁由 <span class="math inline">\(n\)</span>个滚轮组成，每个的范围都是 <span class="math inline">\([0, D-1]\)</span>（循环），初始是 <span class="math inline">\(a_i\)</span> 。</p><p>每次操作选取一个区间 <span class="math inline">\(1 \le l_i \le r_i\le n\)</span> ，将区间内所有滚轮都向上或向下拨一个位置。</p><p>要求 <span class="math inline">\([l_i,r_i]\subseteq[l_{i+1},r_{i+1}]\)</span> ，问最少多少次把所有位置都变成 <spanclass="math inline">\(0\)</span> 。</p>          </div><p>区间只能扩张不能收缩，因此任意时刻拨动的区间内的数字一定要相同。</p><p>如果 <span class="math inline">\(D\)</span> 很小，可以设 <spanclass="math inline">\(f[l][r][k]\)</span> 表示区间 <spanclass="math inline">\([l,r]\)</span> 都调成 <spanclass="math inline">\(k\)</span> 的最小代价，直接 <spanclass="math inline">\(\mathcal O(n^2D^2)\)</span> 求解。</p><p>那么什么时候区间能真的扩张？当且仅当区间内的值和 <spanclass="math inline">\(a_{l-1}\)</span> 或 <spanclass="math inline">\(a_{r+1}\)</span>一样，才能向左或向右扩展一位。</p><p>因此 <strong>任意时刻操作区间的值一定和某个端点相同</strong> ，设<span class="math inline">\(f[l][r][0/1]\)</span> 表示把 <spanclass="math inline">\([l,r]\)</span> 都调成左/右端点的最小操作次数。</p><p>直接每次区间长度扩展 <span class="math inline">\(1\)</span>转移即可，复杂度 <span class="math inline">\(\mathcal O(n^2)\)</span>。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 407</span><br><br><span class="hljs-keyword">int</span> testcase;<br><br>ll n, d, f[N][N][<span class="hljs-number">2</span>], a[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">dis</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<br>    ll w = <span class="hljs-built_in">abs</span>(a - b);<br>    <span class="hljs-keyword">return</span> min(w, d - w);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getmin</span><span class="hljs-params">(ll &amp;a, ll b)</span> </span>&#123;a = (a &lt; b ? a : b);&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    n = rd(); d = rd();<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(f));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        a[i] = rd(); <br>        f[i][i][<span class="hljs-number">0</span>] = f[i][i][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> len = <span class="hljs-number">1</span>; len &lt; n; ++len) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>; l &lt;= n - len + <span class="hljs-number">1</span>; ++l) &#123;<br>            <span class="hljs-keyword">int</span> r = l + len - <span class="hljs-number">1</span>;<br>            getmin(f[l - <span class="hljs-number">1</span>][r][<span class="hljs-number">0</span>], f[l][r][<span class="hljs-number">0</span>] + dis(a[l], a[l - <span class="hljs-number">1</span>]));<br>            getmin(f[l - <span class="hljs-number">1</span>][r][<span class="hljs-number">0</span>], f[l][r][<span class="hljs-number">1</span>] + dis(a[r], a[l - <span class="hljs-number">1</span>]));<br>            getmin(f[l][r + <span class="hljs-number">1</span>][<span class="hljs-number">1</span>], f[l][r][<span class="hljs-number">0</span>] + dis(a[l], a[r + <span class="hljs-number">1</span>]));<br>            getmin(f[l][r + <span class="hljs-number">1</span>][<span class="hljs-number">1</span>], f[l][r][<span class="hljs-number">1</span>] + dis(a[r], a[r + <span class="hljs-number">1</span>]));<br>        &#125;<br>    &#125;<br>  ll ans = min(f[<span class="hljs-number">1</span>][n][<span class="hljs-number">0</span>] + dis(a[<span class="hljs-number">1</span>], <span class="hljs-number">0</span>), f[<span class="hljs-number">1</span>][n][<span class="hljs-number">1</span>] + dis(a[n], <span class="hljs-number">0</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: %lld\n&quot;</span>, ++testcase, ans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="sue-的小球">Sue 的小球</h3><div class="note note-warning">            <p><a href="https://www.luogu.com.cn/problem/P2466">Source: SDOI2008</a></p><p>有 <span class="math inline">\(n\)</span> 个球往下落，初始坐标是<span class="math inline">\(x_i\)</span> ，高度是 <spanclass="math inline">\(h_i\)</span> ，下落速度 <spanclass="math inline">\(v_i\)</span> ，可以下落到正无穷。</p><p>初始坐标在 <span class="math inline">\(x_0\)</span>，每秒可以向左/向右移动 <span class="math inline">\(1\)</span>，经过某个球的坐标时就把这个球拿走，获得当前高度的得分。</p><p>问拿到所有球的前提下，最大得分是多少。</p>          </div><p>得分 <span class="math inline">\(=\sum h_i-\sum\)</span>下降的高度，考虑动态规划求 <span class="math inline">\(\min\sum\)</span>下降的高度。</p><p>问题变为第 <span class="math inline">\(i\)</span> 个位置每秒会消耗<span class="math inline">\(v_i\)</span> ，到一个位置就会停止消耗，是 <ahref="https://www.luogu.com.cn/problem/P1220">关路灯</a> 这个模型。</p><p>考虑把坐标排序之后离散化，拿走的球一定是一个连续的区间，因此我们可以让状态停在某一个端点。</p><p>状态设计比较特殊：设 <spanclass="math inline">\(f[l][r][0/1]\)</span> 表示把 <spanclass="math inline">\([l,r]\)</span>全部拿走，最后停在左/右端点，<strong>从开始到这个时刻的最小总消耗</strong></p><p>那么考虑每次扩展一个位置，那么所耗的时间就是两点距离，<strong>每一秒</strong>的代价就是<span class="math inline">\(\sum_{i\notin [l,r]} v_i\)</span>（所有没接到的球）</p><p>需要注意把初始坐标离散化进去。枚举区间动态规划复杂度 <spanclass="math inline">\(\mathcal O(n^2)\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">double</span> db;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><br><span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">double</span>&gt; p[N];<br><br>db ans, sum[N], f[N][N][<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getmin</span><span class="hljs-params">(db &amp;a, db b)</span> </span>&#123;a = (a &lt; b ? a : b);&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), c = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) p[i].fr = rd(); <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) ans += rd() / <span class="hljs-number">1000.0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) p[i].sc = rd() / <span class="hljs-number">1000.0</span>;<br>    p[++n] = <span class="hljs-built_in">make_pair</span>(c, <span class="hljs-number">0</span>);<br>    sort(p + <span class="hljs-number">1</span>, p + <span class="hljs-number">1</span> + n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>; l &lt;= n; ++l)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> r = <span class="hljs-number">1</span>; r &lt;= n; ++r)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">2</span>; ++k) f[l][r][k] = <span class="hljs-number">1e18</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        sum[i] = sum[i - <span class="hljs-number">1</span>] + p[i].sc;<br>        <span class="hljs-keyword">if</span> (p[i].fr == c) f[i][i][<span class="hljs-number">0</span>] = f[i][i][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> len = <span class="hljs-number">1</span>; len &lt; n; ++len) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>; l &lt;= n - len + <span class="hljs-number">1</span>; ++l) &#123;<br>            <span class="hljs-keyword">int</span> r = l + len - <span class="hljs-number">1</span>;<br>            db rsum = sum[n] - sum[r] + sum[l - <span class="hljs-number">1</span>];<br>            getmin(f[l - <span class="hljs-number">1</span>][r][<span class="hljs-number">0</span>], f[l][r][<span class="hljs-number">0</span>] + (p[l].fr - p[l - <span class="hljs-number">1</span>].fr) * rsum);<br>            getmin(f[l - <span class="hljs-number">1</span>][r][<span class="hljs-number">0</span>], f[l][r][<span class="hljs-number">1</span>] + (p[r].fr - p[l - <span class="hljs-number">1</span>].fr) * rsum);<br>            getmin(f[l][r + <span class="hljs-number">1</span>][<span class="hljs-number">1</span>], f[l][r][<span class="hljs-number">0</span>] + (p[r + <span class="hljs-number">1</span>].fr - p[l].fr) * rsum);<br>            getmin(f[l][r + <span class="hljs-number">1</span>][<span class="hljs-number">1</span>], f[l][r][<span class="hljs-number">1</span>] + (p[r + <span class="hljs-number">1</span>].fr - p[r].fr) * rsum);<br>        &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3lf\n&quot;</span>, ans - min(f[<span class="hljs-number">1</span>][n][<span class="hljs-number">0</span>], f[<span class="hljs-number">1</span>][n][<span class="hljs-number">1</span>]));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="cities">Cities</h3><div class="note note-warning">            <p><a href="https://ac.nowcoder.com/acm/contest/14055/C">Source: The45th ICPC Asia Kunming Regional</a></p><p>有 <span class="math inline">\(n\)</span> 个点，第 <spanclass="math inline">\(i\)</span> 个点的颜色是 <spanclass="math inline">\(c_i\)</span> ，保证每种颜色最多出现 <spanclass="math inline">\(15\)</span> 次。</p><p>每次操作可以把<strong>一段连续且颜色相同的</strong>点都改成某个颜色，问最少操作多少次使得所有点颜色相同。</p>          </div><p>先把同样颜色且连续的缩成一段，这样相邻两两颜色都不同，假设有 <spanclass="math inline">\(m\)</span> 段。</p><p>如果所有的颜色都不同的话，那么答案就是 <spanclass="math inline">\(m-1\)</span> ，因为每次只能改颜色相同的。</p><p>但是序列中依旧有颜色相同的，因此需要动态规划求，设 <spanclass="math inline">\(f[l][r]\)</span> 表示把 <spanclass="math inline">\([l,r]\)</span> 变成相同的所需的最少次数。</p><p>转移考虑 <span class="math inline">\(c_l\)</span>有没有单独消耗一次合并：</p><ul><li><p>如果单独消耗了一次就是 <span class="math inline">\(f[l][r] = f[l+ 1][r] + 1\)</span></p></li><li><p>如果不消耗，那么枚举相同的另一个是 <spanclass="math inline">\(k\)</span> ，那么 <spanclass="math inline">\(f[l][r] = f[l + 1][k - 1] + f[k][r] +1\)</span></p></li></ul><p>后面这个方程成立的原因是，我们发现操作总是可以等效到把区间变成和端点颜色相同。</p><p>需要缩点的原因是，后一种方程里的 <spanclass="math inline">\(+1\)</span> 是为了把 <spanclass="math inline">\([l + 1][k - 1]\)</span> 变成和 <spanclass="math inline">\(c_l\)</span> 相同的，不缩会求错。</p><p>枚举区间，再枚举相同颜色，因为题目限制每种颜色最多出现 <spanclass="math inline">\(15\)</span> 次，复杂度 <spanclass="math inline">\(O(15n^2)\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">double</span> db;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getmin</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;a = (a &lt; b ? a : b);&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 5007</span><br><br><span class="hljs-keyword">int</span> a[N], f[N][N], lst[N], nxt[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x; i &lt;= n; ++i) &#123;<br>        x = rd();<br>        <span class="hljs-keyword">if</span> (!tot || x != a[tot]) a[++tot] = x;<br>        lst[i] = n + <span class="hljs-number">1</span>;<br>    &#125;<br>    n = tot;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i; --i) &#123;<br>        nxt[i] = lst[a[i]];<br>        lst[a[i]] = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> len = <span class="hljs-number">2</span>; len &lt;= n; ++len)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>; l &lt;= n - len + <span class="hljs-number">1</span>; ++l) &#123;<br>            <span class="hljs-keyword">int</span> r = l + len - <span class="hljs-number">1</span>;<br>            f[l][r] = f[l + <span class="hljs-number">1</span>][r] + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = nxt[l]; j &lt;= r; j = nxt[j])<br>                getmin(f[l][r], f[l + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + f[j][r] + <span class="hljs-number">1</span>);<br>        &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f[<span class="hljs-number">1</span>][n]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="dire-wolf">Dire Wolf</h3><div class="note note-warning">            <p><a href="https://acm.hdu.edu.cn/showproblem.php?pid=5115">Source:2014 ICPC Asia Beijing Regional</a></p><p>有 <span class="math inline">\(n\)</span> 个恐狼先锋排成一排，第<span class="math inline">\(i\)</span> 个有 <spanclass="math inline">\(a_i\)</span> 初始攻击力，并且会为两侧的恐狼临时增加 <span class="math inline">\(b_i\)</span>攻击力（死了就没了）</p><p>每次杀掉一个需要承受他当前攻击力的伤害，问杀掉所有的狼，承受最少伤害是多少。</p>          </div><p>设 <span class="math inline">\(f[l][r]\)</span> 表示把 <spanclass="math inline">\([l,r]\)</span>这个区间的所有狼杀掉所需的最小代价。</p><p>枚举最后一只杀掉的狼 <span class="math inline">\(k\)</span>，考虑此时他两侧的狼是谁？</p><p>答案是 <span class="math inline">\(l-1\)</span> 和 <spanclass="math inline">\(r+1\)</span> ，考虑区间 DP的阶段性，我只需要杀死当前枚举的区间的狼，所以两侧的狼都没有死过。</p><p>所以最后一只狼的攻击力是 <span class="math inline">\(a_k+b_{l-1}+b_{r+ 1}\)</span> ，枚举 <span class="math inline">\(k\)</span>更新，复杂度是 <span class="math inline">\(\mathcal O(n^3)\)</span> 的。<span class="math display">\[f[l][r] = \min_{l\le k\le r}\bigg\{f[l][k-1]+f[k+1][r]+a_k+b_{l-1}+b_{r+1}\bigg\}\]</span></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 207</span><br><br><span class="hljs-keyword">int</span> a[N], b[N], testcase;<br><br>ll f[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i] = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) b[i] = rd();<br>    b[n + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> len = <span class="hljs-number">1</span>; len &lt;= n; ++len)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>; l &lt;= n - len + <span class="hljs-number">1</span>; ++l) &#123;<br>            <span class="hljs-keyword">int</span> r = l + len - <span class="hljs-number">1</span>;<br>            f[l][r] = <span class="hljs-number">1e18</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> p = l; p &lt;= r; ++p) <br>                f[l][r] = min(f[l][r], f[l][p - <span class="hljs-number">1</span>] + f[p + <span class="hljs-number">1</span>][r] + a[p] + b[l - <span class="hljs-number">1</span>] + b[r + <span class="hljs-number">1</span>]);<br>        &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: %lld\n&quot;</span>, ++testcase, f[<span class="hljs-number">1</span>][n]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="you-are-the-one">You Are the One</h3><div class="note note-warning">            <p><a href="https://acm.hdu.edu.cn/showproblem.php?pid=4283">Source:2012 ICPC Asia Tianjin Regional Online</a></p><p><span class="math inline">\(n\)</span>个人排成一队依次入栈，任意时刻都可以按栈序弹出栈内的任意人数。</p><p>第 <span class="math inline">\(i\)</span> 个人如果是第 <spanclass="math inline">\(k\)</span> 个出场的，代价是 <spanclass="math inline">\(D_i\ast (k-1)\)</span>，求所有人代价和最小可能是多少。</p>          </div><p>设 <span class="math inline">\(f[l][r]\)</span>表示序列里<strong>只有</strong> <spanclass="math inline">\([l,r]\)</span>这些人（假设区间前后的人不存在），最小代价是多少。</p><p>观察这些人的出入栈的顺序，发现序列会被第一个人何时出栈划分为两个阶段。</p><p>第一个人第一个入栈，假设第 <span class="math inline">\(k\)</span>个出栈（他出栈前只压入第 <span class="math inline">\(2\sim k\)</span>个人）那么序列表现为：</p><ul><li>第 <span class="math inline">\(2\sim k\)</span>个人出入栈，这些人前面没有其他人，代价是 <spanclass="math inline">\(f[l+1][l+k-1]\)</span></li><li>第一个人出栈，前面有 <span class="math inline">\(k-1\)</span>个人，代价是 <span class="math inline">\(D_l\ast(k-1)\)</span></li><li>第 <span class="math inline">\(k+1\sim n\)</span>个人出入栈，这些人前面都增加 <span class="math inline">\(k\)</span>个人，代价是 <spanclass="math inline">\(f[l+k][r]+\sum_{i=l+k+1}^rD_i\ast k\)</span></li></ul><p>枚举 <span class="math inline">\(k\)</span> 更新，复杂度是 <spanclass="math inline">\(\mathcal O(n^3)\)</span> 的。 <spanclass="math display">\[f[l][r] =\min_{1\le k\le r-l+1} \bigg\\{f[l + 1][l +k-1]+D_l\ast(k-1)+f[l+k][r] + \sum_{i=l+k}^r D_i\ast k\bigg\\}\]</span></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 107</span><br><br><span class="hljs-keyword">int</span> testcase;<br><br>ll d[N], sum[N], f[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getmin</span><span class="hljs-params">(ll &amp;a, ll b)</span> </span>&#123;a = (a &lt; b ? a : b);&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        d[i] = rd();<br>        sum[i] = sum[i - <span class="hljs-number">1</span>] + d[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> len = <span class="hljs-number">2</span>; len &lt;= n; ++len)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>; l &lt;= n - len + <span class="hljs-number">1</span>; ++l) &#123;<br>            <span class="hljs-keyword">int</span> r = l + len - <span class="hljs-number">1</span>;<br>            f[l][r] = <span class="hljs-number">1e18</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= len; ++k) <br>                getmin(f[l][r], f[l + <span class="hljs-number">1</span>][l + k - <span class="hljs-number">1</span>] + d[l] * (k - <span class="hljs-number">1</span>) + f[l + k][r] + (sum[r] - sum[l + k - <span class="hljs-number">1</span>]) * k);<br>        &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: %lld\n&quot;</span>, ++testcase, f[<span class="hljs-number">1</span>][n]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="二叉查找树">二叉查找树</h3><div class="note note-warning">            <p><a href="https://www.luogu.com.cn/problem/P1864">Source: NOI2009</a></p><p>给定 <span class="math inline">\(n\)</span> 个节点的<code>key,value,times</code> ，修改一个点的 <code>value</code> 代价是<span class="math inline">\(K\)</span> ，修改后要保证两两<code>value</code> 不同。</p><p>然后把这些点建出一个 Treap，定义访问代价 <spanclass="math inline">\(\sum_{i} depth_i\ast times_{i}\)</span>，最小化修改代价 + 访问代价。</p>          </div><p>核心点是 <code>key</code>不能修改，所以中序遍历是固定的，根左侧是左子树，根右侧是右子树。</p><p>考虑在中序遍历上做区间 DP ，枚举谁做根，那么根的 <code>value</code>应当比左右子树的节点 <code>value</code> 要小。</p><p>所以状态里我们还要记一下当前子树的最小 <code>value</code>是多少。</p><p>设 <span class="math inline">\(f[l][r][k]\)</span> 表示中序遍历区间<span class="math inline">\([l,r]\)</span> 内的点建树，里面的点<code>value</code> 权值 <span class="math inline">\(\ge k\)</span>，的最小代价。</p><ul><li><p>如果这个点的权值不需要改（前提 <spanclass="math inline">\(value_{rt}\ge k\)</span>），那么子树里的权值要比他大 <span class="math display">\[f[l][r][k] = \min_{l\le rt\le r}\bigg\{f[l][rt - 1][value_{rt}]+f[rt +1][r][value_{rt}] + \sum_{i=l}^r times_i\bigg\}\]</span></p></li><li><p>如果这个点权值需要改，那么子树的权值下界也是 <spanclass="math inline">\(k\)</span> <span class="math display">\[f[l][r][k] = \min_{l\le rt\le r}\bigg\{f[l][rt - 1][k]+f[rt + 1][r][k] +\sum_{i=l}^r times_i + K\bigg\}\]</span></p></li></ul><p>因为初始两两节点 <code>value</code>就不同，而且可以调整成任意实数，所以方程中对子树权值的约束不用修改。</p><p>答案是 <span class="math inline">\(\min_k f[1][n][k]\)</span>，把权值离散化一下，DP 复杂度是 <span class="math inline">\(\mathcalO(n^4)\)</span> 的。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br><br><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; tr;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 73</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><span class="hljs-keyword">int</span> k, v, t;&#125; c[N];<br><br>ll f[N][N][N], sumt[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getmin</span><span class="hljs-params">(ll &amp;a, ll b)</span> </span>&#123;a = (a &lt; b ? a : b);&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), w = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) c[i].k = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) s.push_back(c[i].v = rd());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) c[i].t = rd();<br>    sort(s.begin(), s.end());<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : s) tr[i] = ++cnt;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) c[i].v = tr[c[i].v];<br>    sort(c + <span class="hljs-number">1</span>, c + <span class="hljs-number">1</span> + n, [](node x, node y)&#123;<span class="hljs-keyword">return</span> x.k &lt; y.k;&#125;);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) sumt[i] = sumt[i - <span class="hljs-number">1</span>] + c[i].t;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> len = <span class="hljs-number">1</span>; len &lt;= n; ++len) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>; l &lt;= n - len + <span class="hljs-number">1</span>; ++l) &#123;<br>            <span class="hljs-keyword">int</span> r = l + len - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt;= n; ++k) &#123;<br>                f[l][r][k] = <span class="hljs-number">1e18</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> rt = l; rt &lt;= r; ++rt) &#123;<br>                    <span class="hljs-keyword">if</span> (c[rt].v &gt;= k)<br>                        getmin(f[l][r][k], f[l][rt - <span class="hljs-number">1</span>][c[rt].v] + f[rt + <span class="hljs-number">1</span>][r][c[rt].v]);<br>                    getmin(f[l][r][k], f[l][rt - <span class="hljs-number">1</span>][k] + f[rt + <span class="hljs-number">1</span>][r][k] + w);<br>                &#125;<br>                f[l][r][k] += sumt[r] - sumt[l - <span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    ll ans = <span class="hljs-number">1e18</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt;= n; ++k) ans = min(ans, f[<span class="hljs-number">1</span>][n][k]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="pre-order">Pre-Order</h3><div class="note note-warning">            <p><a href="https://atcoder.jp/contests/abc252/tasks/abc252_g">Source :AtCoder Beginner Contest 252 G</a></p><p>定义 dfs序：从根开始，每次选择未访问过的最小儿子访问，每个点第一次被访问时记入序列尾。</p><p>现给定 dfs 序，问有多少棵树符合。 <span class="math inline">\(n\le500\)</span></p>          </div><p>考虑多叉树转二叉树（左儿子右兄弟，这是一个双射），那么要求就变为右儿子一定要小于父节点的编号。</p><p>设 <span class="math inline">\(f_{l, r}\)</span> 表示 <spanclass="math inline">\([l,r]\)</span> 这段区间，以 <spanclass="math inline">\(l\)</span> 为根形成这样一棵二叉树的方案数。</p><p>枚举右儿子是 <span class="math inline">\(k\in[l + 1, r], a[k] &gt;a[l]\)</span> ，有转移 <span class="math inline">\(f_{l, r} = \sum_kf_{l,k - 1} \times f_{k, r}\)</span></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 507</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 998244353</span><br><br>ll a[N], f[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        a[i] = rd(); f[i][i] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> len = <span class="hljs-number">2</span>; len &lt; n; ++len) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">2</span>; l &lt;= n - len + <span class="hljs-number">1</span>; ++l) &#123;<br>            <span class="hljs-keyword">int</span> r = l + len - <span class="hljs-number">1</span>;<br>            f[l][r] = f[l + <span class="hljs-number">1</span>][r];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = l + <span class="hljs-number">1</span>; k &lt;= r; ++k)<br>                <span class="hljs-keyword">if</span> (a[k] &gt; a[l]) f[l][r] = (f[l][r] + <span class="hljs-number">1l</span>l * max(<span class="hljs-number">1l</span>l, f[l + <span class="hljs-number">1</span>][k - <span class="hljs-number">1</span>]) * f[k][r]) % mod;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, f[<span class="hljs-number">2</span>][n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Summary</category>
      
      <category>Algorithms</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dynamic Programming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Grand Contest 001</title>
    <link href="/atcoder/agc001/"/>
    <url>/atcoder/agc001/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>官方题解：<ahref="https://img.atcoder.jp/agc001/editorial.pdf">https://img.atcoder.jp/agc001/editorial.pdf</a></p><p>听说多做 AGC可以提升智力，于是来尝试提升一下智力<del>（虽然都是抄的题解）</del>。</p><h2 id="a---bbq-easy">A - BBQ Easy</h2><blockquote><p><span class="math inline">\(2n\)</span>个数，最大化两两一组分组后，每组两个数取 <spanclass="math inline">\(\min\)</span> 的和。</p></blockquote><p>从小到大排序之后，两两组合，答案是奇数位置的和。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; a;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = (rd() &lt;&lt; <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a.push_back(rd());<br>sort(a.begin(), a.end());<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">2</span>) ans += a[i];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="b---mysterious-light">B - Mysterious Light</h2><blockquote><p>边长为 <span class="math inline">\(n\)</span> 的正三角形 ABC 的边 AB上 <span class="math inline">\(x\)</span> 处平行 BC 射出一条激光。</p><p>碰到边界反射，碰到此前的光线也反射，求回到起点的路径长度。</p></blockquote><p>没看懂官方题解的简单做法。</p><p>首先前两段光路长度和是 <span class="math inline">\(n\)</span>，会切掉两个角，变成一个平行四边形。</p><p>对于平行四边形（边长分别为 <span class="math inline">\(a\)</span> 和<span class="math inline">\(b\)</span> ），光线从一个 <spanclass="math inline">\(120^\circ\)</span> 角出发，沿角平分线射出距离为<span class="math inline">\(f(a,b)\)</span></p><p>有 <span class="math inline">\(f(a,0)=-a, f(a,b) = 2 \ast\displaystyle\lfloor \frac{a}{b}\rfloor \ast b +f(b, a \% b)\)</span>，也就是每次都切短边直到长短边交换，减掉最后一次多算的。</p><p>答案就是 <span class="math inline">\(n+f(x,n-x)\)</span> ，递归形式和gcd 相同，所以复杂度是 <span class="math inline">\(\mathcal O(\logn)\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>ll x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">f</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> b ? <span class="hljs-number">2</span> * (a / b) * b + f(b, a % b) : -a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>ll n = rd(), x = rd();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, n + f(x, n - x));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="c---shorten-diameter">C - Shorten Diameter</h2><blockquote><p>给一棵树，每次可以删掉一个叶子，问最少删多少次使得直径不超过 <spanclass="math inline">\(k\)</span></p></blockquote><p>本来想贪心每次删一个直径的端点，但是不对，因为有可能这个点会被保留到最后。</p><p>因为 <span class="math inline">\(n\)</span> 只有 <spanclass="math inline">\(2000\)</span> ，所以可以 <spanclass="math inline">\(\mathcal{O}(n^2)\)</span>暴力，那么枚举中心就好了。</p><ul><li>如果 <span class="math inline">\(k\)</span>是奇数，枚举中心的边，把树分成两棵，根就是这条边的两个端点，每棵只保留深度小于<span class="math inline">\(\lfloor k/2\rfloor\)</span> 的点</li><li>如果 <span class="math inline">\(k\)</span>是偶数，枚举中心的点，以这个点为根，只保留深度小于 <spanclass="math inline">\(\lfloor k/2\rfloor\)</span> 的点</li></ul><p>找到上述情况里需要删除的点最少的情况即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 2007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-built_in">vector</span>&lt;pii&gt; r;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-keyword">int</span> dep[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br><span class="hljs-keyword">if</span> (dep[v] &lt; <span class="hljs-number">0</span>) &#123;dep[v] = dep[u] + <span class="hljs-number">1</span>; dfs(v);&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(), k = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, u, v; i &lt; n; ++i) &#123;<br>u = rd(); v = rd();<br>e[u].pb(v); e[v].pb(u);<br><span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) r.pb(mp(u, v));<br>&#125;<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [u, v] : r) &#123;<br><span class="hljs-built_in">memset</span>(dep, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(dep));<br>dep[u] = <span class="hljs-number">0</span>; dep[v] = <span class="hljs-number">0</span>; dfs(u); dfs(v);<br><span class="hljs-keyword">int</span> tmpans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) tmpans += (dep[j] &lt;= k / <span class="hljs-number">2</span>);<br>ans = max(ans, tmpans);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-built_in">memset</span>(dep, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(dep));<br>dep[i] = <span class="hljs-number">0</span>; dfs(i);<br><span class="hljs-keyword">int</span> tmpans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) tmpans += (dep[j] &lt;= k / <span class="hljs-number">2</span>);<br>ans = max(ans, tmpans);<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n - ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="d---arrays-and-palindrome">D - Arrays and Palindrome</h2><blockquote><p>给定序列 <span class="math inline">\(\{A_i\}\)</span> ，满足 <spanclass="math inline">\(\sum A_i=N\)</span> ，需要重排 <spanclass="math inline">\(\{A_i\}\)</span> ，并且构造 <spanclass="math inline">\(\{B_i\}\)</span> ，满足 <spanclass="math inline">\(\sum B_i=N\)</span> ，且满足：</p><p>如果一个长度为 <span class="math inline">\(N\)</span> 的串 <spanclass="math inline">\(S\)</span> 满足（ <spanclass="math inline">\(S[l,r]\)</span> 表示 <spanclass="math inline">\(S[l]S[l+1]\dots S[r]\)</span> 这一段子串）：</p><ul><li><span class="math inline">\(\forall i,\ S[\sum_{j=1}^{i-1}A_j+1,\sum_{j=1}^i A_j]\)</span> 是回文的（也就是按照 <spanclass="math inline">\(A_i\)</span> 分割成若干段子串，都是回文的）</li><li><span class="math inline">\(\forall i,\ S[\sum_{j=1}^{i-1}B_j+1,\sum_{j=1}^i B_j]\)</span> 是回文的（也就是按照 <spanclass="math inline">\(B_i\)</span> 分割成若干段子串，都是回文的）</li></ul><p>那么 <strong>一定能推出</strong> <spanclass="math inline">\(S\)</span> 中全部字符都相同。</p></blockquote><p>好有意思的题目啊！！建议先看官方题解。</p><p>假如我们确定了 <span class="math inline">\(\{A\}\)</span>的顺序，那么 <span class="math inline">\(\{A\}\)</span>把序列分成若干段，每段对称的位置字符要相同。</p><p>我们如果把 <span class="math inline">\(N\)</span> 个位置看作 <spanclass="math inline">\(N\)</span> 个点，那么可以把 <spanclass="math inline">\(A\)</span> 的所有要求对称的位置连一条边。</p><p>现在 <span class="math inline">\(B\)</span>相当于是要补一些边，使得所有点都连通。</p><div class="note note-success">            <p>假设所有的 <span class="math inline">\(A_i\)</span> 均为偶数，那么令<span class="math inline">\(|\{B\}|=|\{A\}|\)</span> ，先让 <spanclass="math inline">\(B_i=A_i\)</span> ，然后 $B_1 B_1-1,B_{|{B}|}B_{|{B}|}+1 $</p><p>那么（除第一段外）每一段的最后一个都和前一段的最后一个连边，连通了两段；</p><p>此外每一段内的连边都是奇偶位置错开的，所以整个图是连通的。</p>          </div><p>然后考虑 <span class="math inline">\(A_i\)</span>有奇数，可以证明最多允许有两段奇数，把这两段放在两边，还是不影响答案的。</p><p>如果奇数长度段超过两个，一定无解，具体证明看官方题解，大概方法就是证明了边数凑不到<span class="math inline">\(n-1\)</span> 。</p><p>感觉这个构造真的很 useful 啊（</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ppb pop_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> psb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ppf pop_front</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> psf push_front</span><br><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; s, odd;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> m = rd(), n = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x; i &lt;= n; ++i) &#123;<br>x = rd();<br>(x &amp; <span class="hljs-number">1</span>) ? odd.psb(x) : s.psb(x);<br>&#125;<br><span class="hljs-keyword">if</span> (odd.size() &gt; <span class="hljs-number">2</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Impossible&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br><span class="hljs-keyword">if</span> (odd.size() &gt; <span class="hljs-number">0</span>) s.psf(odd[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">if</span> (odd.size() &gt; <span class="hljs-number">1</span>) s.psb(odd[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : s) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, x); <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//需要注意只有一个元素和第一个元素是1的情况</span><br><span class="hljs-keyword">if</span> (s.size() == <span class="hljs-number">1</span>) s.psb(<span class="hljs-number">0</span>);<br>--s.front(); ++s.back();<br><span class="hljs-keyword">if</span> (s.front() == <span class="hljs-number">0</span>) s.ppf();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, s.size());<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x : s) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, x);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="e---bbq-hard">E - BBQ Hard</h2><blockquote><p>给定 <span class="math inline">\(N\)</span> 个 <spanclass="math inline">\((A_i,B_i)\)</span> ，求： <spanclass="math display">\[\sum_{i=1}^{n-1}\sum_{j=i+1}^n {A_i+A_j+B_i+B_j\choose A_i+A_j} \mod10^9+7\]</span> 数据范围 <span class="math inline">\(2\le n\le 2\times10^5,1\le a_i,b_i\le 2000\)</span></p></blockquote><div class="note note-success">            <p>只能往右和往上走，计数从 <spanclass="math inline">\((x_0,y_0)\)</span> 到 <spanclass="math inline">\((x_1,y_1)\)</span>的路径方案数，考虑哪些步是横向走，是 <spanclass="math inline">\(\displaystyle{ {x_1-x_0+y_1-y_0} \choose {x_1-x_0}}\)</span> 。</p><p>当然也可以用一个二维递推，令 <code>f[x0][y0]=1</code> ，每次<code>f[i][j] = f[i - 1][j] + f[i][j - 1]</code> ，答案<code>f[x1][y1]</code> 。</p>          </div><p>把式中 <spanclass="math inline">\(\displaystyle{A_i+A_j+B_i+B_j\chooseA_i+A_j}\)</span> 变形为 <span class="math inline">\(\displaystyle{A_i-(-A_j)+B_i-(-B_j)\choose A_i-(-A_j)}\)</span> ，可解读为从 <spanclass="math inline">\((-A_j,-B_j)\)</span> 到 <spanclass="math inline">\((A_i,B_i)\)</span> 的路径数。</p><p>那么把求和改一下形式，两个循环都改成从 <spanclass="math inline">\(1\)</span> 到 <spanclass="math inline">\(n\)</span> ，然后扣掉自己到自己的贡献，再除 <spanclass="math inline">\(2\)</span> 就是答案。 <spanclass="math display">\[ans = \frac{\sum_{i=1}^{N} \sum_{j=1}^{N} \displaystyle{A_{i}+B_{i}+A_{j}+B_{j} \choose A_{i}+B_{i}}-\sum_{i=1}^{N} {2\astA_{i}+2\ast B_{i} \choose 2 \ast A_{i}}}{2}\mod 10^9+7\]</span>前一半考虑用上面提到的递推方法整体一起求（加个偏移量把坐标调成正的）：</p><p>先给所有的 <code>f[-a[i]][-b[i]] += 1</code> ，然后递推完查所有的<code>f[a[i]][b[i]]</code> 即可。</p><p>后一半用组合数直接算就好了。总复杂度 <spanclass="math inline">\(\mathcal{O}(n+4\ast \max a_i\ast \maxb_i)\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> A 4007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> G 2001</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 8007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 1000000007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inv2 500000004</span><br><br><span class="hljs-keyword">int</span> f[A][A], fac[M], ifac[M], x[N], y[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> t = mod - <span class="hljs-number">2</span>)</span> </span>&#123;<br><span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (; t; t &gt;&gt;= <span class="hljs-number">1</span>, x = <span class="hljs-number">1l</span>l * x * x % mod)<br><span class="hljs-keyword">if</span> (t &amp; <span class="hljs-number">1</span>) res = <span class="hljs-number">1l</span>l * res * x % mod;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (; x &lt; <span class="hljs-number">0</span>; x += mod);<br><span class="hljs-keyword">for</span> (; x &gt;= mod; x -= mod);<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (n &lt; m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1l</span>l * fac[n] * ifac[m] % mod * ifac[n - m] % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>fac[<span class="hljs-number">0</span>] = ifac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; M; ++i) fac[i] = <span class="hljs-number">1l</span>l * fac[i - <span class="hljs-number">1</span>] * i % mod;<br>ifac[M - <span class="hljs-number">1</span>] = fpow(fac[M - <span class="hljs-number">1</span>]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = M - <span class="hljs-number">2</span>; i; --i) ifac[i] = <span class="hljs-number">1l</span>l * ifac[i + <span class="hljs-number">1</span>] * (i + <span class="hljs-number">1</span>) % mod;<br><br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>x[i] = rd(); y[i] = rd();<br>++f[-x[i] + G][-y[i] + G];<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; A; ++i)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; A; ++j)<br>f[i][j] = mo(f[i][j] + f[i - <span class="hljs-number">1</span>][j] + f[i][j - <span class="hljs-number">1</span>]);<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>ans = mo(ans + f[x[i] + G][y[i] + G] - C(<span class="hljs-number">2</span> * (x[i] + y[i]), <span class="hljs-number">2</span> * x[i]));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-number">1l</span>l * ans * inv2 % mod);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="f---wide-swap">F - Wide Swap</h2><blockquote><p>给定一个 <span class="math inline">\(\{1,2,\dots,n\}\)</span> 的排列<span class="math inline">\(\{P\}\)</span> ，每次操作：</p><p>选取两个距离至少为 <span class="math inline">\(k\)</span> 的位置<span class="math inline">\(i,j\)</span> 且 <spanclass="math inline">\(|P_i-P_j|=1\)</span> ，交换 <spanclass="math inline">\(i,j\)</span> 两个位置上的数。</p><p>你可以任意次数操作，问可能得到的最小字典序排列是什么。</p></blockquote><p>排列求个逆（即 <span class="math inline">\(Q_{P_i}=i\)</span>），<span class="math inline">\(Q_i\)</span> 的含义就是数字 <spanclass="math inline">\(i\)</span> 的位置。</p><p>问题转化为：相邻并且差值至少为 <span class="math inline">\(k\)</span>的两个 <span class="math inline">\(Q\)</span> 可以交换，<spanclass="math inline">\(Q\)</span>可能最小字典序是什么（小的数字位置靠前）。</p><div class="note note-success">            <p>如果 <span class="math inline">\(|Q_i-Q_j|&lt;k\)</span> ，那么 <spanclass="math inline">\(Q_i\)</span> 和 <spanclass="math inline">\(Q_j\)</span>在序列里的相对顺序永远都不能改变（换到相邻就不能操作了）。</p><p>反之如果两个位置差值 <span class="math inline">\(\ge k\)</span>，只要能换到相邻，就一定可以交换，如果换不到相邻，一定是上面的约束导致的。</p><p>所以如果 <span class="math inline">\(|Q_i-Q_j|\ge k\)</span> ，那么<span class="math inline">\(Q_i\)</span> 和 <spanclass="math inline">\(Q_j\)</span> 在序列里的顺序没有任何要求。</p>          </div><p>只有 " <span class="math inline">\(a\)</span> 一定要在 <spanclass="math inline">\(b\)</span> 前"这种约束的最小字典序排列显然可以用优先队列的拓扑排序求。</p><p>但是边的级别是 <span class="math inline">\(\mathcal{O}(n^2)\)</span>的： <span class="math inline">\(Q_i\)</span> 会向 <spanclass="math inline">\(\forall j&gt;i,Q_j\in[Q_i-k + 1,Q_i +k-1]\)</span> 的所有 <span class="math inline">\(Q_j\)</span> 连边。</p><p>考虑去掉一些没有意义的边：假设 <spanclass="math inline">\((x,y),(y,z),(x,z)\)</span> 都存在，那么 <spanclass="math inline">\((x,z)\)</span> 显然是没必要存的。</p><p>把区间拆成两块 <spanclass="math inline">\([Q_i-k+1,Q_i],[Q_i,Q_i+k-1]\)</span>，这两个区间内部有约束的肯定会两两连边（单向）。</p><p>因此 <span class="math inline">\(Q_i\)</span>并不需要向这里面的全部点连边，完全可以继承区间里最靠前的位置的所有边，然后让自己指向这个位置即可。</p><p>形式化的说，对于某个区间，找到 <span class="math inline">\(pos =\min_{Q_j\in [\text{interval}]} j\)</span> ，那么只需要连 <spanclass="math inline">\(Q_i\to Q_{pos}\)</span> ，其余边都间接继承 <spanclass="math inline">\(Q_{pos}\)</span> 的。</p><p>这样边的级别（也就是拓扑排序复杂度）就是 <spanclass="math inline">\(\mathcal{O}(n)\)</span> 的，找 <spanclass="math inline">\(pos\)</span> 需要单点更新查区间 <spanclass="math inline">\(\min\)</span> ，用线段树复杂度 <spanclass="math inline">\(\mathcal{O}(n\log n)\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ls (rt &lt;&lt; 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rs (rt &lt;&lt; 1 | 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span><br><br><span class="hljs-keyword">int</span> mn[N &lt;&lt; <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span> </span>&#123;<br>mn[rt] = min(mn[ls], mn[rs]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (l == r) &#123;<br>mn[rt] = v; <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (k &lt;= mid) upd(ls, l, mid, k, v);<br><span class="hljs-keyword">else</span> upd(rs, mid + <span class="hljs-number">1</span>, r, k, v);<br>pushup(rt);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">qmn</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class="hljs-keyword">return</span> mn[rt];<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">1e9</span>;<br><span class="hljs-keyword">if</span> (L &lt;= mid) ans = min(ans, qmn(ls, l, mid, L, R));<br><span class="hljs-keyword">if</span> (R &gt; mid) ans = min(ans, qmn(rs, mid + <span class="hljs-number">1</span>, r, L, R));<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-keyword">int</span> p[N], q[N], deg[N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;, greater&lt;<span class="hljs-keyword">int</span>&gt; &gt;que;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(), k = rd();<br><span class="hljs-built_in">memset</span>(mn, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(mn));<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) q[p[i] = rd()] = i;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i; --i) &#123;<br><span class="hljs-keyword">int</span> j = qmn(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, q[i], min(n, q[i] + k - <span class="hljs-number">1</span>));<br><span class="hljs-keyword">if</span> (j &lt;= n) &#123;e[q[i]].pb(q[j]); ++deg[q[j]];&#125;<br>j = qmn(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, max(<span class="hljs-number">1</span>, q[i] - k + <span class="hljs-number">1</span>), q[i]);<br><span class="hljs-keyword">if</span> (j &lt;= n) &#123;e[q[i]].pb(q[j]); ++deg[q[j]];&#125;<br>upd(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, q[i], i);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br><span class="hljs-keyword">if</span> (!deg[i]) que.push(i);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">int</span> u = q[i] = que.top(); que.pop();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) <br><span class="hljs-keyword">if</span> (!(--deg[v])) que.push(v);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) p[q[i]] = i;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, p[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>AtCoder</category>
      
      <category>AtCoder Grand Contest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Constructive Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Beginner Contest 244</title>
    <link href="/atcoder/abc224/"/>
    <url>/atcoder/abc224/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>A, B, C 比较简单就不写了。</p><p>我的代码 : <ahref="https://atcoder.jp/contests/abc244/submissions?f.Task=&amp;f.LanguageName=&amp;f.Status=AC&amp;f.User=SGColin">AllSubmissions - SGColin</a></p><h3 id="d.-swap-hats">D. Swap Hats</h3><blockquote><p>给定两个 <code>"RGB"</code> 这个字符串的排列 <spanclass="math inline">\(A,B\)</span> ，每次操作可以交换两个位置。</p><p>问能否正好操作 <span class="math inline">\(10^{18}\)</span> 把 <spanclass="math inline">\(A\)</span> 变成 <spanclass="math inline">\(B\)</span> 。</p></blockquote><p>假设 <code>R=1,G=2,B=3</code>，我们可以通过逆序数奇/偶把所有排列分两类。</p><p>因为只有三个位置，可以发现转换关系的连边是个完全二分图。</p><p>所以根据 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 不同的位数 <spanclass="math inline">\(cnt\)</span> 即可判定是哪种情况。</p><ul><li><span class="math inline">\(cnt=0\)</span>完全相同，一直交换某两位即可。</li><li><span class="math inline">\(cnt=2\)</span>逆序数相同，但排列不同，不可能通过偶数次交换得到。</li><li><span class="math inline">\(cnt=3\)</span>逆序数不同，因为是完全二分图，一定可以通过两次操作把 <spanclass="math inline">\(A\)</span> 变成 <spanclass="math inline">\(B\)</span> ，后面参考 <spanclass="math inline">\(cnt=0\)</span> 操作即可。</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">char</span> a[<span class="hljs-number">3</span>], b[<span class="hljs-number">3</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isalpha</span>(c)) c = getchar();<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i) a[i] = gc();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i) b[i] = gc();<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i) cnt += (a[i] != b[i]);<br>    <span class="hljs-built_in">puts</span>((cnt == <span class="hljs-number">0</span> || cnt == <span class="hljs-number">3</span>) ? <span class="hljs-string">&quot;Yes&quot;</span> : <span class="hljs-string">&quot;No&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="e.-king-bombee">E. King Bombee</h3><blockquote><p>定义无向图 <span class="math inline">\(G=(V,E)\)</span> 的一个长度为<span class="math inline">\(K\)</span> 的路径序列 <spanclass="math inline">\(\{A\}\)</span> ：</p><p>由 <span class="math inline">\(K+1\)</span> 个点编号 <spanclass="math inline">\(A_0,\dots,A_K\in V\)</span> 构成，<spanclass="math inline">\(A_0\)</span> 是起点，<spanclass="math inline">\(A_K\)</span> 是终点，且 <spanclass="math inline">\(\forall 0\le i &lt; K, (A_i, A_{i+1})\inE\)</span></p><p>给定无向图 <span class="math inline">\(G\ (|V|\le 2000,|E|\le2000)\)</span> 求有多少个长度为 <span class="math inline">\(K\ (K\le2000)\)</span> 的路径序列，满足：</p><p>起点为 <span class="math inline">\(S\)</span> ，终点为 <spanclass="math inline">\(T\)</span> ，且点 <spanclass="math inline">\(X\)</span> 在序列中出现偶数次（可以为 <spanclass="math inline">\(0\)</span> ) 。</p></blockquote><p>感觉最近 ABC 每场都会有一道比较暴力的 DP，就看敢不敢写（</p><p>设 <code>f[i][u][0/1]</code> 表示当前考虑长度为 <spanclass="math inline">\(i\)</span> 的路径，起点是 <spanclass="math inline">\(S\)</span> ，终点是 <spanclass="math inline">\(u\)</span> ，当前节点 <spanclass="math inline">\(X\)</span> 在其中出现偶数/奇数次的方案数。</p><p>初始状态 <code>f[0][S][S==X] = 1</code> ，答案<code>f[K][T][0]</code> 。</p><p>转移暴力做就可以了，枚举下一步走哪里（ <spanclass="math inline">\(u\to v\)</span> ）：<code>f[i+1][v][k^(v == X)] += f[i][u][k]</code> 。</p><p>这个题的核心在复杂度计算，外层枚举 <spanclass="math inline">\(i\)</span> 是 <span class="math inline">\(\mathcalO(n)\)</span> 的，内层枚举 <span class="math inline">\(u\)</span> 是<span class="math inline">\(\mathcal O(n)\)</span> 的，枚举 <spanclass="math inline">\(v\)</span> 复杂度怎么算？</p><p>把后两个的复杂度放到一起考虑，就是 <spanclass="math inline">\(\sum_{u=1}^n deg(u) = \mathcal O(m)\)</span></p><p>所以总复杂度是 <span class="math inline">\(\mathcal O(nm)\)</span>的。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 2007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 998244353</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> add(a, b) (a) = ((a) + (b)) % mod</span><br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-keyword">int</span> f[N][N][<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    <span class="hljs-keyword">int</span> k = rd(), s = rd(), t = rd(), x = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), v = rd();<br>        e[u].push_back(v); e[v].push_back(u);<br>    &#125;<br>    f[<span class="hljs-number">0</span>][s][x == s] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">1</span>; ++k) &#123;<br>                <span class="hljs-keyword">if</span> (!f[i][u][k]) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) &#123;<br>                    <span class="hljs-keyword">int</span> tar = (k ^ (v == x));<br>                    add(f[i + <span class="hljs-number">1</span>][v][tar], f[i][u][k]);<br>                &#125;<br>            &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f[k][t][<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="f.-shortest-good-path">F. Shortest Good Path</h3><blockquote><p>题意比较复杂，我简单描述一下。</p><p>定义无向图 <span class="math inline">\(G=(V,E)\)</span> 的一个长度为<span class="math inline">\(K+1\)</span> 的路径序列 <spanclass="math inline">\(\{A\}\)</span> ：</p><p>由 <span class="math inline">\(K+1\)</span> 个点编号 <spanclass="math inline">\(A_0,\dots,A_K\in V\)</span> 构成，<spanclass="math inline">\(A_0\)</span> 是起点，<spanclass="math inline">\(A_K\)</span> 是终点，且 <spanclass="math inline">\(\forall 0\le i &lt; K, (A_i, A_{i+1})\inE\)</span></p><p>定义路径序列 <span class="math inline">\(\{A\}\)</span> 符合要求序列<span class="math inline">\(S\ (|S| = n, S_i = 0/1)\)</span>，当且仅当：</p><p>若 <span class="math inline">\(S_u = 0\)</span> ，则 <spanclass="math inline">\(u\)</span> 在 <spanclass="math inline">\(\{A\}\)</span> 中出现了偶数次（可以为 <spanclass="math inline">\(0\)</span> ）</p><p>若 <span class="math inline">\(S_u = 1\)</span> ，则 <spanclass="math inline">\(u\)</span> 在 <spanclass="math inline">\(\{A\}\)</span> 中出现了奇数次</p><p>那么对于所有的 <span class="math inline">\(S=0,\cdots,2^n-1\)</span>，都会存在一个路径序列满足 <span class="math inline">\(S\)</span>的要求。</p><p>记满足 <span class="math inline">\(S\)</span> 要求的路径序列最短为<span class="math inline">\(f(S)\)</span> ，求 <spanclass="math inline">\(\sum_{S=0}^{2^n-1}f(S)\)</span></p></blockquote><p>看到 ABC 出 <span class="math inline">\(n\le 17\)</span>就是状压或者超级暴力了。</p><p>考虑路径之间互相更新转移，那么状态之间需要区分的，除了当前每个点出现奇数/偶数次以外，还有最后一个点的编号。</p><p>定义符合序列 <span class="math inline">\(S\)</span> 且最后一个点是<span class="math inline">\(u\)</span> 的状态集编号为<code>sta[S][u]</code> 。</p><p>那么对于每一个 <span class="math inline">\(u\to v\)</span> ，对所有的<span class="math inline">\(S\)</span> 连边<code>sta[S][u] -&gt; sta[S ^ (1 &lt;&lt; v)][v]</code></p><p>最后补上初始状态的连边<code>source -&gt; sta[1 &lt;&lt; u][u]</code></p><p>那么跑 BFS 就可以求出来每个状态所需的最小长度了（从<code>source</code> 出发的距离）</p><p>那么 <span class="math inline">\(f(S) = \min_{u}dis[sta[S][u]]\)</span> 即可，复杂度即状态数乘转移数 <spanclass="math inline">\(\mathcal O(n^2\ast 2^n)\)</span></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 17</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 5000007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-keyword">int</span> id[<span class="hljs-number">1</span> &lt;&lt; N][N], cnt, dis[M];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[M];<br><br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    <span class="hljs-keyword">int</span> S = (<span class="hljs-number">1</span> &lt;&lt; n) - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>; s &lt;= S; ++s) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">0</span>; u &lt; n; ++u)<br>            id[s][u] = ++cnt;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd() - <span class="hljs-number">1</span>, v = rd() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>; s &lt;= S; ++s) &#123;<br>            e[id[s][u]].pb(id[s ^ (<span class="hljs-number">1</span> &lt;&lt; v)][v]);<br>            e[id[s][v]].pb(id[s ^ (<span class="hljs-number">1</span> &lt;&lt; u)][u]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) e[<span class="hljs-number">0</span>].pb(id[<span class="hljs-number">1</span> &lt;&lt; i][i]);<br>  <br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(dis));<br>    dis[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; q.push(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span> (!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) <br>            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + <span class="hljs-number">1</span>) &#123;dis[v] = dis[u] + <span class="hljs-number">1</span>; q.push(v);&#125;<br>    &#125;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> s = <span class="hljs-number">1</span>, tmp; s &lt;= S; ++s) &#123;<br>        tmp = <span class="hljs-number">1e9</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">0</span>; u &lt; n; ++u) &#123;<br>            tmp = min(tmp, dis[id[s][u]]);<br>        &#125;<br>        ans += tmp;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="g.-construct-good-path">G. Construct Good Path</h3><blockquote><p>定义无向图 <span class="math inline">\(G=(V,E)\)</span> 的一个长度为<span class="math inline">\(K+1\)</span> 的路径序列 <spanclass="math inline">\(\{A\}\)</span> ：</p><p>由 <span class="math inline">\(K+1\)</span> 个点编号 <spanclass="math inline">\(A_0,\dots,A_K\in V\)</span> 构成，<spanclass="math inline">\(A_0\)</span> 是起点，<spanclass="math inline">\(A_K\)</span> 是终点，且 <spanclass="math inline">\(\forall 0\le i &lt; K, (A_i, A_{i+1})\inE\)</span></p><p>定义路径序列 <span class="math inline">\(\{A\}\)</span> 符合要求序列<span class="math inline">\(S\ (|S| = n, S_i = 0/1)\)</span>，当且仅当：</p><p>若 <span class="math inline">\(S_u = 0\)</span> ，则 <spanclass="math inline">\(u\)</span> 在 <spanclass="math inline">\(\{A\}\)</span> 中出现了偶数次（可以为 <spanclass="math inline">\(0\)</span> ）</p><p>若 <span class="math inline">\(S_u = 1\)</span> ，则 <spanclass="math inline">\(u\)</span> 在 <spanclass="math inline">\(\{A\}\)</span> 中出现了奇数次</p><p>给定连通无向图 <span class="math inline">\(G\)</span> 和要求序列<span class="math inline">\(S\)</span> ，构造一个长度不超过 <spanclass="math inline">\(4\ast |V|\)</span> 的序列符合 <spanclass="math inline">\(S\)</span></p></blockquote><p>图只有连通的性质，那么可以考虑树怎么解决，其他情况找一棵生成树就可以了。</p><p>设 <span class="math inline">\(A_u\)</span> 为 <spanclass="math inline">\(u\)</span> 子树的合法序列：满足 <spanclass="math inline">\(u\)</span> 子树内，除了 <spanclass="math inline">\(u\)</span> 以外其他点都符合要求的一个序列。</p><ul><li><p>强制叶子 <span class="math inline">\(v\)</span> 对应的 <spanclass="math inline">\(A_v=(v)\)</span> 。</p></li><li><p>其他情况如果令 <spanclass="math inline">\(A_u=(u)+A_{son1}+(u)+A_{son2}+\cdots+(u)\)</span>，那么只有 <span class="math inline">\(son\)</span>这些节点会不合法。</p><p>那么对于每个导致不合法的 <span class="math inline">\(son\)</span>，给序列最后接上一个 <span class="math inline">\((son,u)\)</span>就可以保证 <span class="math inline">\(son\)</span> 合法。</p></li></ul><div class="note note-success">            <p>用数学归纳法做正确性证明：<span class="math inline">\(|A_u|\le 4 \astsize_u-3\)</span> ，其中 <span class="math inline">\(size_u\)</span> 为<span class="math inline">\(u\)</span> 子树大小。</p><ul><li><p>对于叶子，<span class="math inline">\(|A_u|=1=4\ast1-3\)</span></p></li><li><p>假设对于一个点 <span class="math inline">\(u\)</span>，所有儿子节点 <span class="math inline">\(son\)</span>都符合，那么这个点的序列：</p><p>必须添加 <span class="math inline">\(cntson + 1\)</span> 个 <spanclass="math inline">\((u)\)</span> ，还有所有的 <spanclass="math inline">\(A_{son}\)</span>，其余的每个补充会增加两个点。</p><p><span class="math display">\[\begin{array}{ll}|A_u| &amp; \le \sum_{son} A_{son} + cntson + 1 + 2 \ast cntson\\\\\       &amp; \le  \sum_{son} (4 \ast size_{son} - 3) + 3\ast cntson +1\\\\\     &amp; = 4 \ast \sum_{son} size_{son} - 3\ast cntson + 3\ast cntson+ 1\\\\\     &amp; = 4 \ast (size_u - 1) + 1\\\\\     &amp; = 4 \ast size_u - 3\end{array}\]</span></p></li></ul>          </div><p>这样就证明了，最后根的序列大小不超过 <span class="math inline">\(4N -3\)</span> 。</p><p>最后序列中如果根节点奇偶性不对，那么随便找一个根节点的儿子 <spanclass="math inline">\(son\)</span> ，补一个 <spanclass="math inline">\((son,u,son)\)</span> 即可修正。</p><p>这样子序列长度的上限刚好是 <span class="math inline">\(4N\)</span>，复杂度 <span class="math inline">\(\mathcal{O}(n)\)</span>。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">gn</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar());<br>    <span class="hljs-keyword">return</span> c - <span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N], res;<br><br><span class="hljs-keyword">bool</span> vis[N], s[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    s[x] ^= <span class="hljs-number">1</span>; res.pb(x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    vis[u] = <span class="hljs-number">1</span>; add(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (!vis[v]) &#123; <span class="hljs-comment">//当前点没在树里出现过</span><br>            dfs(v); add(u);<br>            <span class="hljs-keyword">if</span> (s[v]) &#123;add(v); add(u);&#125;<br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), v = rd();<br>        e[u].pb(v); e[v].pb(u);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) s[i] = gn();<br>  <br>    dfs(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (s[<span class="hljs-number">1</span>]) &#123;<br>        <span class="hljs-keyword">int</span> son = e[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>        add(son); add(<span class="hljs-number">1</span>); add(son);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, (<span class="hljs-keyword">int</span>)res.size());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : res) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, x);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="ex.-linear-maximization">Ex. Linear Maximization</h3><blockquote><p>维护一个二维向量集，支持：</p><ol type="1"><li><p>插入一个二维向量 <span class="math inline">\((x,y)\)</span></p></li><li><p>查询集合中和给定向量 <span class="math inline">\((u, v)\)</span>点积的最大值</p></li></ol></blockquote><p><a href="https://www.luogu.com.cn/problem/P3309">[SDOI2014]向量集</a>弱化版，线段树维护凸包即可。</p>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>AtCoder</category>
      
      <category>AtCoder Beginner Contest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dynamic Programming</tag>
      
      <tag>Constructive Algorithm</tag>
      
      <tag>Bitmask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Google Code Jam to I/O for Women 2022</title>
    <link href="/google/codejamio2022/"/>
    <url>/google/codejamio2022/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="a.-inversions-organize">A. Inversions Organize</h2><blockquote><p>给你一个 <span class="math inline">\(2n\times 2n\)</span> 的 01矩阵，问你最少反转多少个位置，能够做到上下两半1的个数相同，左右两半1的个数相同。</p></blockquote><p>以中点为原点，设最后四个象限的 1 的个数分别为 <spanclass="math inline">\(a,b,c,d\)</span> 。</p><p>需要满足：<span class="math inline">\(a+b=b+c=c+d=d+a\)</span>，可以推出 <span class="math inline">\(a=c,b=d\)</span> 。</p><p>因此把一三象限 1 的个数调整到相同、二四象限 1的个数调整到相同即可。</p><p>答案就是 <spanclass="math inline">\(|cnt_1-cnt_3|+|cnt_2-cnt_4|\)</span> ，复杂度<span class="math inline">\(\mathcal O(n^2)\)</span>。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isalpha</span>(c)) c = getchar();<br>    <span class="hljs-keyword">return</span> c == <span class="hljs-string">&#x27;I&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">int</span> testcase;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: &quot;</span>, ++testcase);<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">int</span> m = n * <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) &#123;<br>            <span class="hljs-keyword">int</span> x = gc();<br>            <span class="hljs-keyword">if</span> (i &lt;= n &amp;&amp; j &lt;= n) a += x;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &lt;= n &amp;&amp; j &gt; n) b += x;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &gt; n &amp;&amp; j &lt;= n) b -= x;<br>            <span class="hljs-keyword">else</span> a -= x;<br>        &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">abs</span>(a) + <span class="hljs-built_in">abs</span>(b));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">for</span> (; t; t--) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><br></p><h2 id="b.-ingredient-optimization">B. Ingredient Optimization</h2><blockquote><p>有 <span class="math inline">\(n\)</span> 批货物，第 <spanclass="math inline">\(i\)</span> 批货物有 <spanclass="math inline">\(L_i\)</span> 个，<spanclass="math inline">\(M_i\)</span> 时刻送达，<spanclass="math inline">\(M_i+E_i\)</span> 时刻起就不能再用了。</p><p>有 <span class="math inline">\(q\)</span> 个订单，第 <spanclass="math inline">\(i\)</span> 个在 <spanclass="math inline">\(O_i\)</span> 时刻 <spanclass="math inline">\((O_{i-1}&lt;O_i)\)</span> ，需要 <spanclass="math inline">\(U\)</span> 个货物制作。</p><p>某一次做不了商店就倒闭了（后面订单都不做），问最优策略下能完成多少个订单。</p></blockquote><p>贪心即可，扫描订单，每次先把当前可用的集合用一个堆维护一下。</p><p>然后优先取用最早过保质期的商品即可，处理需要一些细节，复杂度 <spanclass="math inline">\(\mathcal{O}((n+q)\log n)\)</span>。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 107</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-built_in">vector</span>&lt;pii&gt; q;<br><br><span class="hljs-keyword">int</span> testcase, a[N], b[N];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> node &amp;obj) <span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> b[id] &gt; b[obj.id];<br>    &#125;<br>&#125;;<br><br><span class="hljs-built_in">priority_queue</span>&lt;node&gt; s;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    q.clear();<br>    <span class="hljs-keyword">while</span> (!s.empty()) s.pop();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: &quot;</span>, ++testcase);<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd(), u = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> t = rd();<br>        a[i] = rd();<br>        b[i] = t + rd();<br>        q.pb(mp(t, i));<br>        q.pb(mp(b[i], -i));<br>    &#125;<br>    sort(q.begin(), q.end());<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>, fl = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, ptr = <span class="hljs-number">0</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-keyword">int</span> t = rd();<br>        <span class="hljs-keyword">while</span> (ptr &lt; <span class="hljs-number">2</span> * m &amp;&amp; q[ptr].fr &lt;= t) &#123;<br>            <span class="hljs-keyword">if</span> (q[ptr].sc &lt; <span class="hljs-number">0</span>) a[-q[ptr].sc] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> s.push((node)&#123;q[ptr].sc&#125;);<br>            ++ptr;<br>        &#125;<br>        <span class="hljs-keyword">int</span> tmp = u;<br>        <span class="hljs-keyword">while</span> (tmp &amp;&amp; !s.empty()) &#123;<br>            <span class="hljs-keyword">int</span> id = s.top().id;<br>            <span class="hljs-keyword">int</span> del = min(a[id], tmp);<br>            tmp -= del; a[id] -= del;<br>            <span class="hljs-keyword">if</span> (a[id] == <span class="hljs-number">0</span>) s.pop();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (tmp) fl = <span class="hljs-number">0</span>;<br>        ans += fl;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">for</span> (; t; t--) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><br></p><h2 id="c.-interesting-outing">C. Interesting Outing</h2><blockquote><p>给一棵树，有边权，求一个最短的路径，使得所有点都至少被访问到一次。</p></blockquote><p>定义 <span class="math inline">\(f_{i,0/1}\)</span> 表示 <spanclass="math inline">\(i\)</span> 的子树全部访问完，回到 / 不回到 <spanclass="math inline">\(i\)</span> 的最短路径长度，答案就是 <spanclass="math inline">\(f_{root,1}\)</span></p><p>转移方程：设 <span class="math inline">\(w_{i, son}\)</span> 表示<span class="math inline">\(i\)</span> 和儿子 <spanclass="math inline">\(son\)</span> 之间的边权。</p><p><span class="math inline">\(f_{i,0}=\sum_{son}(f_{son,0}+w_{i,son})\)</span> ， <spanclass="math inline">\(f_{i,1}=f_{i,0}-\max_{son}(f_{son,0}-f_{son,1} +w_{i,son})\)</span></p><p>复杂度 <span class="math inline">\(\mathcal{O}(n)\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1007</span><br><br><span class="hljs-keyword">int</span> testcase, hd[N], tot;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span><span class="hljs-keyword">int</span> to, nxt, w;&#125;e[N &lt;&lt; <span class="hljs-number">1</span>];<br><br>ll f[N][<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    ll mx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = hd[u], v; i; i = e[i].nxt)<br>        <span class="hljs-keyword">if</span> ((v = e[i].to) != fa) &#123;<br>            dfs(v, u);<br>            f[u][<span class="hljs-number">0</span>] += f[v][<span class="hljs-number">0</span>] + <span class="hljs-number">2</span> * e[i].w;<br>            mx = max(mx, f[v][<span class="hljs-number">0</span>] - f[v][<span class="hljs-number">1</span>] + e[i].w);<br>        &#125;<br>    f[u][<span class="hljs-number">1</span>] = f[u][<span class="hljs-number">0</span>] - mx;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: &quot;</span>, ++testcase);<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(hd, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(hd));<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = rd(), v = rd(), w = rd();<br>        e[++tot].to = v; e[tot].w = w; e[tot].nxt = hd[u]; hd[u] = tot;<br>        e[++tot].to = u; e[tot].w = w; e[tot].nxt = hd[v]; hd[v] = tot;<br>    &#125;<br>    ll ans = <span class="hljs-number">1e18</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i =  <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(f));<br>        dfs(i, i);<br>        ans = min(ans, min(f[i][<span class="hljs-number">0</span>], f[i][<span class="hljs-number">1</span>]));<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><br></p><h2 id="d.-inventor-outlasting">D. Inventor Outlasting</h2><blockquote><p>给定一个 <span class="math inline">\(R\times C\)</span>的地图，上面有黄色和绿色的点。</p><p>两个人博弈，每次可以选择一个黄色的点操作，不能操作的人输。</p><p>操作就是把这个点染黑，然后从个点按照 X形发散染黑。具体的，就是从这个点开始按照四个 <spanclass="math inline">\(45^\circ\)</span>方向扩展把所有点染黑，直到碰到边界，或当前要染的格子<strong>已经被染黑</strong>后，不继续往这个方向扩展。</p><p>问先手第一步有多少种不同的下法保证必胜。</p></blockquote><p>首先观察这个地图可以拆成两张，按照 <spanclass="math inline">\((\)</span> 行号+列号 <spanclass="math inline">\()\)</span> 的奇偶性可以把图分开，互不影响。</p><p>进一步的，如果把坐标系转 <spanclass="math inline">\(45^\circ\)</span>，可以发现每次操作就相当于把一个以黑色为边界的矩形横竖各切一刀。</p><p>所以其实是把当前的游戏转化成了四个子游戏的并，根据 SG引理，当前状态的 SG 值就是四个子游戏的 SG 值的异或。</p><p>本质不同的游戏数取决于当前“矩形”在原地图中的位置，所以有 <spanclass="math inline">\(O(R^2\times C^2)\)</span> 个。</p><p>每次枚举下一个操作的是哪个位置，复杂度 <spanclass="math inline">\(\mathcal{O}(R\times C)\)</span> ，所以记忆化搜索SG 函数总复杂度 <span class="math inline">\(\mathcal{O}(R^3\timesC^3)\)</span> 。</p><p>需要注意第一次的选择的时候，是把游戏划分为五种情况的并，除了四个子矩形，还有另外一张图（奇偶性不同）。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; c != <span class="hljs-string">&#x27;.&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;X&#x27;</span>; c = getchar());<br>    <span class="hljs-keyword">return</span> c == <span class="hljs-string">&#x27;X&#x27;</span>;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 107</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-keyword">bool</span> a[<span class="hljs-number">2</span>][N][N];<br><br><span class="hljs-keyword">int</span> testcase;<br><br><span class="hljs-built_in">unordered_map</span>&lt;ll, <span class="hljs-keyword">int</span>&gt; sg;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">hash_scope</span><span class="hljs-params">(ll id, ll a, ll b, ll c, ll d)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (((a * <span class="hljs-number">200</span> + b) * <span class="hljs-number">200</span> + c) * <span class="hljs-number">200</span> + d) * <span class="hljs-number">2</span> + id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> lx, <span class="hljs-keyword">int</span> rx, <span class="hljs-keyword">int</span> ly, <span class="hljs-keyword">int</span> ry)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (lx &gt; rx || ly &gt; ry) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    ll h = hash_scope(id, lx, rx, ly, ry);<br>    <span class="hljs-keyword">if</span> (sg.find(h) != sg.end()) <span class="hljs-keyword">return</span> sg[h];<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; nxt; nxt.clear();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = lx; x &lt;= rx; ++x)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> y = ly; y &lt;= ry; ++y)<br>            <span class="hljs-keyword">if</span> (a[id][x][y]) &#123;<br>                <span class="hljs-keyword">int</span> a = dp(id, lx, x - <span class="hljs-number">1</span>, ly, y - <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">int</span> b = dp(id, lx, x - <span class="hljs-number">1</span>, y + <span class="hljs-number">1</span>, ry);<br>                <span class="hljs-keyword">int</span> c = dp(id, x + <span class="hljs-number">1</span>, rx, ly, y - <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">int</span> d = dp(id, x + <span class="hljs-number">1</span>, rx, y + <span class="hljs-number">1</span>, ry);<br>                nxt.pb(a ^ b ^ c ^ d);<br>            &#125;<br>    sort(nxt.begin(), nxt.end());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, ptr = <span class="hljs-number">0</span>; ; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (ptr &gt;= nxt.size() || nxt[ptr] &gt; i) <span class="hljs-keyword">return</span> sg[h] = i;<br>        <span class="hljs-keyword">for</span> (; ptr &lt; nxt.size() &amp;&amp; nxt[ptr] == i; ++ptr);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    sg.clear();<br>    <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(a));<br>    <span class="hljs-keyword">int</span> r = rd(), c = rd();<br>    <span class="hljs-keyword">int</span> lx = <span class="hljs-number">1e9</span>, ly = <span class="hljs-number">1e9</span>;<br>    <span class="hljs-keyword">int</span> rx = <span class="hljs-number">-1e9</span>, ry = <span class="hljs-number">-1e9</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= r; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= c; ++j) &#123;<br>            <span class="hljs-keyword">int</span> id = ((i + j) &amp; <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">int</span> x = (i + j) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">int</span> y = (i - j + <span class="hljs-number">100</span>) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> ((a[id][x][y] = gc())) &#123;<br>                lx = min(lx, x); rx = max(rx, x); <br>                ly = min(ly, y); ry = max(ry, y);<br>            &#125;<br>        &#125;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> id = <span class="hljs-number">0</span>; id &lt;= <span class="hljs-number">1</span>; ++id)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = lx; x &lt;= rx; ++x)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> y = ly; y &lt;= ry; ++y)<br>                <span class="hljs-keyword">if</span> (a[id][x][y]) &#123;<br>                    <span class="hljs-keyword">int</span> a = dp(id, lx, x - <span class="hljs-number">1</span>, ly, y - <span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">int</span> b = dp(id, lx, x - <span class="hljs-number">1</span>, y + <span class="hljs-number">1</span>, ry);<br>                    <span class="hljs-keyword">int</span> c = dp(id, x + <span class="hljs-number">1</span>, rx, ly, y - <span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">int</span> d = dp(id, x + <span class="hljs-number">1</span>, rx, y + <span class="hljs-number">1</span>, ry);<br>                    ans += ((a ^ b ^ c ^ d ^ dp(id ^ <span class="hljs-number">1</span>, lx, rx, ly, ry)) == <span class="hljs-number">0</span>);<br>                &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: %d\n&quot;</span>, ++testcase, ans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Google</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dynamic Programming</tag>
      
      <tag>Greedy</tag>
      
      <tag>Game Theory</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round #777 (Div. 2)</title>
    <link href="/codeforces/cf777/"/>
    <url>/codeforces/cf777/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>A 和 B 比较简单就不写了。</p><h2 id="c.-madoka-and-childish-pranks">C. Madoka and ChildishPranks</h2><blockquote><p>一个初始是全白的矩阵，每次可以选一个子矩阵染成棋盘（左上角是白色）</p><p>构造一个不超过 <span class="math inline">\(n*m\)</span>次的方法把矩阵染成目标样子，或输出无解。</p></blockquote><p><strong>Key</strong> ：每次染一个 <span class="math inline">\(1\ast2\)</span> 的，可以把右侧的变黑，<span class="math inline">\(2\ast1\)</span> 的可以把下侧的变黑。</p><p>因此对于每一行，我又可以从右往左依次染 <spanclass="math inline">\(1\ast 2\)</span>，除第一列任何位置都可以染黑。</p><p>对于第一列从下往上依次染 <span class="math inline">\(2\ast 1\)</span>，除 <span class="math inline">\((1,1)\)</span> 位置外都可以染黑。</p><p>所以只要 <span class="math inline">\((1,1)\)</span>不是黑色的就都有解。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gn</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar());<br><span class="hljs-keyword">return</span> c - <span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 107</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-keyword">int</span> a[N][N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;pii,pii&gt;&gt; s;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>s.clear();<br><span class="hljs-keyword">int</span> n = rd(), m = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) a[i][j] = gn();<br><span class="hljs-keyword">if</span> (a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>); <span class="hljs-keyword">return</span>;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m; j &gt; <span class="hljs-number">1</span>; --j)<br><span class="hljs-keyword">if</span> (a[i][j]) s.pb(mp(mp(i,j - <span class="hljs-number">1</span>), mp(i, j)));<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &gt; <span class="hljs-number">1</span>; --i) <br><span class="hljs-keyword">if</span> (a[i][<span class="hljs-number">1</span>]) s.pb(mp(mp(i - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), mp(i, <span class="hljs-number">1</span>)));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, (<span class="hljs-keyword">int</span>)s.size());<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : s)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d %d\n&quot;</span>, x.fr.fr, x.fr.sc, x.sc.fr, x.sc.sc);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="d.-madoka-and-the-best-school-in-russia">D. Madoka and the BestSchool in Russia</h2><blockquote><p>定义一个数字 <span class="math inline">\(x\)</span> 是好的，当且仅当<span class="math inline">\(x\)</span> 是 <spanclass="math inline">\(d\)</span> 的倍数。</p><p>定义一个数字 <span class="math inline">\(x\)</span>是漂亮的，当且仅当他不能被拆分成两个好的数的乘积（也就是只含有一个 <spanclass="math inline">\(d\)</span> ）</p><p>给你一个好的数 <span class="math inline">\(x\)</span>，问你是否有至少两种不同的方法，把 <spanclass="math inline">\(x\)</span> 拆成若干个漂亮的数的乘积。</p><p>方法不同即拆分得到的数集不同。</p></blockquote><p>因为每个漂亮数有且仅有一个 <span class="math inline">\(d\)</span>，因此 <span class="math inline">\(x\)</span> 里有几个 <spanclass="math inline">\(d\)</span> ，就至多要拆成几个漂亮数。</p><p>先考虑把 <span class="math inline">\(x\)</span> 里的 <spanclass="math inline">\(d\)</span> 都去掉，剩下的数是 <spanclass="math inline">\(y\)</span> ，我们至少得到一种方案是 <spanclass="math inline">\(d,d,\dots,d,d\ast y\)</span></p><ul><li><p>如果 <span class="math inline">\(y\)</span>可以拆分（不是素数），那么就肯定有解；</p></li><li><p>如果 <span class="math inline">\(y\)</span> 不可拆分：</p><ul><li>如果 <span class="math inline">\(d\)</span>不可拆分，肯定无解（没有可拆的了）</li><li>如果 <span class="math inline">\(x\)</span> 里只有两个 <spanclass="math inline">\(d\)</span> ，肯定无解（没有可拆的了）</li><li>如果 <span class="math inline">\(x\)</span> 里有超过三个 <spanclass="math inline">\(d\)</span> ，肯定有解（把 <spanclass="math inline">\(y\)</span> 和 <spanclass="math inline">\(d\)</span> 拆分得到的三个数，分配给另外三个 <spanclass="math inline">\(d\)</span> ）</li><li>如果 <span class="math inline">\(x\)</span> 里正好有三个 <spanclass="math inline">\(d\)</span> ，需要检验一下把 <spanclass="math inline">\(d\)</span> 拆出来的两部分某一部分分给 <spanclass="math inline">\(y\)</span> 会不会形成新的 <spanclass="math inline">\(d\)</span></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 107</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = rd(), d = rd();<br><span class="hljs-keyword">if</span> (x % d != <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>); <span class="hljs-keyword">return</span>;&#125;<br><span class="hljs-keyword">if</span> (x / d % d != <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>); <span class="hljs-keyword">return</span>;&#125;<br><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (; x % d == <span class="hljs-number">0</span>; x /= d, ++cnt);<br><span class="hljs-keyword">int</span> lim = <span class="hljs-built_in">sqrt</span>(x);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= lim; ++i)<br><span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>); <span class="hljs-keyword">return</span>;&#125;<br><span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">2</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>); <span class="hljs-keyword">return</span>;&#125;<br>lim = <span class="hljs-built_in">sqrt</span>(d);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= lim; ++i)<br><span class="hljs-keyword">if</span> (d % i == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span> (cnt &gt; <span class="hljs-number">3</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>); <span class="hljs-keyword">return</span>;&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">1l</span>l * i * x % d != <span class="hljs-number">0</span> || <span class="hljs-number">1l</span>l * d / i * x % d != <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>); <span class="hljs-keyword">return</span>;&#125;<br>&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="e.-madoka-and-the-sixth-graders">E. Madoka and theSixth-graders</h2><blockquote><p>题意太复杂，我简单说一下，不清楚的看原题。</p><p>给定一个共 <span class="math inline">\(n\)</span>个点的内向基环树森林，开始每个点上有一个数（是 <spanclass="math inline">\(n\)</span> 的排列）。</p><p>每一个时刻所有点按照所在边移动一次，如果某一时刻某个点上有很多数，只保留最小的。</p><p>如果某一时刻某个点上没数了（叶子），那么按照节点编号从小到大依次往里面塞<span class="math inline">\(n+1,n+2,\dots\)</span></p><p>现在给出森林的形态，和经过若干时刻后每个点上的数字 <spanclass="math inline">\(a_1,\dots,a_n\)</span> 。</p><p>请你还原出来一个字典序最小的初始状态，保证有解。</p></blockquote><p><strong>Key 1</strong> ：假设已知经过的时间是 <spanclass="math inline">\(t\)</span> ，那么每个点按照边移动 <spanclass="math inline">\(t\)</span> 步以后的位置上的数字一定是不超过 <spanclass="math inline">\(n\)</span> 的。</p><p>证明：如果是树的部分，那么 <span class="math inline">\(n\)</span>以后的数字永远追不上；如果是环的部分，因为 <spanclass="math inline">\(n\)</span> 以后的数字比 <spanclass="math inline">\(n\)</span> 大，所以都会被舍弃。</p><p><strong>Key 2</strong>：两个点如果在某一步之后同时移动到了同一个点，那么后面的路径都相同（因为每个点只有一个出边）。</p><p><strong>找出经过的时间 <spanclass="math inline">\(t\)</span></strong> ：假设叶子个数是 <spanclass="math inline">\(cnt\)</span> ，序列里最大是 <spanclass="math inline">\(mx\)</span> ，那么 <spanclass="math inline">\(t=\frac{mx - n}{cnt}\)</span> （每一次移动会引进<span class="math inline">\(cnt\)</span> 个数）。</p><hr /><p><strong>每个位置可能会放哪个数？</strong></p><p>根据前面提到的 Key，假设 <span class="math inline">\(u\)</span> 走<span class="math inline">\(t\)</span> 步之后到达的点是 <spanclass="math inline">\(v\)</span> ，那么 <spanclass="math inline">\(u\)</span> 上开始的数字要么是 <spanclass="math inline">\(a_v\)</span> ，要么比 <spanclass="math inline">\(a_v\)</span>大，在移动的过程中某一步被挤掉了。</p><p>也就是说，如果一个点集 <span class="math inline">\(S\)</span>里所有点走 <span class="math inline">\(t\)</span> 步以后到达的点都是<span class="math inline">\(v\)</span>，那么这些点初始状态里有一个必定是 <spanclass="math inline">\(a_v\)</span> ，<strong>其他都比 <spanclass="math inline">\(a_v\)</span> 大</strong>。</p><p>怎么找 <span class="math inline">\(v\)</span>：因为每个点都只有一条出边，因此可以直接倍增找</p><hr /><p><strong>怎么贪心？</strong></p><p>我们先令结果序列 <span class="math inline">\(b_u=a_v\)</span>，也就是假设每个点的初始状态就是走 <spanclass="math inline">\(t\)</span> 步以后的位置上的值。</p><p>设 <span class="math inline">\(S_x=\\{u|b_u=x\\}\)</span>，考虑从小到大放数字 <span class="math inline">\(x\)</span> ：</p><ul><li>如果 <span class="math inline">\(S_x\ne \emptyset\)</span>，那么就把 <span class="math inline">\(x\)</span> 放到 <spanclass="math inline">\(S_x\)</span> 中位置最靠前的</li><li>如果 <span class="math inline">\(S_x=\emptyset\)</span> ，那么就把<span class="math inline">\(x\)</span> 放到 <spanclass="math inline">\(S_1\cup S_2\cup\dots\cup S_{x-1}\)</span>中未使用的最靠前的位置里。</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br><span class="hljs-keyword">int</span> f[N][<span class="hljs-number">40</span>], a[N], res[N];<br><br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; s[N];<br><br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; S;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        f[i][<span class="hljs-number">0</span>] = rd(); vis[f[i][<span class="hljs-number">0</span>]] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">40</span>; ++j)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            f[i][j] = f[f[i][j - <span class="hljs-number">1</span>]][j - <span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">int</span> mx = <span class="hljs-number">0</span>, cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i]) ++cnt;<br>        a[i] = rd(); mx = max(mx, a[i]);<br>    &#125;<br>    cnt = (mx - n) / cnt;<br>  <br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">30</span>; k &gt;= <span class="hljs-number">0</span>; --k) <br>            <span class="hljs-keyword">if</span> (cnt &amp; (<span class="hljs-number">1</span> &lt;&lt; k)) u = f[u][k];<br>        res[i] = a[u]; s[res[i]].push(i);<br>        vis[res[i]] = <span class="hljs-number">1</span>; <span class="hljs-comment">//Sx不空</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span> (vis[i]) s[i].pop(); <span class="hljs-comment">//把i放到Si最靠前的位置</span><br><br>    <span class="hljs-keyword">int</span> nw = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br>        <span class="hljs-keyword">if</span> (!vis[i]) &#123;<br>            <span class="hljs-keyword">while</span> (nw &lt;= i) &#123;<br>                <span class="hljs-keyword">while</span> (s[nw].size()) &#123;<br>                    S.insert(s[nw].front());<br>                    s[nw].pop();<br>                &#125;<br>                ++nw;<br>            &#125;<br>            res[*S.begin()] = i; S.erase(S.begin());<br>        &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, res[i]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = <span class="hljs-number">1</span>; t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="f.-madoka-and-laziness">F. Madoka and Laziness</h2><blockquote><p>给定一个<strong>没有重复数值的</strong>数列 <spanclass="math inline">\(\{a_i\}\)</span>，问有多少种方式将数列划分为两个峰序列（严格单增再单减）。</p><p>两种划分不同，当且仅当至少某一个峰序列的峰值不同（认为<code>&lt;a,b&gt;</code> 和 <code>&lt;b,a&gt;</code> 相同）。</p></blockquote><p><strong>Key</strong> ：最大值一定是其中一个峰的峰值。</p><p>这个观察有什么用呢？因为一个峰值固定，我们可以得到答案是<strong>O(n)</strong> 的。</p><p>也就是说，我们只需要去检验，其他的每一个值是否有可能成为峰值即可。</p><p>怎么检验呢？只需要判断是否存在一种拆分方式，使得到每个位置之前是升的，过了这个位置之后是降的，并且没给这个序列的元素扔给最大值所在的序列都合法。</p><hr /><p>我们可以假设另一个峰值（峰值B）在最大值（峰值A）的右侧，然后把序列翻过来再做一遍即可。</p><p>这样就有三个阶段：</p><ul><li><strong>到峰值A前：两个序列都上升</strong></li></ul><p>这一阶段序列A里只要单调递增，放多大的都可以。</p><p>我们为了后面序列B还要增的考虑，应该尽量减少序列B在这一部分的最大值。</p><p>设 <span class="math inline">\(f_i\)</span> 为考虑前缀 <spanclass="math inline">\(i\)</span> ，则 <spanclass="math inline">\(a_i\)</span>必定为某一个序列结尾，则另一个序列结尾最小值是多少。</p><p>转移很简单，接在 <span class="math inline">\(a_{i-1}\)</span>后，或接在 <span class="math inline">\(f_{i-1}\)</span> 后。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (a[i] &gt; a[i - <span class="hljs-number">1</span>]) f[i] = min(f[i], f[i - <span class="hljs-number">1</span>]);<br><span class="hljs-keyword">if</span> (a[i] &gt; f[i - <span class="hljs-number">1</span>]) f[i] = min(f[i], a[i - <span class="hljs-number">1</span>]);<br></code></pre></div></td></tr></table></figure><ul><li><strong>峰值A后，峰值B前：序列A下降，序列B上升</strong></li></ul><p>这一阶段因为两个序列单调性不同，所以贪心策略也不同。</p><p>设 <span class="math inline">\(g_{i,0}\)</span> 表示第 <spanclass="math inline">\(i\)</span>个元素放到序列A里，另一个序列（正在上升的序列B）末尾最小是多少。</p><p>设 <span class="math inline">\(g_{i,1}\)</span> 表示第 <spanclass="math inline">\(i\)</span>个元素放到序列B里，另一个序列（正在下降的序列A）末尾最大是多少。</p><p>转移也很简单，讨论一下接在谁后面就好了。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (a[i] &lt; a[i - <span class="hljs-number">1</span>]) g[i][<span class="hljs-number">0</span>] = min(g[i][<span class="hljs-number">0</span>], g[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">if</span> (a[i] &lt; g[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]) g[i][<span class="hljs-number">0</span>] = min(g[i][<span class="hljs-number">0</span>], a[i - <span class="hljs-number">1</span>]);<br><span class="hljs-keyword">if</span> (a[i] &gt; a[i - <span class="hljs-number">1</span>]) g[i][<span class="hljs-number">1</span>] = max(g[i][<span class="hljs-number">1</span>], g[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">if</span> (a[i] &gt; g[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]) g[i][<span class="hljs-number">1</span>] = max(g[i][<span class="hljs-number">1</span>], a[i - <span class="hljs-number">1</span>]);<br></code></pre></div></td></tr></table></figure><ul><li><strong>峰值B后：两个序列都下降</strong></li></ul><p>倒着考虑，变成单增的，那么在保证峰值B跟着的序列合法的前提下，另一个序列（留给峰值A的）的最大值要尽可能小。</p><p>因此处理方法同第一个阶段（设为 <span class="math inline">\(h\)</span>数组）。</p><hr /><p>那么怎么判断是否合法嘞？把 <span class="math inline">\(a_i\)</span>放到序列B里，另一个序列合法（ 也就是满足 <code>g[i][1] &gt; h[i]</code>） 就可以啦～</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inf 1e9 + 7</span><br><br><span class="hljs-keyword">int</span> n, a[N], f[N], g[N][<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calc</span><span class="hljs-params">()</span> </span>&#123;<br>  <br>    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>; <span class="hljs-comment">//maxpos</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        f[i] = g[i][<span class="hljs-number">0</span>] = inf;<br>        g[i][<span class="hljs-number">1</span>] = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span> (a[i] &gt; a[p]) p = i;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= p; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] &gt; a[i - <span class="hljs-number">1</span>]) f[i] = min(f[i], f[i - <span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">if</span> (a[i] &gt; f[i - <span class="hljs-number">1</span>]) f[i] = min(f[i], a[i - <span class="hljs-number">1</span>]);<br>    &#125;<br>  <br>    g[p][<span class="hljs-number">0</span>] = f[p]; <span class="hljs-comment">//承接第一阶段的最宽松约束</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = p + <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] &lt; a[i - <span class="hljs-number">1</span>]) g[i][<span class="hljs-number">0</span>] = min(g[i][<span class="hljs-number">0</span>], g[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">if</span> (a[i] &lt; g[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]) g[i][<span class="hljs-number">0</span>] = min(g[i][<span class="hljs-number">0</span>], a[i - <span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">if</span> (a[i] &gt; a[i - <span class="hljs-number">1</span>]) g[i][<span class="hljs-number">1</span>] = max(g[i][<span class="hljs-number">1</span>], g[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">if</span> (a[i] &gt; g[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]) g[i][<span class="hljs-number">1</span>] = max(g[i][<span class="hljs-number">1</span>], a[i - <span class="hljs-number">1</span>]);<br>    &#125;<br>  <br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &gt; p; --i) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] &gt; a[i + <span class="hljs-number">1</span>]) f[i] = min(f[i], f[i + <span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">if</span> (a[i] &gt; f[i + <span class="hljs-number">1</span>]) f[i] = min(f[i], a[i + <span class="hljs-number">1</span>]);   <br>        <span class="hljs-keyword">if</span> (g[i][<span class="hljs-number">1</span>] &gt; f[i]) ++ans;<br>    &#125;<br>  <br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i] = rd();<br>    <span class="hljs-keyword">int</span> ans = calc();<br>    reverse(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans + calc());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Codeforces</category>
      
      <category>Codeforces Round</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dynamic Programming</tag>
      
      <tag>Constructive Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Beginner Contest 237</title>
    <link href="/atcoder/abc237/"/>
    <url>/atcoder/abc237/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>感觉这场质量还不错。</p><h3 id="c---kasaka">C - kasaka</h3><blockquote><p>给定一个字符串 <span class="math inline">\(S\)</span>，问是否可以在开头添加若干个 <code>a</code> 使得串变为回文串。</p></blockquote><p>如果字符串开头 <code>a</code> 的个数比末尾 <code>a</code>的个数多肯定无解。</p><p>否则问题等价于去掉开头和结尾的所有的 <code>a</code>，然后判断是否是回文串。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000007</span><br><br><span class="hljs-keyword">char</span> s[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i, ++x) <span class="hljs-keyword">if</span> (s[i] != <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">break</span>; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i; --i, ++y) <span class="hljs-keyword">if</span> (s[i] != <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span> (x &gt; y) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-keyword">int</span> L = x + <span class="hljs-number">1</span>, R = n - y;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = L; i &lt;= R; ++i)<br>        <span class="hljs-keyword">if</span> (s[i] != s[R - (i - L)]) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);   <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="d---lr-insertion">D - LR insertion</h3><blockquote><p>一个数列，开始只有 <span class="math inline">\(0\)</span> ，对 <spanclass="math inline">\(i=1,2,\cdots,n\)</span> 依次执行：</p><ul><li>若 <code>op[i] = L</code> ，将 <spanclass="math inline">\(i\)</span> 插入到 <spanclass="math inline">\(i-1\)</span> 的左侧。</li><li>若 <code>op[i] = R</code> ，将 <spanclass="math inline">\(i\)</span> 插入到 <spanclass="math inline">\(i-1\)</span> 的右侧。</li></ul><p>求最终的数列。</p></blockquote><p>考虑按照 <span class="math inline">\(i\)</span>从大到小执行，容易发现操作等价于每次在开头或结尾添加数字。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pf push_front</span><br><br><span class="hljs-built_in">string</span> s;<br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; res;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">nullptr</span>) -&gt; sync_with_stdio(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">int</span> n; <span class="hljs-built_in">cin</span> &gt;&gt; n; res.pb(n);<br><span class="hljs-built_in">cin</span> &gt;&gt; s;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i)<br>s[i] == <span class="hljs-string">&#x27;L&#x27;</span> ? res.pb(i) : res.pf(i);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : res) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, x);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><h3 id="e---skiing">E - Skiing</h3><blockquote><p><span class="math inline">\(n\)</span> 个点每个点有一个点权 <spanclass="math inline">\(h_i\)</span> ，以及 <spanclass="math inline">\(M\)</span> 条有向边 <spanclass="math inline">\((u,v)\)</span> :</p><ul><li>若 <span class="math inline">\(h_u&gt;h_v\)</span> ，边权为 <spanclass="math inline">\(-(h_u-h_v)\)</span> ；否则，边权为 <spanclass="math inline">\(2(h_u-h_v)\)</span> 。</li></ul><p>求 <span class="math inline">\(1\)</span> 号点到所有点的最短路。</p></blockquote><p>负权图不可以跑 Dijkstra ；又很容易构造出网格图卡掉 SPFA 。</p><p>一个把负权图变成正权图的方法：</p><ul><li>给每个点分配一个势能 <span class="math inline">\(d_i\)</span>，对于一条边 <span class="math inline">\(u\to v\)</span> ，边权增加<span class="math inline">\(d_u-d_v\)</span>，把所有边都变成非负权值。</li><li><span class="math inline">\(s\)</span> 到 <spanclass="math inline">\(x\)</span> 的最短路即 <spanclass="math inline">\(dis_x+d_x-d_s\)</span> 。</li></ul><p>本题中 <span class="math inline">\(h_i\)</span>恰好符合势能的要求，因此修改边权后运行 Dijkstra 即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><br><span class="hljs-keyword">int</span> n, m, tot, hd[N];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span><span class="hljs-keyword">int</span> to, nxt, w;&#125; e[N &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span> </span>&#123;<br>    e[++tot].to = v; e[tot].w = w;<br>    e[tot].nxt = hd[u]; hd[u] = tot;<br>&#125;<br><br>ll dis[N], h[N];<br><br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;ll, <span class="hljs-keyword">int</span>&gt; &gt; q;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dij</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(dis));<br>    dis[u] = <span class="hljs-number">0</span>; q.push(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">0</span>, u));<br>    <span class="hljs-keyword">while</span> (!q.empty()) &#123;<br>        u = q.top().second; q.pop();<br>        <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">continue</span>; vis[u] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = hd[u], v; i; i = e[i].nxt) <br>            <span class="hljs-keyword">if</span> (dis[v = e[i].to] &gt; dis[u] + e[i].w) &#123;<br>                dis[v] = dis[u] + e[i].w;<br>                q.push(<span class="hljs-built_in">make_pair</span>(-dis[v], v));<br>            &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = rd(); m = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) h[i] = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, u, v, w; i &lt;= m; ++i) &#123;<br>        u = rd(); v = rd(); <br>        <span class="hljs-keyword">if</span> (h[u] &lt; h[v]) swap(u, v); <br>        add(u, v, <span class="hljs-number">0</span>); add(v, u, h[u] - h[v]);<br>    &#125;<br>    dij(<span class="hljs-number">1</span>);<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u)<br>        ans = max(ans, -(dis[u] + h[u] - h[<span class="hljs-number">1</span>]));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="f---lis-3">F - |LIS| = 3</h3><blockquote><p>计数长度为 <span class="math inline">\(n\ (n\le 1000)\)</span>，每个位置是 <span class="math inline">\([1,m]\ (m\le 10)\)</span>中整数的数列个数，满足 LIS 长度不超过 <spanclass="math inline">\(3\)</span> 。</p></blockquote><p>比较经典的状态机 DP ，设 <spanclass="math inline">\(f[i][x][y][z]\)</span> 表示长度为 <spanclass="math inline">\(i\)</span> 的数列，长度为 <spanclass="math inline">\(1\)</span> 的 LIS 结尾最小是 <spanclass="math inline">\(x\)</span> ，长度为 <spanclass="math inline">\(2\)</span> 的 LIS 结尾最小是 <spanclass="math inline">\(y\)</span> ，长度为 <spanclass="math inline">\(3\)</span> 的 LIS 结尾最小是 <spanclass="math inline">\(z\)</span> 时的数列个数。</p><p>转移直接枚举第 <span class="math inline">\(i\)</span>个位置的数字即可，注意不能超过 <span class="math inline">\(z\)</span>。复杂度 <span class="math inline">\(\mathcal{O}(nm^4)\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 998244353</span><br><br><span class="hljs-keyword">int</span> n, m, f[N][<span class="hljs-number">12</span>][<span class="hljs-number">12</span>][<span class="hljs-number">13</span>];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> min(x, y) ((x) &gt; (y) ? (y) : (x))</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">nullptr</span>) -&gt; sync_with_stdio(<span class="hljs-literal">false</span>);<br><br><span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) f[<span class="hljs-number">1</span>][i][<span class="hljs-number">11</span>][<span class="hljs-number">12</span>] = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>; a &lt;= m; ++a)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> b = a + <span class="hljs-number">1</span>; b &lt;= <span class="hljs-number">11</span>; ++b)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> c = b + <span class="hljs-number">1</span>; c &lt;= <span class="hljs-number">12</span>; ++c) <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= min(c, m); ++j) &#123;<br><span class="hljs-keyword">int</span> tara = min(a, j);<br><span class="hljs-keyword">int</span> tarb = (j &gt; a ? min(b, j) : b);<br><span class="hljs-keyword">int</span> tarc = (j &gt; b ? min(c, j) : c);<br>f[i + <span class="hljs-number">1</span>][tara][tarb][tarc] = (f[i + <span class="hljs-number">1</span>][tara][tarb][tarc] + f[i][a][b][c]) % mod;<br>&#125;<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= m; ++j)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = j + <span class="hljs-number">1</span>; k &lt;= m; ++k)<br>ans = (ans + f[n][i][j][k]) % mod;<br><span class="hljs-built_in">cout</span> &lt;&lt; ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><h3 id="g---range-sort-query">G - Range Sort Query</h3><blockquote><p>一个 <span class="math inline">\(n\)</span> 的排列，<spanclass="math inline">\(q\)</span>次操作，每次对一个区间升序或降序排序。问 <spanclass="math inline">\(x\)</span> 最终的位置。</p></blockquote><p>因为只关心 <span class="math inline">\(x\)</span> 的位置，所以将小于<span class="math inline">\(x\)</span> 的认为是 <spanclass="math inline">\(0\)</span> ，大于 <spanclass="math inline">\(x\)</span> 的认为是 <spanclass="math inline">\(2\)</span> ，将 <spanclass="math inline">\(x\)</span> 改为 <spanclass="math inline">\(1\)</span> 。</p><p>区间排序就变成统计区间 <span class="math inline">\(0,1,2\)</span>的个数，然后进行至多三段的区间赋值，线段树即可。</p><p>另解 <code>set</code> 维护区间复杂度正确，每次操作最多带来 <spanclass="math inline">\(3\)</span>个区间，每个区间被遍历后一定会删除（除了两侧至多留下 <spanclass="math inline">\(2\)</span> 个）。</p><p>注意维护 <code>set</code> 的时候不能查 <spanclass="math inline">\(l_i\ge L\)</span>的区间（第一段有可能找不到），所以要按 <spanclass="math inline">\(r_i\)</span> 为第一关键字排序。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mt make_tuple</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lb lower_bound</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> tri tuple<span class="hljs-meta-string">&lt;int, int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> R get<span class="hljs-meta-string">&lt;0&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> L get<span class="hljs-meta-string">&lt;1&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> V get<span class="hljs-meta-string">&lt;2&gt;</span></span><br><br><span class="hljs-built_in">set</span>&lt;tri&gt; s;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">nullptr</span>) -&gt; sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">int</span> n, q, k;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; q &gt;&gt; k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x; i &lt;= n; ++i) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; x;<br>        s.insert(mt(i, i, (x == k) + (x &gt; k) * <span class="hljs-number">2</span>));<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, ty, l, r; i &lt;= q; ++i) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; ty &gt;&gt; l &gt;&gt; r;<br>        <span class="hljs-keyword">auto</span> x = mt(l, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">int</span> cnt[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> nw = s.lb(x); nw != s.end(); nw = s.lb(x)) &#123;<br>            <span class="hljs-keyword">auto</span> y = *nw;<br>            <span class="hljs-keyword">if</span> (L(y) &gt; r) <span class="hljs-keyword">break</span>;<br>            cnt[V(y)] += min(r, R(y)) - max(l, L(y)) + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (L(y) &lt; l) s.insert(mt(l - <span class="hljs-number">1</span>, L(y), V(y)));<br>            <span class="hljs-keyword">if</span> (R(y) &gt; r) s.insert(mt(R(y), r + <span class="hljs-number">1</span>, V(y))); <br>            s.erase(nw);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ty == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v = <span class="hljs-number">0</span>; v &lt;= <span class="hljs-number">2</span>; l += cnt[v], ++v)<br>                <span class="hljs-keyword">if</span> (cnt[v]) s.insert(mt(l + cnt[v] - <span class="hljs-number">1</span>, l, v));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v = <span class="hljs-number">2</span>; v &gt;= <span class="hljs-number">0</span>; l += cnt[v], --v) <br>                <span class="hljs-keyword">if</span> (cnt[v]) s.insert(mt(l + cnt[v] - <span class="hljs-number">1</span>, l, v));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : s)<br>        <span class="hljs-keyword">if</span> (V(x) == <span class="hljs-number">1</span>) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, R(x)); <span class="hljs-keyword">break</span>;&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="ex---hakata">Ex - Hakata</h2><blockquote><p>给一个字符串 <span class="math inline">\(S\ (|S|\le200)\)</span>，问最多能选出多少个回文子串，使得相互不包含。</p></blockquote><p>首先有一个结论是：长度为 <span class="math inline">\(n\)</span>的串本质不同的回文子串不超过 <span class="math inline">\(n\)</span>个。</p><p>接下来回文子串之间的包含关系是一个偏序，根据 Dilworth定理解最大反链即可。</p><p>定理细节和使用方法详见 <ahref="/2022/09/23/cp-algorithms/dilworth/">Dilworth's Theorem - Colin'sBlog</a> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N  207</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-built_in">string</span> str, a[N];<br><br><span class="hljs-built_in">set</span>&lt;<span class="hljs-built_in">string</span>&gt; s;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">substr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i + a[v].length() &lt;= a[u].length(); ++i) &#123;<br>        <span class="hljs-keyword">bool</span> fl = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; a[v].length(); ++j) <br>            <span class="hljs-keyword">if</span> (a[u][i + j] != a[v][j]) &#123;fl = <span class="hljs-literal">false</span>; <span class="hljs-keyword">break</span>;&#125;<br>        <span class="hljs-keyword">if</span> (fl) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-keyword">int</span> match[N], vis[N];<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u])<br>        <span class="hljs-keyword">if</span> (vis[v] != t) &#123;<br>            vis[v] = t;<br>            <span class="hljs-keyword">if</span> (!match[v] || dfs(match[v], t)) &#123;match[v] = u; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br>        &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; str;<br>    <span class="hljs-keyword">int</span> n = str.length();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>; l &lt; n; ++l) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> r = l; r &lt; n; ++r) &#123;<br>            <span class="hljs-keyword">bool</span> fl = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">int</span> len = r - l + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; ++i)<br>                <span class="hljs-keyword">if</span> (str[l + i - <span class="hljs-number">1</span>] != str[r - i + <span class="hljs-number">1</span>]) fl = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> (fl) s.insert(str.substr(l, len)); <br>        &#125;<br>    <span class="hljs-keyword">int</span> m = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : s) a[++m] = x;    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>            <span class="hljs-keyword">if</span> (i != j &amp;&amp; substr(j, i)) e[i].pb(j);<br>    <span class="hljs-keyword">int</span> ans = m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) ans -= dfs(i, i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>AtCoder</category>
      
      <category>AtCoder Beginner Contest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Graphs</tag>
      
      <tag>Dynamic Programming</tag>
      
      <tag>STL</tag>
      
      <tag>Shortest Path</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Programming Ability Test Autumn 2021</title>
    <link href="/misc/pat2021/"/>
    <url>/misc/pat2021/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="background">Background</h2><p>某天心血来潮拉上 Eva 同学一起报名了 PAT ～</p><p>开学前在 <ahref="https://pintia.cn/problem-sets/994805148990160896/problems/type/7">官方题库</a>里刷了两道题热身！<del>其实是想刷完但是太鸽了</del></p><p>然后就到考试时间啦！<del>借着考试翘掉了半天的军训！好耶！</del></p><h2 id="solution-top-level">Solution ( Top Level )</h2><p>代码写的赶时间，比较丑。</p><h3 id="a.-sorted-cartesian-tree">A. Sorted Cartesian tree</h3><div class="note note-warning">            <p>给定 <span class="math inline">\(n\)</span> 个<code>pair&lt;priority, key&gt;</code> ，构建一棵 <spanclass="math inline">\(n\)</span> 个节点的二叉树，满足：</p><ul><li><p>节点 <code>priority</code> 关键字满足堆的性质，即<code>priority</code> 父节点小于子节点</p></li><li><p>节点 <code>key</code> 关键字满足二叉搜索树的性质，即中序遍历<code>key</code> 单调不降</p></li></ul><p>把树建出来，输出 <code>priority</code> 和 <code>key</code> 的<code>Level-order traversal</code> 序列</p>          </div><p>模拟题意 <code>dfs</code> 建树，传一个 <code>set&lt;node&gt;</code>即可。</p><p>求层序遍历一个 <code>bfs</code> 就够了<del>考场上写了个dfn+dep双关键字排序</del></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 37</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125; <br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><span class="hljs-keyword">int</span> k, p, id;&#125; c[N];<br><br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> node &amp;a, <span class="hljs-keyword">const</span> node &amp;b) &#123;<br>    <span class="hljs-keyword">if</span> (a.p != b.p) <span class="hljs-keyword">return</span> a.p &lt; b.p;<br>    <span class="hljs-keyword">if</span> (a.k != b.k) <span class="hljs-keyword">return</span> a.k &lt; b.k;<br>    <span class="hljs-keyword">return</span> a.id &lt; b.id;<br>&#125;<br><br><span class="hljs-keyword">int</span> ls[N], rs[N], k[N], p[N];<br><br><span class="hljs-built_in">set</span>&lt;node&gt; S;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-built_in">set</span>&lt;node&gt; s)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (s.empty()) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    node nw = *s.begin();<br>    s.erase(nw);<br>    <span class="hljs-built_in">set</span>&lt;node&gt; l, r;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> t : s) &#123;<br>        <span class="hljs-keyword">if</span> (t.k &lt;= nw.k) l.insert(t);<br>        <span class="hljs-keyword">else</span> r.insert(t);<br>    &#125;<br>    ls[nw.id] = dfs(l);<br>    rs[nw.id] = dfs(r);<br>    <span class="hljs-keyword">return</span> nw.id;<br>&#125;<br><br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        c[i].id = i; c[i].k = rd(); c[i].p = rd();<br>        S.insert(c[i]);<br>    &#125;<br>    <span class="hljs-keyword">int</span> ptr = <span class="hljs-number">0</span>, rt = dfs(S);<br>    q.push(rt);<br>    <span class="hljs-keyword">while</span> (!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>        <span class="hljs-keyword">if</span> (ls[u]) q.push(ls[u]);<br>        <span class="hljs-keyword">if</span> (rs[u]) q.push(rs[u]);<br>        k[++ptr] = c[u].k;<br>        p[ptr] = c[u].p;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, k[i]); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, k[n]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p[i]); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, p[n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="b.-unity-is-strength">B. Unity is Strength</h3><div class="note note-warning">            <p>给一张有权无向图，以及若干条可以花 <spanclass="math inline">\(w_i\)</span> 连接 <spanclass="math inline">\(u_i,v_i\)</span> 的无向边。</p><p>先输出每个联通块的 "块内最小编号 - 块内最小边权"，按照块大小-最小边权-最小点编号的顺序排序</p><p>然后计算把整个图联通的最小代价，除给定边外，任意两点之间都可以花<span class="math inline">\(10^4\)</span> 的代价连接一条边。</p>          </div><p>并查集模拟题意即可，第一步求出来每个集合的若干信息，然后排序一下。</p><p>之后就是最小生成树，考虑给定边不一定能让整个图联通，最后答案加上（联通块数<span class="math inline">\(-1\)</span> ）<spanclass="math inline">\(\times 10^4\)</span> 即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inf 1e9</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125; <br><br><span class="hljs-keyword">int</span> f[N], mn[N], mnid[N], sz[N], totr, totc;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">road</span> &#123;</span><br><span class="hljs-keyword">int</span> u, v, w;<br>&#125;r[N]; <br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">cmp2</span><span class="hljs-params">(road a, road b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a.w &lt; b.w;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">return</span> x == f[x] ? x : f[x] = find(f[x]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> w)</span> </span>&#123;<br>a = find(a); b = find(b);<br><span class="hljs-keyword">if</span> (a == b) &#123;<br>mn[a] = min(mn[a], w);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>f[a] = b; sz[b] += sz[a];<br>mnid[b] = min(mnid[b], mnid[a]);<br>mn[b] = min(mn[b], min(mn[a], w));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br><span class="hljs-keyword">int</span> mnid, sz, str;<br>&#125;c[N]; <br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">cmp1</span><span class="hljs-params">(node a, node b)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (a.str != b.str) <span class="hljs-keyword">return</span> a.str &gt; b.str;<br><span class="hljs-keyword">if</span> (a.sz != b.sz) <span class="hljs-keyword">return</span> a.sz &gt; b.sz;<br><span class="hljs-keyword">return</span> a.mnid &lt; b.mnid;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-keyword">int</span> m = rd();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>f[i] = i; mn[i] = inf; mnid[i] = i; sz[i] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, u, v, w; i &lt;= m; ++i) &#123;<br>u = rd(); v = rd(); w = rd();<br><span class="hljs-keyword">if</span> (w &gt; <span class="hljs-number">0</span>) merge(u, v, w);<br><span class="hljs-keyword">else</span> r[++totr] = (road)&#123;u, v, -w&#125;; <br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br><span class="hljs-keyword">if</span> (f[i] == i) c[++totc] = (node)&#123;mnid[i], sz[i], (mn[i] == inf ? <span class="hljs-number">0</span> : mn[i])&#125;;<br>sort(c + <span class="hljs-number">1</span>, c + <span class="hljs-number">1</span> + totc, cmp1);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; totc; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d-%d &quot;</span>, c[i].mnid, c[i].str);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d-%d\n&quot;</span>, c[totc].mnid, c[totc].str);<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>sort(r + <span class="hljs-number">1</span>, r + <span class="hljs-number">1</span> + totr, cmp2);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= totr; ++i) &#123;<br><span class="hljs-keyword">int</span> u = find(r[i].u);<br><span class="hljs-keyword">int</span> v = find(r[i].v);<br><span class="hljs-keyword">if</span> (u != v) &#123;merge(u, v, r[i].w); ans += r[i].w;&#125; <br>&#125;<br><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br>cnt += (f[i] == i);<br>ans += (cnt - <span class="hljs-number">1</span>) * <span class="hljs-number">10000</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="c.-manhattan">C. Manhattan</h3><div class="note note-warning">            <p>给定一个序列 <span class="math inline">\(\{ a_i \}\ (1\le a_i\le3)\)</span>，两个人玩（开始双方均为 <spanclass="math inline">\(0\)</span> 分），每次某个人取走最靠前的 <spanclass="math inline">\(a_i\)</span> 加到当前的得分里。</p><p>要求每个人拿完之后，<strong>当前的得分不得少于对方</strong>，问有多少种划分方案，答案<span class="math inline">\(\mod 10^ 9 + 7\)</span></p>          </div><p>裸的 DP 就是 <code>f[i][j]</code> 表示当前考虑前 <spanclass="math inline">\(i\)</span> 个数，第一个人比第二个人多 <spanclass="math inline">\(j\)</span> 的方案数。</p><p>因为 <span class="math inline">\(a_i\le 3\)</span>，所以如果某个人比另一个人多了超过 <spanclass="math inline">\(3\)</span>分，对手就无法满足要求，之后就只能是这个人拿了。</p><p>所以 <code>j</code> 可以把特殊的状态放到一起，范围就只有 <spanclass="math inline">\(9\)</span> 了，复杂度 <spanclass="math inline">\(O (9n)\)</span> ，转移要注意条件。</p><p>实现的时候整体偏移了 <span class="math inline">\(5\)</span> ，也就是<span class="math inline">\(j=5\)</span> 时两个人得分一样。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 1000000007</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125; <br><br><span class="hljs-keyword">int</span> f[N][<span class="hljs-number">10</span>];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> add(a,b) a = (a + b) % mod</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>f[<span class="hljs-number">0</span>][<span class="hljs-number">5</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x; i &lt;= n; ++i) &#123;<br>x = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">9</span>; ++j) &#123;<br><span class="hljs-keyword">if</span> (j - x &lt;= <span class="hljs-number">1</span>) add(f[i][<span class="hljs-number">1</span>], f[i - <span class="hljs-number">1</span>][j]);<br><span class="hljs-keyword">if</span> (j + x &gt;= <span class="hljs-number">9</span>) add(f[i][<span class="hljs-number">9</span>], f[i - <span class="hljs-number">1</span>][j]);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>; j &lt;= <span class="hljs-number">8</span>; ++j) &#123;<br><span class="hljs-keyword">if</span> (j - x &gt; <span class="hljs-number">1</span> &amp;&amp; j - x &lt;= <span class="hljs-number">5</span>) add(f[i][j - x], f[i - <span class="hljs-number">1</span>][j]);<br><span class="hljs-keyword">if</span> (j + x &lt; <span class="hljs-number">9</span> &amp;&amp; j + x &gt;= <span class="hljs-number">5</span>) add(f[i][j + x], f[i - <span class="hljs-number">1</span>][j]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; ++i) add(ans, f[n][i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="summary">Summary</h2><p>比赛之前比较焦虑（毕竟军训一周都没碰键盘），到考场发现左边坐的是学长。</p><p>开场把三个题都开了，题目描述都十分迷惑（英语太差），结合样例枚举题意读题。</p><blockquote><p>分不清：Preorder 先序；Inorder 中序；Postorder 后序；Level-ordertraversal 层序遍历</p></blockquote><p>过题顺序 T2 - T1 - T3 ，看榜应该是 Rank2，所有题都是一次过非常舒适。</p><p>然后就提前跑路了！因为 Eva同学还在奋战，我就开始快乐的浙传半日游～</p><p>浙传的校园就比较有感觉，总觉得杭电的楼都是一个样子的，缺点大学的气息...</p><p><img src="/img/cuz/cuz1.JPG" /></p><p><img src="/img/cuz/cuz2.JPG" /></p><p><img src="/img/cuz/cuz3.JPG" /></p><figure><img src="/img/cuz/cuz4.JPG" alt="井盖上超级可爱的小王子和狐狸～" /><figcaptionaria-hidden="true">井盖上超级可爱的小王子和狐狸～</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DFS and Similar</tag>
      
      <tag>Union-Find Set</tag>
      
      <tag>Counting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Beginner Contest 216</title>
    <link href="/atcoder/abc216/"/>
    <url>/atcoder/abc216/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="e.-amusement-park">E. Amusement Park</h2><div class="note note-warning">            <p>给定 <span class="math inline">\(n\)</span> 个数，最多 <spanclass="math inline">\(k\)</span> 次操作，每次可以拿走某个数 <spanclass="math inline">\(a_i\)</span> 加入得分，然后把 <spanclass="math inline">\(a_i-1\)</span> 放回，问得分最大值，<spanclass="math inline">\(k,a_i\le 2\times 10^9\)</span></p>          </div><p>二分最后剩下的所有数里的最大值为 <spanclass="math inline">\(x\)</span> ，答案是把所有数都拿到 <spanclass="math inline">\(x\)</span> 的得分，然后加上剩下次数个 <spanclass="math inline">\(x\)</span> 的得分。</p><p>需要注意二分上界 <span class="math inline">\(r = 2\times10^9\)</span> ，所以二分 <code>mid = (l + r) / 2</code> 的时候可能会爆<code>int</code> 。<del>坑死我了</del></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span>(; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span>(; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br>ll n, k, a[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">valid</span><span class="hljs-params">(ll x)</span> </span>&#123;<br>    ll cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br>        <span class="hljs-keyword">if</span> (a[i] &gt; x) cnt += a[i] - x;<br>    <span class="hljs-keyword">return</span> cnt &lt;= k;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">sum</span><span class="hljs-params">(ll l, ll r)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (l + r)  * (r - l + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = rd(); k = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i] = rd();<br>    ll l = <span class="hljs-number">0</span>, r = <span class="hljs-number">2e9</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        ll mid = (l + r) / <span class="hljs-number">2</span>;<br>        valid(mid) ? r = mid : l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br>        <span class="hljs-keyword">if</span> (a[i] &gt; l) &#123;<br>            ans += sum(l + <span class="hljs-number">1</span>, a[i]);<br>            k -= a[i] - l;<br>        &#125;<br>    ans += k * l;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="f.-max-sum-counting">F. Max Sum Counting</h2><div class="note note-warning">            <p>有 <span class="math inline">\(n\)</span> 个数对 <spanclass="math inline">\((A_i, B_i)\)</span>构成一个集合，问有多少个子集，满足子集内 <spanclass="math inline">\(A\)</span> 的最大值大于 <spanclass="math inline">\(B\)</span> 的和。</p>          </div><p>考虑枚举最大的 <span class="math inline">\(A\)</span>是谁，将所有数对按照 <span class="math inline">\(A\)</span>从小到大排序，问题转化为选哪些 <span class="math inline">\(B\)</span>。</p><p>假设现在考虑排序后第 <span class="math inline">\(i\)</span>个数对，则 <span class="math inline">\(B_i\)</span> 必选，相当于计数<span class="math inline">\(B_1,\cdots,B_{i-1}\)</span>中选出若干，且总和不超过 <span class="math inline">\(A_i-B_i\)</span>的方案数。</p><p>因为 <span class="math inline">\(A\)</span> 的值域很小，搞一个 01背包计数即可，复杂度 <span class="math inline">\(O(n\times \maxA_i)\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 5007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 998244353</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-keyword">int</span> n, f[N] = &#123;<span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><span class="hljs-keyword">int</span> a, b;&#125; c[N];<br><br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> node &amp;a, <span class="hljs-keyword">const</span> node &amp;b) &#123;<br>    <span class="hljs-keyword">return</span> a.a == b.a ? a.b &lt; b.b : a.a &lt; b.a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;c[i].a);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;c[i].b);<br>    sort(c + <span class="hljs-number">1</span>, c + <span class="hljs-number">1</span> + n);<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v = <span class="hljs-number">0</span>; v &lt;= c[i].a - c[i].b; ++v) <br>            ans = (ans + f[v]) % mod;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v = N - <span class="hljs-number">1</span>; v &gt;= c[i].b; --v) <br>            f[v] = (f[v] + f[v - c[i].b]) % mod;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="g.-01sequence">G. 01Sequence</h2><div class="note note-warning">            <p>构造长度为 <span class="math inline">\(n\)</span> 的 <spanclass="math inline">\(01\)</span> 序列，满足 <spanclass="math inline">\(k\)</span> 个形如 “ <spanclass="math inline">\([l_i,r_i]\)</span> 内至少有 <spanclass="math inline">\(x_i\)</span> 个 <spanclass="math inline">\(1\)</span> ” 的条件，且 <spanclass="math inline">\(1\)</span> 的个数最少。</p>          </div><p>将约束条件按照右端点从小到大排序，考虑每个条件当前还未满足的个数。</p><p>则对于每个 <span class="math inline">\(1\)</span>，在可行的范围内往右放的贡献不低于往左放，因此从右边界依次放过来即可。</p><p>查询未满足的个数需要维护一个树状数组，复杂度 <spanclass="math inline">\(O(n\log n)\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span>(; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span>(; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-keyword">int</span> cur[N], vis[N];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) (x &amp; -x)</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (; x &lt; N; x += lowbit(x)) ++cur[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; x; x -= lowbit(x)) res += cur[x];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><span class="hljs-keyword">int</span> l, r, k;&#125; c[N];<br><br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> node &amp;a, <span class="hljs-keyword">const</span> node &amp;b) &#123;<span class="hljs-keyword">return</span> a.r &lt; b.r;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">int</span> m = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        c[i].l = rd(); c[i].r = rd(); c[i].k = rd();<br>    &#125;<br>    sort(c + <span class="hljs-number">1</span>, c + <span class="hljs-number">1</span> + m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-keyword">int</span> nw = calc(c[i].r) - calc(c[i].l - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> ptr = c[i].r; nw &lt; c[i].k; --ptr) <br>            <span class="hljs-keyword">if</span> (!vis[ptr]) &#123;<br>                add(ptr); ++nw; vis[ptr] = <span class="hljs-number">1</span>;<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, vis[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="h.-random-robots">H. Random Robots</h2><div class="note note-warning">                      </div>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>AtCoder</category>
      
      <category>AtCoder Beginner Contest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Binary Search</tag>
      
      <tag>Knapsack Problem</tag>
      
      <tag>Greedy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Google Kick Start 2021 Round E</title>
    <link href="/google/kickstart2021e/"/>
    <url>/google/kickstart2021e/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Rank : 69 / Score : 87 / Pen. Time 1:51:16 (+1)</p><span id="more"></span><h2 id="a.-shuffled-anagramsa">A. Shuffled Anagramsa</h2><div class="note note-warning">            <p>给定字符串 <span class="math inline">\(S\)</span> , 问能否通过重排<span class="math inline">\(S\)</span> 得到 <spanclass="math inline">\(T\)</span> , 使得任意位置 <spanclass="math inline">\(i\)</span> 有 <span class="math inline">\(S_i\not= T_i\)</span> , 可以则给出构造方案</p>          </div><p>做法同 <a href="">AtCoder Beginner Contest 178 F</a>，不过需要先将字符排序，<strong>构造一个位置映射</strong>。</p><p>设 <span class="math inline">\(S\)</span> 按字符升序排序后字符串为<span class="math inline">\(A\)</span> ，降序为 <spanclass="math inline">\(B\)</span> ，考虑讲 <spanclass="math inline">\(B\)</span> 做若干调整，使得任意 <spanclass="math inline">\(i\)</span> 有 <span class="math inline">\(A_i\not= B_i\)</span> 。</p><p>结论为：<span class="math inline">\(A\)</span> 升序，<spanclass="math inline">\(B\)</span>降序，若有不合法位置，则相同的字符一定只有一类。</p><p>记相同的字符为 <span class="math inline">\(x\)</span> ，相同的区间为<span class="math inline">\([l, r]\)</span>，这是需要交换区间内和区间外的字符。</p><p>考虑将 <span class="math inline">\(B\)</span> 区间外某位置 <spanclass="math inline">\(i\)</span> 换进区间，那么需要保证 <spanclass="math inline">\(A_i \ne x\)</span> 且 <spanclass="math inline">\(B_i \ne x\)</span> ，否则换后依然不合法。</p><p>记录 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 中出现 <spanclass="math inline">\(x\)</span> 最靠左的位置 <spanclass="math inline">\(L\)</span> ，出现 <spanclass="math inline">\(x\)</span> 最靠右的位置 <spanclass="math inline">\(R\)</span> 。</p><p>则可以交换的位置 <span class="math inline">\(i\notin [L,R]\)</span>，若个数 <span class="math inline">\(L - 1 + n - R &gt; r-l+1\)</span>则有解，和两侧交换就好了。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 10007</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">char</span> s[N];<br><br><span class="hljs-keyword">int</span> n, a[N], b[N], testcase;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; pos[<span class="hljs-number">28</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        s[pos[a[i]].back()] = b[i] + <span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">1</span>;<br>        pos[a[i]].pop_back();<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">putchar</span>(s[i]);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: &quot;</span>, ++testcase);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>    n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">28</span>; ++i) pos[i].clear();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        a[i] = b[i] = s[i] - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>;<br>        pos[s[i] - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>].push_back(i);<br>    &#125;<br>    sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n);<br>    sort(b + <span class="hljs-number">1</span>, b + <span class="hljs-number">1</span> + n);<br>    reverse(b + <span class="hljs-number">1</span>, b + <span class="hljs-number">1</span> + n);<br>    <span class="hljs-keyword">int</span> x, l = <span class="hljs-number">0</span>, r, L, R;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span> (a[i] == b[i]) l ? ++r : l = r = i;<br>    x = a[l];<br>    <span class="hljs-keyword">if</span> (!l) &#123;print(); <span class="hljs-keyword">return</span>;&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span> (a[i] == x || b[i] == x) &#123;L = i; <span class="hljs-keyword">break</span>;&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i; --i)<br>        <span class="hljs-keyword">if</span> (a[i] == x || b[i] == x) &#123;R = i; <span class="hljs-keyword">break</span>;&#125;<br>    <span class="hljs-keyword">if</span> (L - <span class="hljs-number">1</span> + n - R &lt; (r - l + <span class="hljs-number">1</span>)) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;IMPOSSIBLE&quot;</span>); <span class="hljs-keyword">return</span>;&#125;<br>    <span class="hljs-keyword">int</span> lim = min(L - <span class="hljs-number">1</span>, r - l + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= lim; ++i) swap(b[i], b[l + i - <span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">if</span> (lim == r - l + <span class="hljs-number">1</span>) &#123;print(); <span class="hljs-keyword">return</span>;&#125;<br>    lim = r - l + <span class="hljs-number">1</span> - lim;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= lim; ++i) swap(b[n - i + <span class="hljs-number">1</span>], b[r - i + <span class="hljs-number">1</span>]);<br>    print();<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="b.-birthday-cake">B. Birthday Cake</h2><div class="note note-warning">            <p>切蛋糕。</p>          </div><h2 id="c.-palindromic-crossword">C. Palindromic Crossword</h2><div class="note note-warning">            <p>给定一个矩阵，有若干障碍，其余位置放字母，要求横着或竖着的，任意<strong>极长</strong>的非障碍位置形成的字符串是回文的。</p><p>现给定一些位置的字母，其余应当放字母的位置用 <code>'.'</code> 代替，障碍用 <code>'#'</code> 表示，问最多能推断出多少个位置的字母。</p>          </div><p>预处理一下哪些位置应当是同一个字母，然后对于每一个位置集合（ 并查集 /BFS ），判断是否可以赋值。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 1007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000007</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-keyword">char</span> s[M][M], rep[N];<br><br><span class="hljs-keyword">int</span> testcase, f[N], id[M][M];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x == f[x] ? x : f[x] = find(f[x]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    a = find(a); b = find(b); f[a] = b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">int</span> m = rd();<br>    <span class="hljs-keyword">int</span> idcnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) &#123;<br>            id[i][j] = ++idcnt;<br>            f[idcnt] = idcnt;<br>            <span class="hljs-keyword">char</span> c = getchar();<br>            <span class="hljs-keyword">while</span> (c != <span class="hljs-string">&#x27;.&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;#&#x27;</span> &amp;&amp; !<span class="hljs-built_in">isalpha</span>(c)) c = getchar();<br>            rep[idcnt] = s[i][j] = c;<br>        &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) s[i][m + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) s[n + <span class="hljs-number">1</span>][i] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (s[i][j] == <span class="hljs-string">&#x27;#&#x27;</span>) &#123;l = <span class="hljs-number">0</span>; <span class="hljs-keyword">continue</span>;&#125;<br>            <span class="hljs-keyword">if</span> (!l) l = j;<br>            <span class="hljs-keyword">if</span> (s[i][j + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br>                <span class="hljs-keyword">int</span> len = j - l + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= len / <span class="hljs-number">2</span>; ++k)<br>                    merge(id[i][l + k - <span class="hljs-number">1</span>], id[i][l + len - k]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (s[j][i] == <span class="hljs-string">&#x27;#&#x27;</span>) &#123;l = <span class="hljs-number">0</span>; <span class="hljs-keyword">continue</span>;&#125;<br>            <span class="hljs-keyword">if</span> (!l) l = j;<br>            <span class="hljs-keyword">if</span> (s[j + <span class="hljs-number">1</span>][i] == <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br>                <span class="hljs-keyword">int</span> len = j - l + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= len / <span class="hljs-number">2</span>; ++k)<br>                    merge(id[l + k - <span class="hljs-number">1</span>][i], id[l + len - k][i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>            <span class="hljs-keyword">if</span> (s[i][j] != <span class="hljs-string">&#x27;.&#x27;</span>) rep[find(id[i][j])] = s[i][j];<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) &#123;<br>            ans += (s[i][j] != rep[find(id[i][j])]);<br>            s[i][j] = rep[find(id[i][j])];<br>        &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: %d\n&quot;</span>, ++testcase, ans);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) <span class="hljs-built_in">putchar</span>(s[i][j]);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="d.-increasing-sequence-card-game">D. Increasing Sequence CardGame</h2><div class="note note-warning">            <p>从 <span class="math inline">\(n!\)</span> 个 <spanclass="math inline">\(n\)</span>的全排列中等概率随机一个，问期望有多少个位置 <spanclass="math inline">\(i\)</span> ，满足 <spanclass="math inline">\(P_i\)</span> 是 <spanclass="math inline">\(P_1,\cdots,P_i\)</span> 中的最大值。</p>          </div><p><strong>考虑对每个数分别算贡献</strong>，则数字 <spanclass="math inline">\(x\)</span> 的贡献就是 <spanclass="math inline">\(1\times (\ x\)</span> 是所在排列的前缀 <spanclass="math inline">\(\max\)</span> 的概率 <spanclass="math inline">\()\)</span></p><p>若数字 <span class="math inline">\(x\)</span> 有贡献，则 <spanclass="math inline">\(x\)</span> 前面只能有小于 <spanclass="math inline">\(x\)</span> 的数字，考虑枚举 <spanclass="math inline">\(x\)</span> 前面有 <spanclass="math inline">\(i\)</span> 个数字： <span class="math display">\[p(x) = \frac{\sum_{i=0}^{x-1} {x-1\choose i}i!(n- i - 1)!}{n!} =\sum_{i=0}^{x-1}\frac{(x-1)!(n-i-1)!}{(x-1-i)!n!}=\frac{1}{x}\sum_{i=1}^{x}\frac{x!\times (n-i)!}{ (x-i)!\times n!}\]</span></p><p>看起来可以配成组合数作比，于是： <span class="math display">\[p(x)=\frac{1}{x}\sum_{i=1}^{x}\frac{x!}{(x-i)!}\frac{(n-i)!}{n!}=\frac{1}{x}\sum_{i=1}^{x}\frac{x!}{i!(x-i)!}\frac{(n-i)!\timesi!}{n!}=\frac{1}{x}\sum_{i=1}^{x}\frac{x\choose i}{n\choose i}\]</span> 后面的形式非常好看，但是没什么化简的余地 QAQ我们换一种配凑：</p><p><span class="math display">\[p(x)=\frac{1}{x}\sum_{i=1}^{x}\frac{x!}{n!}\frac{(n-i)!}{(x-i)!}=\frac{1}{x}\sum_{i=1}^{x}\frac{x!(n-x)!}{n!}\frac{(n-i)!}{(x-i)!(n-x)!}=\frac{1}{x}\sum_{i=1}^{x}\frac{n-i\choosen-x}{n\choose x}\]</span>发现分母可以提出来了，而且分子也可以用经典性质化简（组合数一列的和等于右下角）：<span class="math display">\[p(x) = \frac{1}{x\times {n\choose x}}\sum_{i=1}^x{n-i\choose n-x} =\frac{n\choose n - x + 1}{x\times {n\choose x}} = \frac{x}{x(n-x+1)} =\frac{1}{n-x+1}\]</span> 故答案： <span class="math display">\[ans = \sum_{x=1}^n\frac{1}{n-x+1} = \sum_{x=1}^n \frac{1}{x}\approx\ln(n)\]</span></p><p>随着 <span class="math inline">\(n\)</span> 变大，真实答案和 <spanclass="math inline">\(\ln(n)\)</span> 的误差不会超过 <code>eps</code>的要求，证明见<ahref="https://codingcompetitions.withgoogle.com/kickstart/round/000000000043585c/000000000085a709#analysis">官方题解</a>。</p><p>因此只需预处理较小范围，较大范围直接用 <code>log</code>函数即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 10000007</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-keyword">int</span> testcase;<br><br><span class="hljs-keyword">double</span> ans[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    ll n = rd();<br>    <span class="hljs-keyword">if</span> (n &lt; N) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: %.10lf\n&quot;</span>, ++testcase, ans[n]);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: %.10lf\n&quot;</span>, ++testcase, ans[N - <span class="hljs-number">1</span>] + <span class="hljs-built_in">log</span>(n) - <span class="hljs-built_in">log</span>(N - <span class="hljs-number">1</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i)<br>        ans[i] = ans[i - <span class="hljs-number">1</span>] + <span class="hljs-number">1.0</span> / i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Google</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Union-Find Set</tag>
      
      <tag>Constructive Algorithm</tag>
      
      <tag>Combinatorics</tag>
      
      <tag>Probabilities</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round #738 (Div. 2)</title>
    <link href="/codeforces/cf738/"/>
    <url>/codeforces/cf738/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="a---mocha-and-math">A - Mocha and Math</h2><p>签到。显然可以构造出来所有的与。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(), ans = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) ans = (ans &amp; rd());<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="b---mocha-and-red-and-blue">B - Mocha and Red and Blue</h2><p>两侧的问号显然可以处理成无相邻重复，中间的问号都依照左侧交替放就行。显然没有相邻重复更少的构造。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1007</span><br><br><span class="hljs-keyword">char</span> s[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>); <br><span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = n;<br><span class="hljs-keyword">while</span> (s[l] == <span class="hljs-string">&#x27;?&#x27;</span> &amp;&amp; l &lt;= n) ++l;<br><span class="hljs-keyword">if</span> (l == n + <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">putchar</span>((i &amp; <span class="hljs-number">1</span>) ? <span class="hljs-string">&#x27;B&#x27;</span> : <span class="hljs-string">&#x27;R&#x27;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = l - <span class="hljs-number">1</span>; i; --i) s[i] = (s[i + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;R&#x27;</span> ? <span class="hljs-string">&#x27;B&#x27;</span> : <span class="hljs-string">&#x27;R&#x27;</span>);<br><span class="hljs-keyword">while</span> (s[r] == <span class="hljs-string">&#x27;?&#x27;</span> &amp;&amp; r) --r;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = r + <span class="hljs-number">1</span>; i &lt;= n; ++i) s[i] = (s[i - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;R&#x27;</span> ? <span class="hljs-string">&#x27;B&#x27;</span> : <span class="hljs-string">&#x27;R&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = l; i &lt;= r; ++i) <br><span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;?&#x27;</span>) s[i] = (s[i - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;R&#x27;</span> ? <span class="hljs-string">&#x27;B&#x27;</span> : <span class="hljs-string">&#x27;R&#x27;</span>);<br><span class="hljs-built_in">puts</span>(s + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="c---mocha-and-hiking">C - Mocha and Hiking</h2><p>如果 <span class="math inline">\(a[1]=1\)</span> 有 <spanclass="math inline">\(n+1\to 1\to 2\to \cdots\to n\)</span> 。</p><p>如果 <span class="math inline">\(a[n]=0\)</span> 有 <spanclass="math inline">\(1\to 2\to \cdots\to n\to n+1\)</span> 。</p><p>否则 <span class="math inline">\(a[1] = 0,a[n] = 1\)</span>，一定有一个位置 <span class="math inline">\(a[i] = 0, a[i + 1] =1\)</span> ，有 <span class="math inline">\(1\to \cdots \to i\to n+1\toi+1\to \cdots\to n\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 10007</span><br><br><span class="hljs-keyword">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i] = rd();<br><span class="hljs-keyword">if</span> (a[<span class="hljs-number">1</span>] == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, n + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i); <br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (a[n] == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n + <span class="hljs-number">1</span>); <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br><span class="hljs-keyword">if</span> (a[i] == <span class="hljs-number">0</span> &amp;&amp; a[i + <span class="hljs-number">1</span>] == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; ++j) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, j);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, n + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= n; ++j) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, j);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="d---mocha-and-diana">D - Mocha and Diana</h2><blockquote><p>给定两个森林 <span class="math inline">\(A,B\)</span> ，节点标号都是<span class="math inline">\(1\sim n\)</span> 。</p><p>一次操作选择一个 <span class="math inline">\((u,v)\)</span> ，使得边<span class="math inline">\((u,v)\)</span>加入两幅图后，两幅图依旧都是森林。</p><p>问最多能操作多少次，并输出方案。</p></blockquote><p>容易发现每次成功的操作之后，<span class="math inline">\(A,B\)</span>的连通块数都 <span class="math inline">\(-1\)</span> 。</p><div class="note note-success">            <p>如果不能操作了，且 <span class="math inline">\(A\)</span>连通块数不唯一，那么考虑：</p><ol type="1"><li><span class="math inline">\(\forall 1\le i,j\le n\)</span> ， <spanclass="math inline">\(i\)</span> 和 <spanclass="math inline">\(j\)</span> 在 <spanclass="math inline">\(A\)</span> 中不连通，则 <spanclass="math inline">\(i\)</span> 和 <spanclass="math inline">\(j\)</span> 在 <spanclass="math inline">\(B\)</span> 中连通。</li><li><span class="math inline">\(\forall 1\le i,j\le n\)</span> ， <spanclass="math inline">\(i\)</span> 和 <spanclass="math inline">\(j\)</span> 在 <spanclass="math inline">\(A\)</span> 中连通，则 <spanclass="math inline">\(\exists 1\le k\le n\)</span> ，<spanclass="math inline">\(k\)</span> 在 <spanclass="math inline">\(A\)</span> 中与 <spanclass="math inline">\(i\)</span> 和 <spanclass="math inline">\(j\)</span> 均不连通。</li></ol><p>结合两条可以得到所有点在 <span class="math inline">\(B\)</span>中均连通，即 <span class="math inline">\(B\)</span> 是一棵树。</p>          </div><p>所以最多操作次数是 <span class="math inline">\(\min(n-1-|E_A|,n-1-|E_B|)\)</span>，且每次随便找一个可操作的操作都是对的。</p><p>那么现在问题是怎么快速找出可供选择的点对，方法很多，记录一个比较有意思的构造性方法：</p><ol type="1"><li>先尝试操作 <span class="math inline">\(1\)</span>号点和所有点的组合（即能和 <span class="math inline">\(1\)</span>连通的都连通）。</li><li>令 <span class="math inline">\(A,B\)</span> 中与 <spanclass="math inline">\(1\)</span> 号点不连通的集合分别为 <spanclass="math inline">\(S_A,S_B\)</span> ，由定义 <spanclass="math inline">\(S_A\cap S_B=\emptyset\)</span> （否则一定可以操作<span class="math inline">\(1\)</span> 和交中的点）。</li><li>每次从 <span class="math inline">\(S_A,S_B\)</span>中各找出一个点，操作这两个点（由上结论两个图中两点一定不连通），按定义更新<span class="math inline">\(S_A,S_B\)</span> 。</li></ol><p>首先 <span class="math inline">\(S_A, S_B\)</span>显然是可操作的最大范围了，所以正确性没问题。</p><p>考虑实现方法，其实懒惰删除法就好了，每次取点的时候判断下是否合法即可。并查集实现复杂度<span class="math inline">\(O(n\alpha(n))\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DSU</span> &#123;</span><br><span class="hljs-keyword">int</span> f[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reset</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) f[i] = i;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-keyword">return</span> x == f[x] ? x : f[x] = find(f[x]);&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>x = find(x); y = find(y);<br><span class="hljs-keyword">return</span> x == y ? <span class="hljs-literal">false</span> : (f[x] = y, <span class="hljs-literal">true</span>);<br>&#125;<br>&#125; A, B;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; sA, sB;<br><br><span class="hljs-built_in">vector</span>&lt;pii&gt; res;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(), m1 = rd(), m2 = rd(); <br>A.reset(n); B.reset(n); <br><span class="hljs-keyword">while</span> (m1--) A.merge(rd(), rd());<br><span class="hljs-keyword">while</span> (m2--) B.merge(rd(), rd());<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) <br><span class="hljs-keyword">if</span> (A.find(<span class="hljs-number">1</span>) != A.find(j) &amp;&amp; B.find(<span class="hljs-number">1</span>) != B.find(j)) &#123;<br>res.push_back(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">1</span>, j)); A.merge(<span class="hljs-number">1</span>, j); B.merge(<span class="hljs-number">1</span>, j);<br>&#125; <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">if</span> (A.find(<span class="hljs-number">1</span>) != A.find(i)) sA.push_back(i);<br><span class="hljs-keyword">if</span> (B.find(<span class="hljs-number">1</span>) != B.find(i)) sB.push_back(i);<br>&#125;<br><span class="hljs-keyword">while</span> (!sA.empty() &amp;&amp; !sB.empty()) &#123;<br><span class="hljs-keyword">int</span> u = sA.back(), v = sB.back(); sA.pop_back(); sB.pop_back(); <br>res.push_back(<span class="hljs-built_in">make_pair</span>(u, v)); A.merge(u, v); B.merge(u, v);<br><span class="hljs-keyword">while</span> (!sA.empty() &amp;&amp; A.find(<span class="hljs-number">1</span>) == A.find(sA.back())) sA.pop_back();<br><span class="hljs-keyword">while</span> (!sB.empty() &amp;&amp; B.find(<span class="hljs-number">1</span>) == B.find(sB.back())) sB.pop_back();<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, (<span class="hljs-keyword">int</span>)res.size());<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [u, v] : res) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, u, v);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="e---mocha-and-stars">E - Mocha and Stars</h2><blockquote><p>给定 <span class="math inline">\(n\le 50,m\le 10^5\)</span> ，计数<span class="math inline">\((a_1,a_2,\cdots,a_n)\)</span>的个数，满足：</p><ul><li><span class="math inline">\(\forall 1\le i\le n, a_i\in \left[l_i,r_i\right]\cap \mathbb{Z}\)</span></li><li><span class="math inline">\(\sum_{i=1}^n a_i \leq m\)</span></li><li><span class="math inline">\(\operatorname{gcd}\left(a_1, a_2,\ldots, a_n\right)=1\)</span></li></ul></blockquote><p>法一：对 <span class="math inline">\(\text{gcd}\)</span> 容斥，设<span class="math inline">\(f(d)\)</span> 表示 <spanclass="math inline">\(d|\operatorname{gcd}\left(a_1, a_2, \ldots,a_n\right)\)</span> 的方案数，<span class="math inline">\(g(d)\)</span>表示 <span class="math inline">\(d=\operatorname{gcd}\left(a_1, a_2,\ldots, a_n\right)\)</span> 的方案数。</p><p>显然有 <span class="math inline">\(g(d)=f(d)-\sum_{k=2}^\inftyg(kd)\)</span> ，又由于 <spanclass="math inline">\(\operatorname{gcd}\left(a_1, a_2, \ldots,a_n\right)\)</span> 最大取到 <spanclass="math inline">\(\lfloor\frac{m}{n}\rfloor\)</span>，可以倒推。</p><p>求 <span class="math inline">\(f(d)\)</span> 考虑要求每个数字都要是<span class="math inline">\(d\)</span> 的倍数，不妨设 <spanclass="math inline">\(a_i=b_id\)</span> ，有：</p><ol type="1"><li><span class="math inline">\(l_i\le a_i=b_id\le r_i\)</span> ，有<span class="math inline">\(\lceil\frac{l_i}{d}\rceil\le b_i\le\lfloor\frac{r_i}{d}\rfloor\)</span></li><li><span class="math inline">\(\sum a_i = \sum b_id\le m\)</span> ，有<span class="math inline">\(\sum b_i\le\lfloor\frac{m}{d}\rfloor\)</span></li></ol><p>这样转化成了 <spanclass="math inline">\((n,\lfloor\frac{m}{d}\rfloor)\)</span>规模的问题。</p><p>设 <span class="math inline">\(cnt[i][j]\)</span> 表示前 <spanclass="math inline">\(i\)</span> 个数字和是 <spanclass="math inline">\(j\)</span> 的方案数，前缀和优化 dp 复杂度 <spanclass="math inline">\(O(n\lfloor\frac{m}{d}\rfloor)\)</span> ， <spanclass="math inline">\(f(d)=\sum_{k=0}^{\lfloor\frac{m}{d}\rfloor}cnt[n][k]\)</span> 。</p><p>总复杂度为 <spanclass="math inline">\(O(\sum_{d=1}^{\lfloor\frac{m}{n}\rfloor}n\big\lfloor\frac{m}{d}\rfloor)=O(nm\ln m)\)</span>。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 51</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 100007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 998244353</span><br><br><span class="hljs-keyword">int</span> l[N], r[N], f[N][M], sum[N][M], ans[M];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(), m = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;l[i] = rd(); r[i] = rd();&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= m; ++j) sum[<span class="hljs-number">0</span>][j] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">auto</span> mo = [&amp;](<span class="hljs-keyword">int</span> x) &#123;<span class="hljs-keyword">return</span> x &gt;= mod ? x - mod : x;&#125;;<br><span class="hljs-keyword">auto</span> dp = [&amp;](<span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> d) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">int</span> L = (l[i] + d - <span class="hljs-number">1</span>) / d, R = r[i] / d;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= t; ++j) f[i][j] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = L; j &lt;= t; ++j) <br>f[i][j] = mo(mod + sum[i - <span class="hljs-number">1</span>][j - L] - (j - R - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> ? sum[i - <span class="hljs-number">1</span>][j - R - <span class="hljs-number">1</span>] : <span class="hljs-number">0</span>));<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= t; ++j) sum[i][j] = mo(sum[i][j - <span class="hljs-number">1</span>] + f[i][j]);<br>&#125;<br><span class="hljs-keyword">return</span> sum[n][t];<br>&#125;;<br><span class="hljs-keyword">int</span> lim = m / n;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> d = lim; d; --d) &#123;<br>ans[d] = dp(m / d, d);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = d * <span class="hljs-number">2</span>; i &lt;= lim; i += d) ans[d] = mo(ans[d] + mod - ans[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>法二：直接莫比乌斯反演求容斥的系数，定义 <spanclass="math inline">\(\operatorname{valid}(a_1,a_2,\dots,a_n)\)</span>表示这个方案是否符合前两个要求。 <span class="math display">\[\begin{aligned}&amp;\ \ \ \ \ \sum_{a_1=l_1}^{r_1} \sum_{a_2=l_2}^{r_2} \ldots\sum_{a_n=l_n}^{r_n}\operatorname{valid}\left(a_1, a_2, \ldots,a_n\right)\left[\operatorname{gcd}\left(a_1, a_2, \ldots,a_n\right)=1\right]  \\&amp;=\sum_{a_1=l_1}^{r_1} \sum_{a_2=l_2}^{r_2} \ldots\sum_{a_n=l_n}^{r_n} \operatorname{valid}\left(a_1, a_2, \ldots,a_n\right) \sum_{d \mid \operatorname{gcd}\left(a_1, a_2, \ldots,a_n\right)} \mu(d) \\&amp;=\sum_{a 1}^{r_1} \sum_{a_2=l_2}^{r_2} \cdots \sum_{a_n=l_n}^{r_n}\operatorname{valid}\left(a_1, a_2, \ldots, a_n\right) \sum_{d\left|a_1,d\right| a_2, \ldots, d \mid a_n} \mu(d) \\&amp;=\sum_{d=1}^m \mu(d)\sum_{a_1=\left\lceil\frac{l_1}{d}\right\rceil}^{\left\lfloor\frac{r_1}{d}\right\rfloor}\sum_{a_2=\left\lceil\frac{l_2}{d}\right\rceil}^{\left\lfloor\frac{r_2}{d}\right\rfloor}\cdots\sum_{a_n=\left\lceil\frac{l_n}{d}\right\rceil}^{\left\lfloor\frac{r_n}{d}\right\rfloor}\operatorname{valid}\left(a_1 d, a_2 d, \ldots, a_n d\right) \\\end{aligned}\]</span> 考虑最后一行 <span class="math inline">\(\mu(d)\)</span>后面的部分，可以用法一同样的 <span class="math inline">\(dp\)</span>计数，因此复杂度 <span class="math inline">\(O(m+\sum_{d=1}^mn\big\lfloor\frac{m}{d}\rfloor)=O(nm\ln m)\)</span>。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 51</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 100007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 998244353</span><br><br><span class="hljs-keyword">int</span> l[N], r[N], f[N][M], sum[N][M];<br><br><span class="hljs-keyword">int</span> prm[M], mnd[M], mu[M] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(), m = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;l[i] = rd(); r[i] = rd();&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= m; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (!mnd[i]) &#123;prm[++prm[<span class="hljs-number">0</span>]] = mnd[i] = i; mu[i] = mod - <span class="hljs-number">1</span>;&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>, p = prm[<span class="hljs-number">1</span>], prod; j &lt;= prm[<span class="hljs-number">0</span>]; p = prm[++j]) &#123;<br>        <span class="hljs-keyword">if</span> ((prod = i * p) &gt; m) <span class="hljs-keyword">break</span>;<br>        mnd[prod] = p;<br>        <span class="hljs-keyword">if</span> (p == mnd[i]) &#123;mu[prod] = <span class="hljs-number">0</span>; <span class="hljs-keyword">break</span>;&#125; <br>        mu[prod] = <span class="hljs-number">1l</span>l * mu[i] * mu[p] % mod;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= m; ++j) sum[<span class="hljs-number">0</span>][j] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">auto</span> mo = [&amp;](<span class="hljs-keyword">int</span> x) &#123;<span class="hljs-keyword">return</span> x &gt;= mod ? x - mod : x;&#125;;<br><span class="hljs-keyword">auto</span> dp = [&amp;](<span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> d) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">int</span> L = (l[i] + d - <span class="hljs-number">1</span>) / d, R = r[i] / d;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= t; ++j) f[i][j] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = L; j &lt;= t; ++j) <br>f[i][j] = mo(mod + sum[i - <span class="hljs-number">1</span>][j - L] - (j - R - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> ? sum[i - <span class="hljs-number">1</span>][j - R - <span class="hljs-number">1</span>] : <span class="hljs-number">0</span>));<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= t; ++j) sum[i][j] = mo(sum[i][j - <span class="hljs-number">1</span>] + f[i][j]);<br>&#125;<br><span class="hljs-keyword">return</span> sum[n][t];<br>&#125;;<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> d = <span class="hljs-number">1</span>; d &lt;= m / n; ++d) ans = (ans + <span class="hljs-number">1l</span>l * mu[d] * dp(m / d, d)) % mod;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Codeforces</category>
      
      <category>Codeforces Round</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Constructive Algorithm</tag>
      
      <tag>Number Theory</tag>
      
      <tag>Counting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Beginner Contest 214</title>
    <link href="/atcoder/abc214/"/>
    <url>/atcoder/abc214/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="d.-sum-of-maximum-weights">D. Sum of Maximum Weights</h2><div class="note note-warning">            <p>给定一棵树，边有边权。计算所有点对路径上最大边权的权值和，范围 <spanclass="math inline">\(n\le 10^5\)</span></p>          </div><p>考虑类似 Kruskal的过程添加树边，则每一条边加入时，对于连通的两个集合间的点对，最大边即为当前边。</p><p>因此在维护并查集的同时维护集合大小即可，贡献为 w <spanclass="math inline">\(\times\)</span> Size(u) <spanclass="math inline">\(\times\)</span> Size(v) ，复杂度 <spanclass="math inline">\(O(n\log n)\)</span></p><h2 id="e.-packing-under-range-regulations">E. Packing Under RangeRegulations</h2><blockquote><p>有 <span class="math inline">\(10^9\)</span>个盒子，每个盒子只能放一个球。有 <span class="math inline">\(n\)</span>个球，第 <span class="math inline">\(i\)</span> 个要放在 <spanclass="math inline">\([l_i,r_i]\)</span>的某一个盒子中，问是否有解，范围 <span class="math inline">\(n\le2\times 10^5\)</span></p></blockquote><p>比较经典的贪心，考虑从左往右放，最紧急的需求肯定是右端点最小的。</p><p>按照右端点排序，依次考虑每个需求，尽量往左放，相当于区间查询最靠左的未覆盖位置，然后修改这个位置的覆盖状态。</p><p>实现可以选择动态开点线段树+线段树上区间内二分，我是用的是<strong>并查集维护下一个未覆盖的位置（疯狂的馒头）。</strong></p><p>因为序列有 <span class="math inline">\(10^9\)</span> 长，使用<code>unordered_map</code> 维护并查集数组，具体实现见代码，复杂度 <spanclass="math inline">\(O(n\log n)\)</span> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><span class="hljs-keyword">int</span> l, r;&#125; c[N];<br><br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> node &amp;a, <span class="hljs-keyword">const</span> node &amp;b) &#123;<br>    <span class="hljs-keyword">return</span> a.r == b.r ? a.l &lt; b.l : a.r &lt; b.r;<br>&#125;<br><br><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; nxt;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> nxt[x] ? nxt[x] = find(nxt[x]) : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;c[i].l = rd(); c[i].r = rd();&#125;<br>    sort(c + <span class="hljs-number">1</span>, c + <span class="hljs-number">1</span> + n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, pos; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (!nxt[c[i].l]) &#123;<br>            nxt[c[i].l] = c[i].l + <span class="hljs-number">1</span>; <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        pos = find(c[i].l);<br>        <span class="hljs-keyword">if</span> (pos &gt; c[i].r) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>); <span class="hljs-keyword">return</span>;&#125;<br>        nxt[pos] = pos + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>AtCoder</category>
      
      <category>AtCoder Beginner Contest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Union-Find Set</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AtCoder Regular Contest 124</title>
    <link href="/atcoder/arc124/"/>
    <url>/atcoder/arc124/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="a.-lr-constraints">A. LR Constraints</h2><div class="note note-warning">            <p>给一个数列赋值，值域 <span class="math inline">\([1,k]\)</span>，对于每个 <span class="math inline">\(k\)</span>，约束第一次出现的位置或最后一次出现的位置，求方案数</p>          </div><p>维护一下对于每个位置，当前有多少种方案，复杂度 <spanclass="math inline">\(O(n)\)</span></p><h2 id="b.-xor-matching-2">B. XOR Matching 2</h2><div class="note note-warning">            <p>给定两个长度相同的数列 <span class="math inline">\(A,B\)</span>，求有哪些 <span class="math inline">\(x\)</span> ，使得将 <spanclass="math inline">\(B\)</span> 重排后，任意位置 <spanclass="math inline">\(A_i\ \text{xor}\ B_i = x\)</span></p>          </div><p>重排后有 <span class="math inline">\(\forall 1\le i,j\le n,\ A_i\\text{xor}\ B_i=A_j\ \text{xor}\ B_j\Rightarrow A_i\ \text{xor}\A_j=B_i\ \text{xor}\ B_j\)</span>​​​​</p><p>也就是说，要满足重排后, （<span class="math inline">\(A_i\)</span>​​与所有其他 <span class="math inline">\(A\)</span>​​ 的异或值）与（<spanclass="math inline">\(B_i\)</span>​​ 与所有其他 <spanclass="math inline">\(B\)</span>​​​​ 的异或值）<strong>一一对应</strong></p><p>约束条件很强，我们只需要处理 <span class="math inline">\(A_1\)</span>​与其他 <span class="math inline">\(A\)</span> 的异或值，然后找可能对应的<span class="math inline">\(B\)</span> 即可，复杂度 <spanclass="math inline">\(O(n^2\log n)\)</span>​​</p><h2 id="c.-lcm-of-gcds">C. LCM of GCDs</h2><div class="note note-warning">            <p>给定 <span class="math inline">\(n\)</span> 个 pair，每个 pair中的数一个放入 <span class="math inline">\(A\)</span> 集，另一个放入<span class="math inline">\(B\)</span>​ 集，最大化 <spanclass="math inline">\(lcm[\ gcd(A),\ gcd(B)\ ]\)</span></p>          </div><p>集合的最大公约数一定是每个数的因子，将第一个 pair里的两个数求出所有的约数，枚举答案。</p><p>如果存在一种方案使得答案为 <span class="math inline">\([x,y]\)</span>​​的倍数，那么对于每个 pair <span class="math inline">\((a,b)\)</span>​​，有 <span class="math inline">\(x|a,\ y|b\)</span>​ 或者 <spanclass="math inline">\(x|b,\ y|a\)</span>​ ​​</p><p>暴力检验即可，复杂度 <spanclass="math inline">\(O\big(div(A_{1a})div(A_{1b})n\big)\)</span>​</p><h2 id="d.-yet-another-sorting-problem">D. Yet Another SortingProblem</h2><div class="note note-warning">            <p>一个 <span class="math inline">\(n+m\)</span>​ 的排列，每次选择前<span class="math inline">\(n\)</span>​ 个中一个和后 <spanclass="math inline">\(m\)</span>​个中一个交换，问交换成单位置换所需最少次数</p>          </div><p>如果没有位置选择的限制，还原一个 <spanclass="math inline">\(n\)</span>​​ 的排列所需最少交换次数为 <spanclass="math inline">\(n\ -\)</span> 排列所对应的环数。</p><div class="note note-success">            <p>将排列 <span class="math inline">\(p\)</span>​​视作置换，将位置视为点，每个数由当前位置指向目标位置，即建边 <spanclass="math inline">\(i\to p_i\)</span>​​ 得到若干个环。</p><p>我们的目标是让所有的 <span class="math inline">\(i\)</span>​ 满足<span class="math inline">\(i \to i\)</span>​ ，即 <spanclass="math inline">\(\forall i, p_i = i\)</span>​ ​变为单位置换。</p><p>因此对于某次交换，操作都会形如将 <spanclass="math inline">\(p_i\)</span>​ 和 <spanclass="math inline">\(p_{p_i}\)</span>​​ 进行交换，也就是将第 <spanclass="math inline">\(i\)</span> 位的数和第 <spanclass="math inline">\(p_i\)</span> 位的数交换。</p><p>那么对于原来所在环中的结构 <span class="math inline">\(i\to p_i, p_i\to p_{p_i}\)</span>​ ，变换后第 <span class="math inline">\(i\)</span>​个位置上变为 <span class="math inline">\(p_{p_i}\)</span>​ ，而第 <spanclass="math inline">\(p_i\)</span> 位上的数变为 <spanclass="math inline">\(p_i\)</span>​​​</p><p>也就是说，对于每个环，每次交换相当于将环上的一个 <spanclass="math inline">\(a\to b\to c\)</span> 结构变为 <spanclass="math inline">\(a\to c，b\to b\)</span>​​​​​</p><p>目标是形成 <span class="math inline">\(n\)</span>​个自环，因此每个环需要环长 <span class="math inline">\(-\ 1\)</span>​次移动才能将环内归位，而不同的环之间还原过程无关。</p>          </div><p>考虑位置选择的限制条件，我们将前 <spanclass="math inline">\(n\)</span> 个点染成黑色，后 <spanclass="math inline">\(m\)</span> 个点染成白色。</p><p>可以发现，每次可以操作的约束条件等价于<strong>每次删掉的边要满足连接的两个点颜色不同</strong>。</p><ol type="1"><li><p>对于一个由若干段白黑交替连接的环，我们一定可以通过白点吃指向的黑色的点，将整个环变成只剩下一个黑色，然后用这个黑色删掉所有其他白色，总次数为<strong>环长</strong><span class="math inline">\(-1\)</span>​</p></li><li><p>对于一个只有某一种颜色的环，我们需要考虑“引入”另一种颜色，需要花费一步的代价进行一次交换引入，然后分析如上，此时环长因为引入<span class="math inline">\(+1\)</span>​​，因此总次数为<strong>原来环长</strong> <spanclass="math inline">\(+1\)</span>​​</p></li><li><p>考虑都有“引入”需求，但颜色不同的两个单色环，此时某一个环引入对方的某个元素，相当于帮助了对方引入，因此两个环之需要一次“引入”，并且两个环共享的引入的长度，总次数为<strong>第一个环长+第二个环长</strong></p></li></ol><p>综上，对于双色环，我们所需次数为环长 <spanclass="math inline">\(-1\)</span> ，单色环先默认代价为环长 <spanclass="math inline">\(+1\)</span> ，每匹配上一对总代价 <spanclass="math inline">\(-2\)</span> 。</p><p>此外本题无需考虑太过复杂，首先同色单色环之间融合没有意义（可比较前后代价），其次不需要考虑单色环和双色环的融合，这种情况可以看作先将双色环归位，再取某一个长度为<span class="math inline">\(1\)</span>​​​​​​ 的自环与单色环进行融合。</p><p>处理过程中只涉及 dfs 找环，总复杂度 <spanclass="math inline">\(O(n)\)</span></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> cntl = <span class="hljs-number">0</span>, cntr = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + m; ++i)<br><span class="hljs-keyword">if</span> (!bl[i] &amp;&amp; i != p[i]) &#123;<br>++tot; dfs(i);<br>ans += len[tot];<br><span class="hljs-keyword">if</span> (l[tot] &amp;&amp; r[tot]) --ans;<br><span class="hljs-keyword">else</span> &#123;l[tot] ? ++cntl : ++cntr; ++ans;&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans - min(cntl, cntr) * <span class="hljs-number">2</span>);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>AtCoder</category>
      
      <category>AtCoder Regular Contest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Constructive Algorithm</tag>
      
      <tag>Number Theory</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Freshman Year</title>
    <link href="/freshman/"/>
    <url>/freshman/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天是 2021 年 7 月 8 日，星期四。</p><p>一年前的今天，高考最后一门刚刚考完。走出考场，回到自己的教室，拿手机，搬行李，告别。</p><p>离开学校的时候，碰到了还在梳理交通的竞赛教练，问我考的怎么样，然后约了后天要给高一的学弟们上课。</p><p>直到昨晚，暑假回本部给又一届的学弟们上完最后一天课。从二中本部的校门里走出来，回头看看。</p><h2 id="来杭电之前">来杭电之前</h2><p>高考完就跟爸爸妈妈说我<strong>不复读</strong>，当晚就对答案，大概645。报了南科大综评，拿到了还算不错的校考分。</p><p>然后在南校区给高一的同学讲了比较入门的概率，也是那些在一年前的暑假认识的，刚踏入二中大门学弟。</p><p>结束的时候在空空的学校里溜达，想想他们上课时候那种纯粹的热情，一代又一代，多少有一点感慨。</p><p>走之前拍了张照片，想起来一句自认为很应景的话：“<strong>雨过天青云破处，者般颜色做将来</strong>”</p><figure><img src="/img/EZS.png"alt="连着下了两三天的小雨，只剩下竞赛生的二中" /><figcaptionaria-hidden="true">连着下了两三天的小雨，只剩下竞赛生的二中</figcaption></figure><p>出分的晚上比较坦然，提前几分钟查到了分数，比估计的低 9分，都扣在语文上，115 / 134 / 136 / 251。</p><p>之后的几天比较迷茫，听了几个学校的招生宣讲都不尽如人意。南科大那边几度有希望，后来终究是落空。</p><hr /><p>在我想起来杭电这所学校的时候，突然感觉就是要去这里了。</p><p>可能是高二去学军培训喜欢上了杭州这个城市，也可能是对竞赛生涯结束的不甘吧。</p><p>先自己偷偷找 Claris要到了教练的联系方式，问了读研和专业的事情，刘老师的热情的杭州话让人很舒服。</p><p>然后就是小心翼翼地和父母交流，说我自己的想法和考虑，直到最后心里十分踏实地填上了第一志愿。</p><p>录取的结果是数学系，高考分数达到了卓越学院二次选拔的报名分数线，报了卓越学院的招生考试。</p><p>之后的假期写了几个板子，打了几场 CF 恢复一点水平，参加了 HDU的几场内部训练，搬了一套题恰烂钱。</p><p>开学之前和岳老师吃了个饭（竟然还赶上了他生日），让我重心不要全部放到竞赛上，要给自己留个后路。</p><h2 id="初到杭电">初到杭电</h2><p>有一说一假期还是过的比较随意，虽然报名了卓越学院，但是一点没准备，9月份忐忑地就来到杭电啦。</p><p>考试之前自己很没有底气，当时觉得能进计科班就不错了。考完觉得考的还行，因为竞赛里接触过一点高数线代的知识，觉得自己英语阅读也比较会蒙。然后晚上大概九点的时候出成绩了，震惊自己竟然过了英才班的线。</p><p>晚上给爸爸妈妈很激动地打了个电话，有点担心 11 进 9被刷掉，一直到十二点多才睡着。</p><p>第二天面试的时候其实自己比较轻松，感觉面试向来都比较稳<del>比较会吹</del> ，面试单独面，五个老师。</p><p>面试比较自然，老师们的问题基本是跟着我的自我介绍思路走，不过还是有几个问题血压拉满。</p><ol type="1"><li>我努力地强调自己的竞赛水平，然后冯老师问：“现在让你去打区域赛能拿到什么奖项？”</li><li>我介绍了一下高中学校和班级的情况，然后另一个老师问：“你觉得二中和衡一哪个更好？”</li><li>周老师（也是现在的导师）问：“你也不能打一辈子竞赛啊。以后有什么进一步的打算？”我说会读研，以后可能会去当大学老师。导师笑笑说要想当教授，后面得去好点的大学读书。</li></ol><p>面试完出来觉得自己还挺稳的，但是也不敢确定，忐忑到了晚上十点多出了结果。终于还是去学计算机了。</p><p>之后的生活很顺利，见面会，正常上课，班委选举（当了学委）。</p><p>上课的时候强迫自己去提问，回答问题，意识到自己可以做一些<strong>由自己决定的</strong> <strong>想做什么就做什么</strong>的事。</p><p>遇到了自己喜欢的老师，有能够舒适相处，真心相待的一帮同学，慢慢地从高三痛苦自闭的状态走出来了。</p><h2 id="竞赛">竞赛</h2><p>这段话也想写给每个学竞赛过程中感到无力的同行者。</p><p><strong>算法竞赛的魅力在于，通过努力积累或灵机一动，你能够做出越来越难的题目，是一种对自我能力的认可。</strong></p><p><strong>算法竞赛的危险亦在于，你学会的东西越多，认识的厉害的人越多，面对不可计数的强者，很容易陷入自我否定。</strong></p><p>想到杭电之前，很长一段时间都觉得，大学不会再打竞赛了。</p><p>学竞赛的过程中经历的打击，不仅是比赛和上课中受到一众神仙居高临下的压迫感，更多的其实是周围人不经意的否定和安慰。对我来说，这是一种对信心很大的打击，会想要证明自己，亦或是心里感到无力而故作轻松。</p><p>在面临是否买 D的抉择时，我放弃了。不是担心取得不了什么结果，而是觉得压力太大了。</p><p>在选学校的时候，突然想到杭电的那一刻，有种死灰复燃的感觉。</p><p>记起来 NOIP 2018结束的时候，在存真楼下，孙校长和我们几个刚从秦皇岛回来的学生说的几句话：</p><p>“学别的竞赛的，最终的发展和竞赛不一定有关系，但是算法竞赛的学生，最终往往都会选择计算机行业。”</p><p><strong>算法竞赛会在心里埋下一颗种子。</strong></p><p><strong>我不是那种一帆风顺的天才，在受到打击的时候，我会感到无力。</strong></p><p><strong>但当我抛开名利、和他人比较、证明自己这些功利的意义之后，我发现自己还剩下些东西，还能看到初心。</strong></p><p><strong>是对算法的欣赏和热爱，是理解每一个算法、做出每一个题目的瞬间，精神上的享受，这就够了。</strong></p><p>至少在我看来，从我开始接触竞赛，到做出很多重要的选择，我决策的初心从来都不是名利，因为对算法还爱着。决定最终没有买D类，最大的原因还是在那个时刻，竞赛带来的痛苦超过了学习的享受，被一次次的排名裹挟，被各种机会所吸引，我越来越像一个没有自我的机器，越来越被成功学牢牢锁死。而在我选择大学的时候，竞赛对我的意义不再是未来的全部了。我能够静下来，问问自己对算法还有没有那种近乎痴迷的喜爱，能够将它作为一种兴趣去发展，不需要考虑付出和回报，至少在大学，我还是有自由支配自己的权利。</p><p><strong>我还是那个深深爱着算法的小孩，对几十行代码背后的智慧如痴如醉。</strong></p><hr /><ul><li>Gold Medal (30th Place) : The 45th ICPC Asia Jinan Regional Contest,2020</li><li>Gold Medal ( 15th Place) : The 18th Zhejiang Provincial CollegiateProgramming Contest, 2021</li><li>Silver Medal (28th Place) : The 45th ICPC Asia Shenyang RegionalContest, 2021</li></ul><h2 id="课内学习">课内学习</h2><p>第一个学期不会选课，修了系统默认的 25.25 个学分， 第二个学期修了32.25 个学分。</p><p>通识选修只完成了科技发展与科学精神（2/2），大二上应该会把剩下的指标修完。</p><table><colgroup><col style="width: 12%" /><col style="width: 87%" /></colgroup><thead><tr class="header"><th style="text-align: center;">数理基础 (23)</th><th>数分 （6 * 3.5 + 5 * 4.2）、高代（3 * 5 + 2 * 5）、离散（4 *5）、大物1（3 * 5）</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">CS专业课 (14)</td><td>计导（2 * 5）、程设基础（5 * 5）、数据结构（4 * 4.5）、C++面向对象（3 * 5）</td></tr><tr class="even"><td style="text-align: center;">通识教育 (8)</td><td>思修法基（3 * 5）、心理健康（1 * 4.3）、大军（2 * 4.8）、ACM（2 *5）</td></tr><tr class="odd"><td style="text-align: center;">外语类 (8)</td><td>英语精读 A（2 * 4.4 + 2 * 4.6）、英语听说 A（1 * 4.3 + 1 *4.7）、实用翻译（2 * 4.6）</td></tr><tr class="even"><td style="text-align: center;">其他 (3.5)</td><td>大学启示录（1 * 4）、形式与政策（0.5 * 5）、科研实践（1 *5）、体育（1 * 2.1 + 1 * 1.8）</td></tr></tbody></table><p>很幸运的是遇到的老师都很认真负责，老师们对课程内容非常了解，自己遇到问题也都能很好沟通。</p><p>很多课程都觉得自己做的没那么好，对给出的成绩也常常受之有愧。</p><p><strong>数学分析</strong>和<strong>高等代数</strong>两门数学基础课的表现截然相反，让我更清楚地意识到很大程度上我是个兴趣驱动的人。</p><p>对数分的知识体系自己本身可能就不太感兴趣，<del>加上数分课是真的提不起来精神</del>，两个学期的数学分析成绩都不太看的过去，数分上可能要在大三重修了。老师确实想要认真教会我，可是自己确实提不起兴趣去学。经历了数分上的洗礼，数分下还是逼着自己学了学，最后的结果算是马马虎虎吧，确实对不起老师对不起自己。</p><p>很喜欢高代老师的课，很大程度驱动我去花相对比较多的时间在这门课上。两个学期最后的结果都比较好，在自己喜欢的科目上能够看到自己做了些事情，也是让自己很开心的一件事。唯一遗憾的是期末错在了最后一节课老师强调过的一个小点上（证明正定阵需先说明对称）。大二下预定了老师的近世代数。</p><p>也很喜欢 Cathy上的<strong>英语精读</strong>，也算是第一次能让我主动提起来学英语的兴趣。Cathy的课有一种很轻松的气氛，不会按照课本一板一眼的去上，讲的很多东西很受用。</p><p>感谢<strong>程设和OOP（C++）</strong>的老师对我的包容，自己在这两门课上确实有过很幼稚的行为。很佩服将近退休的老师能精确把控很多细节，随手写的代码能一遍过编译什么错都没有。</p><p><strong>离散数学和数据结构</strong>给了我很深刻的教训。两门都是自认为了解比较多的，<strong>数据结构</strong>甚至申请了免听。考前复习的都不是很充分，等上了考场发现要开始脑补一堆一堆的概念。期末离散卷子简单，没暴露出来什么问题。数据结构觉得自己看看书就够了，最后的成绩却不尽如人意，原因只是不知道排序里的一个既定细节，只能悔不当初。</p><p><strong>大学物理和思想道德修养与法律基础</strong>两门课结果意外的好，其实自己认真去学一学还是可以有效果的。中学阶段一直头疼的政治在闭卷的期末考试也写了个差不多。学不会电磁在考场上也做出来了绝大多数题。考试遇到不会的题也不能太着急，多想一会没准就通了。</p><p><strong>体育</strong> 从中考的 <spanclass="math inline">\(18\)</span> 分保底，到大一上的体测 <spanclass="math inline">\(36\)</span>分，痛失两个学期的奖学金，终究还是没逃过身体素质不行这个问题。还是感谢环境逼着我去直面体育，按着体能班的要求大一下结结实实把40次阳光长跑跑完了，也确实让我看到耐力可以有提升，从操场跑一圈就喘不上气，到体测的时候人生第一次把1000米全跑下来，确实是很激动的。也终于在锻炼身体上有了动力，首先是大二下想要和qyy 同学一起学体育舞，其次是想要恰奖学金。</p><h2 id="我的她">我的她</h2><p>只想说爱情的体验是一种很纯粹的幸福。</p><p>愿意为她牺牲自己的一切，无时无刻都会想起她的事情，找不到她会坐如针毡，什么都做不下去。</p><p>她所高兴的事情比她还高兴，她难受的时候会跟着一起哭出来，在爱情中两个人都学会了如何照顾对方。</p><p>两个人在一起呆着常常心有灵犀，做事情反应如出一辙，很多事情不用言语。</p><p>两个人在一起呆着就是最快乐的事情，能够一起学习，散步，她在我的身边就能感受到无比的踏实。</p><p>会走到一起的人终究不会分开。心里对未来有着期盼，静下心来踏踏实实做事，继续加油。</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round #723 (Div. 2)</title>
    <link href="/codeforces/cf723/"/>
    <url>/codeforces/cf723/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="a.-mean-inequality">A. Mean Inequality</h2><blockquote><p>将 <span class="math inline">\(2n\)</span>个<strong>不同的</strong>数字排成一个循环，使得任意位置的数不是相邻两个数的平均值。</p></blockquote><p>从小到大排序之后，前 <span class="math inline">\(n\)</span> 个和后<span class="math inline">\(n\)</span> 个交替放。</p><p>因为数字两两不同，大的数字不可能是两个小的数字的平均数，小的同理。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125; <br><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">51</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-keyword">int</span> m = <span class="hljs-number">2</span> * n;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) a[i] = rd();<br>sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + m);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d &quot;</span>, a[i], a[i + n]);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="b.-i-hate-1111">B. I Hate 1111</h2><blockquote><p>询问一个正整数 <span class="math inline">\(x\)</span>是否可以拆分成若干个 <spanclass="math inline">\(11,111,1111,\dots\)</span> 的和</p></blockquote><p>根据 <ahref="https://artofproblemsolving.com/wiki/index.php/Chicken_McNugget_Theorem">麦乐鸡定理</a>，<span class="math inline">\(11\)</span> 和 <spanclass="math inline">\(111\)</span> 可以组成大于 <spanclass="math inline">\(11*111-111-11=1099\)</span> 的任何数。</p><p>所以后面的数字都没用了， <span class="math inline">\(x\le1099\)</span> 的部分做一下 <span class="math inline">\(11\)</span> 和<span class="math inline">\(111\)</span> 的完全背包，其他情况都是<code>YES</code> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125; <br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1100</span><br><br><span class="hljs-keyword">bool</span> f[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = rd(); <br><span class="hljs-built_in">puts</span>(x &gt;= N ? <span class="hljs-string">&quot;YES&quot;</span> : (f[x] ? <span class="hljs-string">&quot;YES&quot;</span> : <span class="hljs-string">&quot;NO&quot;</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">11</span>; i &lt; N; ++i) f[i] |= f[i - <span class="hljs-number">11</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">111</span>; i &lt; N; ++i) f[i] |= f[i - <span class="hljs-number">111</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="c.-potions">C. Potions</h2><blockquote><p>给一个数列，求一个最长的子序列，使得子序列任意前缀和都 <spanclass="math inline">\(\ge 0\)</span></p></blockquote><p>经典的带反悔贪心，用一个小根堆维护拿了的数字。</p><p>每次先把当前的拿了，如果当前的和是负的，就一直去掉堆顶直到合法即可。</p><p>这样子在每次结束的时候都是正的，并且去掉了最少的数。</p><p>等效的贪心是每次放进来如果变成负数就看一下能不能替换堆顶。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125; <br><br><span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>ll nw = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, a; i &lt;= n; ++i) &#123;<br>a = rd(); <br>++ans; nw += a; q.push(-a);<br><span class="hljs-keyword">while</span> (nw &lt; <span class="hljs-number">0</span>) &#123;<br>nw += q.top(); q.pop(); --ans;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="d.-kill-anton">D. Kill Anton</h2><blockquote><p>给定一个字符集只有 <code>'A','D','O','T'</code>的串，将其重排使得恢复成原来的所需操作次数最大。</p><p>操作一次可以交换两个字符的位置。</p></blockquote><p>猜一下操作次数只和逆序数相关（我一直不太会这种的证明），所以一定可以把同一类字符放到一起。</p><p>记 <code>inv[i][j]</code> 表示字符 <code>i</code>前字符<code>j</code> 的顺序对数，即如果结果串中字符 <code>i</code>在字符 <code>j</code> 前，增加的逆序数。</p><p>因此枚举 <span class="math inline">\(4!\)</span>种排列，计算一下哪一种逆序数最大即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> tc[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>&#125;;<br><br>ll cnt[<span class="hljs-number">4</span>], inv[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">tr</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;A&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;N&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> (c == <span class="hljs-string">&#x27;O&#x27;</span> ? <span class="hljs-number">2</span> : <span class="hljs-number">3</span>);<br>&#125;<br><br><span class="hljs-built_in">string</span> s;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; s;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i) &#123;<br>cnt[i] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; ++j) inv[i][j] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> c : s) &#123;<br><span class="hljs-keyword">int</span> i = tr(c);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; ++j)<br><span class="hljs-keyword">if</span> (j != i) inv[i][j] += cnt[j];<br>++cnt[i];<br>&#125;<br>ll ans = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">int</span> p[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, res[<span class="hljs-number">4</span>];<br><span class="hljs-keyword">do</span> &#123;<br>ll tmpans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">4</span>; ++j) tmpans += inv[p[i]][p[j]];<br><span class="hljs-keyword">if</span> (tmpans &gt; ans) &#123;<br>ans = tmpans;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i) res[i] = p[i];<br>&#125;<br>&#125; <span class="hljs-keyword">while</span>(next_permutation(p, p + <span class="hljs-number">4</span>));<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= cnt[res[i]]; ++j) <span class="hljs-built_in">putchar</span>(tc[res[i]]);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> t;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">cin</span> &gt;&gt; t; t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="e.-oolimry-and-suffix-array">E. Oolimry and Suffix Array</h2><blockquote><p>给定后缀数组，求有多少个串长为 <span class="math inline">\(n\)</span>，字符集大小为 <span class="math inline">\(k\)</span> 的字符串 <spanclass="math inline">\(S\)</span> 符合这个后缀数组</p></blockquote><p>后缀数组 <span class="math inline">\(sa_i\)</span> 记录的是排名第<span class="math inline">\(i\)</span> 位的后缀的开始下标。</p><p>根据字典序要求，<span class="math inline">\(S_{sa_i}\)</span> 和<span class="math inline">\(S_{sa_{i+1}}\)</span> 只有两种关系：<spanclass="math inline">\(S_{sa_i}&lt;S_{sa_{i+1}}\)</span> 或 <spanclass="math inline">\(S_{sa_i}=S_{sa_{i+1}}\)</span></p><p>小于一定是可以的，等于的充要条件是 <spanclass="math inline">\(rank_{sa_i+1}&lt;rank_{sa_{i+1}+1}\)</span>，即去掉第一个字符字典序不变。</p><p>因此我们得到了含有 <span class="math inline">\(n-1\)</span>个不等号的不等式链，假设其中有 <span class="math inline">\(a\)</span>个是 <span class="math inline">\(\le\)</span> 。</p><p>我们枚举有 <span class="math inline">\(i\)</span> 个 <spanclass="math inline">\(\le\)</span> 实际上是 <spanclass="math inline">\(&lt;\)</span> ，那么实际字符集大小是 <spanclass="math inline">\(n-i\)</span> ，方案数就是</p><p><span class="math display">\[\sum_{i=0}^a{a\choose i}{k\choose n-i}={a+k\choose n}\]</span></p><p>等式从组合含义理解，从 <span class="math inline">\(a+k\)</span>个里选 <span class="math inline">\(n\)</span> 个，定价于枚举从前 <spanclass="math inline">\(a\)</span> 个里选 <spanclass="math inline">\(i\)</span> 个，剩余的从后 <spanclass="math inline">\(k\)</span> 个里选。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 998244353</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> t = mod - <span class="hljs-number">2</span>)</span> </span>&#123;<br><span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (; t; t &gt;&gt;= <span class="hljs-number">1</span>, x = <span class="hljs-number">1l</span>l * x * x % mod)<br><span class="hljs-keyword">if</span> (t &amp; <span class="hljs-number">1</span>) res = <span class="hljs-number">1l</span>l * res * x % mod;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-keyword">int</span> rk[N], pos[N], fac[N &lt;&lt; <span class="hljs-number">1</span>] = &#123;<span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd(), k = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) rk[pos[i] = rd()] = i;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) <br>k += (rk[pos[i] + <span class="hljs-number">1</span>] &lt; rk[pos[i + <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>]);<br><span class="hljs-keyword">if</span> (k &lt; n) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i) fac[i] = <span class="hljs-number">1l</span>l * fac[i - <span class="hljs-number">1</span>] * i % mod;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-number">1l</span>l * fac[k] * fpow(fac[n]) % mod * fpow(fac[k - n]) % mod);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
      <category>Codeforces</category>
      
      <category>Codeforces Round</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Greedy</tag>
      
      <tag>Constructive Algorithm</tag>
      
      <tag>Number Theory</tag>
      
      <tag>Counting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Render Math Equations in Hexo</title>
    <link href="/mathjax/"/>
    <url>/mathjax/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><span class="math display">\[f(a) = \frac{1}{2\pi i}\oint_{\gamma}\frac{f(z)}{z-a}dz\]</span></p><p><a href="https://www.mathjax.org/">Beautiful and accessible math inall browsers - MathJax</a></p><p>This post is used to check out whether the mathjax plugin (<ahref="https://github.com/hexojs/hexo-math">hexo-math</a>) stillworks.</p><h2 id="inline-formula">Inline Formula</h2><p>Consider the sequence of <span class="math inline">\(n\)</span>distinct positive integers: <spanclass="math inline">\(c_1, c_2, \cdots, c_n\)</span>. The child calls avertex-weighted rooted binary tree <strong>good</strong> if and only iffor every vertex <span class="math inline">\(v\)</span>, the weight of<span class="math inline">\(v\)</span> is in the set <spanclass="math inline">\(\{c_1, c_2, \cdots, c_n\}\)</span> . Also ourchild thinks that the <strong>weight</strong> of a vertex-weighted treeis the sum of all vertices' weights.</p><p>Given an integer <span class="math inline">\(m\)</span>, can you forall $s (1  s ≤ m) $ calculate the number of good vertex-weighted rootedbinary trees with weight <span class="math inline">\(s\)</span> ?Please, check the samples for better understanding what trees areconsidered different.</p><p>We only want to know the answer modulo <spanclass="math inline">\(998244353\)</span> ( <spanclass="math inline">\(7 × 17 × 2^{23} + 1\)</span> , a primenumber).</p><h2 id="block-formula">Block Formula</h2><p><span class="math display">\[\int \frac{dx}{cos^2x}=\int sec^2xdx=tan x+C\\]</span></p><p><span class="math display">\[\int \frac{dx}{sin^2x}=\int csc^2xdx=-cot x+C\\]</span></p><p><span class="math display">\[\sum\limits_{i = 0}^{E} w[i]{M \choose i} {N \choose iS}\frac{(iS)!}{(S!)^{i}} \sum\limits_{j = 0}^{E - i} (-1)^{j} {M - i\choose j} {N - iS \choose jS} \frac{(jS)!}{(S!)^{j}} (M - i - j)^{N -iS - jS}\]</span></p><p><span class="math display">\[= \sum\limits_{i = 0}^{E} w[i]{M \choose i} {N \choose iS}\frac{(iS)!}{(S!)^{i}} \sum\limits_{j = i}^{E} (-1)^{j - i} {M - i\choose j - i} {N - iS \choose jS - iS} \frac{(jS - iS)!}{(S!)^{j - i}}(M - j)^{N - jS}\]</span></p><h2 id="matrix">Matrix</h2><p><span class="math display">\[\begin{bmatrix}(\omega_n^0)^0 &amp; (\omega_n^0)^1 &amp; \cdots &amp;(\omega_n^0)^{n-1}\\\\ (\omega_n^1)^0 &amp; (\omega_n^1)^1 &amp; \cdots&amp; (\omega_n^1)^{n-1}\\\\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\\\(\omega_n^{n-1})^0 &amp; (\omega_n^{n-1})^1 &amp; \cdots &amp;(\omega_n^{n-1})^{n-1}\end{bmatrix}\begin{bmatrix}a_0 \\\\a_1 \\\\\vdots \\\\a_{n-1}\end{bmatrix}=\begin{bmatrix}A(\omega_n^0) \\\\A(\omega_n^1) \\\\\vdots \\\\A(\omega_n^{n-1})\end{bmatrix}\]</span></p><p><span class="math display">\[\begin{bmatrix}a_0 \\\\a_1 \\\\\vdots \\\\a_{n-1}\end{bmatrix}=\frac{1}{n}\begin{bmatrix}(\omega_n^{-0})^0 &amp; (\omega_n^{-0})^1 &amp; \cdots &amp;(\omega_n^{-0})^{n-1} \\\\(\omega_n^{-1})^0 &amp; (\omega_n^{-1})^1 &amp; \cdots &amp;(\omega_n^{-1})^{n-1} \\\\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\\\(\omega_n^{-(n-1)})^0 &amp; (\omega_n^{-(n-1)})^1 &amp; \cdots &amp;(\omega_n^{-(n-1)})^{n-1}\end{bmatrix}\begin{bmatrix}A(\omega_n^0) \\\\A(\omega_n^1) \\\\\vdots \\\\A(\omega_n^{n-1})\end{bmatrix}\]</span></p><p>To prevent escaping, you need to use <code>\\\\</code> to make a newline rather than <code>\\</code> .</p><p>For more about the Mathjax symbols, refer to ：<ahref="/material/mathjax-symbol-list.pdf"><strong>The Comprehensive LaTeXSymbol List</strong></a> .</p>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/hello-world/"/>
    <url>/hello-world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>「 Hello, the lovely world. 」</p><p>「 Stay hungry, Stay foolish. 」</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> this<br>The Zen of Python, by Tim Peters<br><br>Beautiful <span class="hljs-keyword">is</span> better than ugly.<br>Explicit <span class="hljs-keyword">is</span> better than implicit.<br>Simple <span class="hljs-keyword">is</span> better than complex.<br>Complex <span class="hljs-keyword">is</span> better than complicated.<br>Flat <span class="hljs-keyword">is</span> better than nested.<br>Sparse <span class="hljs-keyword">is</span> better than dense.<br>Readability counts.<br>Special cases aren<span class="hljs-string">&#x27;t special enough to break the rules.</span><br><span class="hljs-string">Although practicality beats purity.</span><br><span class="hljs-string">Errors should never pass silently.</span><br><span class="hljs-string">Unless explicitly silenced.</span><br><span class="hljs-string">In the face of ambiguity, refuse the temptation to guess.</span><br><span class="hljs-string">There should be one-- and preferably only one --obvious way to do it.</span><br><span class="hljs-string">Although that way may not be obvious at first unless you&#x27;</span>re Dutch.<br>Now <span class="hljs-keyword">is</span> better than never.<br>Although never <span class="hljs-keyword">is</span> often better than *right* now.<br>If the implementation <span class="hljs-keyword">is</span> hard to explain, it<span class="hljs-string">&#x27;s a bad idea.</span><br><span class="hljs-string">If the implementation is easy to explain, it may be a good idea.</span><br><span class="hljs-string">Namespaces are one honking great idea -- let&#x27;</span>s do more of those!<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
  </entry>
  
  
  
</search>
