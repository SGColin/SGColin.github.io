<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>XJOI Training Record</title>
      <link href="/2019/03/15/xjoi2019/"/>
      <url>/2019/03/15/xjoi2019/</url>
      
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请单击此处并输入密码以浏览" />    <label for="pass">请单击此处并输入密码以浏览</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solution </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Templates of Polynomial</title>
      <link href="/2019/03/08/polynomial/"/>
      <url>/2019/03/08/polynomial/</url>
      
        <content type="html"><![CDATA[<p>最近在写一些多项式的模板题，代码总是显得十分混乱。</p><p>深感代码通用的重要性，因此开一篇小结用以记录比较通用的模板。</p><p>如果模板出了问题请联系我，万分感谢。</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>为了体现简洁，在每一部分只会放关键代码。</p><p>关于完整代码，在每一部分的代码标题处都放了链接。</p><p>可以保证代码之间函数的调用是合法的，会给出参数说明。</p><p>因为放代码可能会比较长，可以点右边的小火箭回到目录。</p><p>算法原理部分的总结是用 LaTeX 写的，可以看这里 <a href="https://blog.gyx.me/note/polynomialtech.pdf">多项式科技初步</a></p><p>模板出了问题请联系我，万分感谢。</p><h2 id="多项式乘法"><a href="#多项式乘法" class="headerlink" title="多项式乘法"></a>多项式乘法</h2><p>使用 <a href="http://uoj.ac/problem/34" target="_blank" rel="noopener">[ UOJ 34 ] 多项式乘法</a> 作为测试题。</p><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p><strong>Rev</strong> 传入需要预处理的长度 n，返回对应的二的幂次大小，并处理好全局 Reverse 数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Rev</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = <span class="number">1</span>, bit = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (len &lt;= n) ++bit, len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">    rev[i] = ((rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>)));</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FFT-版本"><a href="#FFT-版本" class="headerlink" title="FFT 版本"></a><a href="https://blog.gyx.me/code/template/polynomial/fft.cpp">FFT 版本</a></h3><p><strong>Mul</strong> 传入长度为 n 的数组 a，长度为 m 的数组 b</p><p><strong>FFT</strong> 传入数组 f，处理的长度 len，以及旋转方向 o</p><p>使用的是 3 次变换的最基本写法，用时 362 ms</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT</span><span class="params">(Complex *f, <span class="keyword">int</span> len, <span class="keyword">int</span> o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">      <span class="keyword">if</span> (rev[i] &gt; i) swap(f[i], f[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      Complex wn = Complex(<span class="built_in">cos</span>(PI / i) , o * <span class="built_in">sin</span>(PI / i));</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j += (i &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Complex w = Complex(<span class="number">1</span>, <span class="number">0</span>), x, y;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; ++k, w = w * wn) &#123;</span><br><span class="line">          x = f[j + k]; y = w * f[i + j + k];</span><br><span class="line">          f[i + j + k] = x - y; f[j + k] = x + y;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="number">-1</span>) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) f[i].x /= len;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mul</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = Rev(n + m);</span><br><span class="line">  FFT(a, len, <span class="number">1</span>); FFT(b, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) a[i] = a[i] * b[i];</span><br><span class="line">  FFT(a, len, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NTT-版本"><a href="#NTT-版本" class="headerlink" title="NTT 版本"></a><a href="https://blog.gyx.me/code/template/polynomial/ntt.cpp">NTT 版本</a></h3><p><strong>Mul</strong>  传入长度为 n 的数组 a，长度为 m 的数组 b</p><p><strong>NTT</strong>  传入数组 f，处理的长度 len，以及旋转方向 o</p><p>模数为 998244353，原根为 3，用时 403 ms</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> *f, <span class="keyword">int</span> len, <span class="keyword">int</span> o)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">    <span class="keyword">if</span> (i &gt; rev[i]) swap(f[i], f[rev[i]]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> wn = qpow(<span class="number">3</span>, (mod - <span class="number">1</span>) / (i &lt;&lt; <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="number">-1</span>) wn = qpow(wn, mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j += (i &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">      <span class="keyword">int</span> w = <span class="number">1</span>, x, y;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; ++k, w = <span class="number">1l</span>l * w * wn % mod) &#123;</span><br><span class="line">        x = f[j + k]; y = <span class="number">1l</span>l * w * f[i + j + k] % mod;</span><br><span class="line">        f[j + k] = mo(x + y); f[i + j + k] = mo(x - y + mod);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (o == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> invl = qpow(len, mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) f[i] = <span class="number">1l</span>l * f[i] * invl % mod;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mul</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = Rev(n + m);</span><br><span class="line">  FFT(a, len, <span class="number">1</span>); FFT(b, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) a[i] = a[i] * b[i];</span><br><span class="line">  FFT(a, len, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式求逆"><a href="#多项式求逆" class="headerlink" title="多项式求逆"></a>多项式求逆</h2><p>使用 <a href="https://www.luogu.org/problemnew/show/P4238" target="_blank" rel="noopener">[ Luogu P4238 ] 多项式求逆</a> 作为测试题。</p><p><strong>Inv</strong> 传入一个长度为 n 的数组 a，求出其模 x 的 n 次下的逆 b，需要使用辅助数组 tmp</p><h3 id="递归版本"><a href="#递归版本" class="headerlink" title="递归版本"></a><a href="https://blog.gyx.me/code/template/polynomial/inv1.cpp">递归版本</a></h3><p>使用 O2 优化，用时 562 ms</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Inv</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;b[<span class="number">0</span>] = qpow(a[<span class="number">0</span>], mod - <span class="number">2</span>); <span class="keyword">return</span>;&#125;</span><br><span class="line">  Inv(a, b, (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">int</span> len = Rev(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) tmp[i] = a[i];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; len; ++i) b[i] = tmp[i] = <span class="number">0</span>;</span><br><span class="line">  NTT(b, len, <span class="number">1</span>); NTT(tmp, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">    b[i] = (<span class="number">2l</span>l - <span class="number">1l</span>l * tmp[i] * b[i] % mod + mod) * b[i] % mod;</span><br><span class="line">  NTT(b, len, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) tmp[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; len; ++i) b[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代版本"><a href="#迭代版本" class="headerlink" title="迭代版本"></a><a href="https://blog.gyx.me/code/template/polynomial/inv2.cpp">迭代版本</a></h3><p>使用 O2 优化，用时 570 ms</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Inv</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  b[<span class="number">0</span>] = qpow(a[<span class="number">0</span>], mod - <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">int</span> len;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt; (n &lt;&lt; <span class="number">1</span>); l &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    len = Rev(l &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i) tmp[i] = a[i];</span><br><span class="line">    NTT(b, len, <span class="number">1</span>); NTT(tmp, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">      b[i] = (<span class="number">2l</span>l - <span class="number">1l</span>l * tmp[i] * b[i] % mod + mod) * b[i] % mod;</span><br><span class="line">    NTT(b, len, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; len; ++i) b[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式开根"><a href="#多项式开根" class="headerlink" title="多项式开根"></a>多项式开根</h2><p>使用 <a href="https://www.luogu.org/problemnew/show/P5205" target="_blank" rel="noopener">[ Luogu P5205 ] 多项式开根</a> 作为测试题，多项式求逆部分均采用递归版本。</p><p><strong>Sqrt</strong> 传入一个长度为 n 的数组 a，求出其模 x 的 n 次下的根 b，需要使用辅助数组 a0，b0</p><h3 id="递归版本-1"><a href="#递归版本-1" class="headerlink" title="递归版本"></a><a href="https://blog.gyx.me/code/template/polynomial/sqrt1.cpp">递归版本</a></h3><p>使用 O2 优化，用时 3081 ms</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Sqrt</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;b[<span class="number">0</span>] = <span class="number">1</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line">  Sqrt(a, b, (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  Inv(b, b0, n);</span><br><span class="line">  <span class="keyword">int</span> len = Rev(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) a0[i] = a[i];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; len; ++i) a0[i] = <span class="number">0</span>;</span><br><span class="line">  NTT(a0, len, <span class="number">1</span>); NTT(b0, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) a0[i] = <span class="number">1l</span>l * a0[i] * b0[i] % mod;</span><br><span class="line">  NTT(a0, len, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) b[i] = <span class="number">1l</span>l * (b[i] + a0[i]) % mod * inv2 % mod;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; len; ++i) b[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代版本-1"><a href="#迭代版本-1" class="headerlink" title="迭代版本"></a><a href="https://blog.gyx.me/code/template/polynomial/sqrt2.cpp">迭代版本</a></h3><p>使用 O2 优化，用时 3104 ms</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Sqrt</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> len;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt; (n &lt;&lt; <span class="number">1</span>); l &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    Inv(b, b0, l);</span><br><span class="line">    len = Rev(l &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i) a0[i] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; len; ++i) a0[i] = <span class="number">0</span>;</span><br><span class="line">    NTT(a0, len, <span class="number">1</span>); NTT(b0, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) a0[i] = <span class="number">1l</span>l * a0[i] * b0[i] % mod;</span><br><span class="line">    NTT(a0, len, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i) b[i] = <span class="number">1l</span>l * (b[i] + a0[i]) % mod * inv2 % mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; len; ++i) b[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式除法和取模"><a href="#多项式除法和取模" class="headerlink" title="多项式除法和取模"></a>多项式除法和取模</h2><p>使用 <a href="https://www.luogu.org/problemnew/show/P4512" target="_blank" rel="noopener">[ Luogu P4512 ] 多项式除法</a> 作为测试题，不再区分多项式求逆部分的实现方式。</p><p><strong>Div</strong> 传入一个长度为 n 的数组 a，和一个长度为 m 的数组 b，返回一个长度为 n-m 的商数组 d, 以及一个长度不超过 m 的余数数组 r</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><a href="https://blog.gyx.me/code/template/polynomial/div.cpp">代码实现</a></h3><p>使用 O2 优化，用时 710 ms</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Div</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) ar[i] = a[n - i];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) br[i] = b[m - i];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n - m + <span class="number">2</span>; i &lt;= n; ++i) ar[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n - m + <span class="number">2</span>; i &lt;= m; ++i) br[i] = <span class="number">0</span>;</span><br><span class="line">  Inv(br, invb, n - m + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">int</span> len = Rev((n - m + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">  NTT(ar, len, <span class="number">1</span>); NTT(invb, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) ar[i] = <span class="number">1l</span>l * ar[i] * invb[i] % mod;</span><br><span class="line">  NTT(ar, len, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - m; ++i) tmp[i] = d[i] = ar[n - m - i];</span><br><span class="line">  len = Rev(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n - m + <span class="number">1</span>; i &lt;= len; ++i) tmp[i] = <span class="number">0</span>;</span><br><span class="line">  NTT(b, len, <span class="number">1</span>); NTT(tmp, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) b[i] = <span class="number">1l</span>l * b[i] * tmp[i] % mod;</span><br><span class="line">  NTT(b, len, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) r[i] = mo(a[i] - b[i] + mod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分治-FFT"><a href="#分治-FFT" class="headerlink" title="分治 FFT"></a>分治 FFT</h2><p>使用 <a href="https://www.luogu.org/problemnew/show/P4721" target="_blank" rel="noopener">[ Luogu P4721 ] 分治 FFT</a> 作为测试题，多项式求逆采用递归版本。</p><h3 id="分治版本"><a href="#分治版本" class="headerlink" title="分治版本"></a><a href="https://blog.gyx.me/code/template/polynomial/divfft1.cpp">分治版本</a></h3><p><strong>Solve</strong> 传入分治区间 [l,r]，默认全局系数数组 g 和待求数组 f，需要辅助数组 a，b</p><p>使用 O2 优化，用时 974 ms</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">  solve(l, mid);</span><br><span class="line">  <span class="keyword">int</span> len = Rev((r - l + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len; ++ i) a[i] = b[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = l ; i &lt;= mid; ++ i) a[i - l] = f[i];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= r - l; ++ i) b[i] = g[i];</span><br><span class="line">  NTT(a, len, <span class="number">1</span>); NTT(b, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) a[i] = <span class="number">1l</span>l * a[i] * b[i] % mod;</span><br><span class="line">  NTT(a, len, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt;= r; ++i) f[i] = mo(f[i] + a[i - l]);</span><br><span class="line">  solve(mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多项式求逆版本"><a href="#多项式求逆版本" class="headerlink" title="多项式求逆版本"></a><a href="https://blog.gyx.me/code/template/polynomial/divfft2.cpp">多项式求逆版本</a></h3><p><strong>Solve</strong> 传入长度为 n-1 的系数数组 a，返回答案数组 b</p><p>使用 O2 优化，用时 261 ms</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) a[i] = mo(mod - a[i]);</span><br><span class="line">  Inv(a, b, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式求导和积分"><a href="#多项式求导和积分" class="headerlink" title="多项式求导和积分"></a>多项式求导和积分</h2><p><strong>Der</strong> 传入长度为 n 的数组 a，对其求导</p><p><strong>Int</strong> 传入长度为 n 的数组 a，对其积分</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Der</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) a[i - <span class="number">1</span>] = <span class="number">1l</span>l * i * a[i] % mod;</span><br><span class="line">  a[n - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Int</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) a[i] = <span class="number">1l</span>l * a[i - <span class="number">1</span>] * qpow(i, mod - <span class="number">2</span>) % mod;</span><br><span class="line">  a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式-ln"><a href="#多项式-ln" class="headerlink" title="多项式 ln"></a>多项式 ln</h2><p>使用 <a href="https://www.luogu.org/problemnew/show/P4725" target="_blank" rel="noopener">[ Luogu P4725 ] 多项式对数函数</a> 作为测试题，不再区分多项式求逆部分的实现方式。</p><p><strong>Ln</strong> 传入一个长度为 n 的数组 a，返回一个长度为 n 的数组 b 代表 ln(a)</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a><a href="https://blog.gyx.me/code/template/polynomial/ln.cpp">代码实现</a></h3><p>使用 O2 优化，用时 682 ms</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Ln</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  Inv(a, b, n); Der(a, n);</span><br><span class="line">  <span class="keyword">int</span> len = Rev(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">  NTT(a, len, <span class="number">1</span>); NTT(b, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) a[i] = <span class="number">1l</span>l * a[i] * b[i] % mod;</span><br><span class="line">  NTT(a, len, <span class="number">-1</span>); Int(a, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mathematics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MathJax 测试</title>
      <link href="/2019/02/23/mathjaxtest/"/>
      <url>/2019/02/23/mathjaxtest/</url>
      
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请单击此处并输入密码以浏览" />    <label for="pass">请单击此处并输入密码以浏览</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Mathematics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Goodbye Wuxu</title>
      <link href="/2019/02/04/goodbye-wuxu/"/>
      <url>/2019/02/04/goodbye-wuxu/</url>
      
        <content type="html"><![CDATA[<p>戊戌狗年结束了，这一年的生活还算顺利。</p><p>上下求索的过程中，一次次的走进迷茫，再从迷茫中回到自己。</p><p>尽人事，知天命。新的一年加油。</p><a id="more"></a><h2 id="Memorabilia"><a href="#Memorabilia" class="headerlink" title="Memorabilia"></a>Memorabilia</h2><p>Mar.  写了转入三三的申请。给十六留下了粗糙的值周记录PPT。</p><p>Apr.  转入三三。省选划水，最后是非正式 rank15。</p><p>May.  花了两天时间研究了 Hexo，采用的 Next 主题。</p><p>Jun.  人生第一次过集体生日。</p><p>Jul.  NOI 同步赛 Spfa 被卡。在洛谷出的比赛过审了，正解被爆踩。</p><p>Aug.  把 Dev-C++ 换了 Atom 。</p><p>Nov.  NOIP 2018 差点被送退役。</p><p>Dec.  参加学考。简单学了点 LaTeX 。</p><p>Jan. 参加 CCPC-Wannafly Winter Camp。</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>随便写点还记得的东西，想到哪里就写些什么了。</p><p>嘴上常挂着 “不忘初心 ”，但是做了不少表面文章，做了不少不懂装懂的傻事。</p><p>有的事情总是呆在 Todo List 上，但是一直不去碰，或是看了两下就把它扔回去，等到下决心去搞了，也有几次搞到一半因为奇奇怪怪的原因放弃了。但这些东西还老是堆在心里一直想着，列的 deadline 也总是咕掉。</p><p>花哨的东西却认认真真搞了不少，几度沉沦于形式的简约和规范，甚至是操作界面的美观。</p><p>很多东西浅尝辄止，只学了一个开头，就去做做水题装作很懂的样子，过了一段时间发现学的不透，又会回来重新再看一遍，反反复复。</p><p>OI 在上半年逐渐成了生活的主线。但是好多时候不知道事情从哪里下手，或者希望渺茫。</p><p>这段时间 OI 以外的生活过的还是比较愉快的，经历了值周，换班，听到了想听的课，见识了很强的同学们和新鲜的思路。但是精力渐渐不太放在文化课上了，好多该刷题的东西一直放着，下课就想往机房跑，到期末还是不怎么会做动量和电解池的题。</p><p>OI 上也没有踏实下来吃透些什么，该学的东西不知道为什么也一直在拖，逐渐的变成了回避，躲避，沉默，每遇到了这些知识点的话题。这种感觉就像个瘤，它就长在你的心上，但是你就是不会碰它，越长越大压得喘不过气来。</p><p>过了生日之后，某一个晚上给父母写了点东西。现在看当时略显稚气的信里并没有说出来什么深处的东西，但还是借此给自己打打气，当时的感觉是 “有所成长” ，也算在那个时期拉了自己一把，OI 开始有些起色。</p><p>NOIP 前的三个月或许是到现在为止最拼的一段时间吧。那段时间压力比较大，也收获了很多感动。</p><p>第一次停课单休也是很新鲜。但状况也不容乐观，好多东西还停留在认识的阶段，有段时间甚至接近崩溃。万幸的是有 Luan 能陪我挺过那段时间，互相交流，心情也逐渐变得乐观起来，工作比较高效。感觉自己能挺过那段时间也是挺神奇，一个多月学了之前落下的好多东西，还能挺住比较密集的考试。我要感谢 Luan，我都不敢想象没了他跟我交流现在我会是什么样子。</p><p>那段时间的生活过的比较平淡，但是充实。还不是太冷的时候跑了几次步，N 老师带着队，第一次没停下跑完了二南外圈 2km。</p><p>NOIP 的事情不想说太多了，以前也写过东西。分别是必然的，但很多意料之外的事情让人很痛苦。</p><p>学考之后这段时间过的比较平凡。事情变得开朗一些。</p><p>突击学考算是一种比较奇妙的体验吧。当整天整天的摸不到键盘的时候，就会坐不住，开始知道自己已经离不开了。教学楼里有趣的事情倒是不少，少见的感受到了 C 主任的亲民，趁着自习的时候也可以偷着拜读一下渡边先生的大作了。</p><p>去不了 NOIWC 的事情也是早就准备好的，能去 CCPC-Wannafly Winter Camp 算是一个惊喜吧，以大学生的视角看算法竞赛也是一种体验。搞到了自己的域名也算是了了一桩心事，以后颓废的时候可能会开发一下。</p><p>大家都好厉害啊。逐渐发现自己站位有些低，或许该多想想远一些的事情。</p><p>希望新的一年自己能专注一些，注意自律，做些务实的事情。</p>]]></content>
      
      
      <categories>
          
          <category> Thinking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Records of CodeForces Rounds</title>
      <link href="/2019/01/14/codeforces/"/>
      <url>/2019/01/14/codeforces/</url>
      
        <content type="html"><![CDATA[<p>简单记录 CodeForces 上打比赛的排名和 Rating 变化。</p><p>一些题目的题解和细节写到了解题报告里，代码详见下方说明。</p><p>本篇长期置顶。有问题请联系我，万分感谢。</p><a id="more"></a><h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><p>这里是自己写的一些比赛题解。</p><p>代码可以去 <a href="http://codeforces.com/submissions/SGColin" target="_blank" rel="noopener">My Submissions</a> 找，或者去我的 <a href="https://github.com/SGColin/SGColin.github.io/tree/master/code/codeforces" target="_blank" rel="noopener">代码仓库</a> 看，或者访问：</p><p><code>https://blog.gyx.me/code/codeforces/name.cpp</code> </p><p>在 <code>name</code> 处输入题号就可以了，例如 <code>1100A</code> 的 <a href="https://blog.gyx.me/code/codeforces/1100A.cpp">访问结果</a> 。</p><ul><li><a href="https://blog.gyx.me/papers/codeforces/cf514.pdf">Codeforces Round #514 (Div. 2)</a></li><li><a href="https://blog.gyx.me/papers/codeforces/cf524.pdf">Codeforces Round #524 (Div. 2)</a></li><li><a href="https://blog.gyx.me/papers/codeforces/cf525.pdf">Codeforces Round #525 (Div. 2)</a></li><li><a href="https://blog.gyx.me/papers/codeforces/cf532.pdf">Codeforces Round #532 (Div. 2)</a></li><li><a href="https://blog.gyx.me/papers/codeforces/edu55.pdf">Educational Codeforces Round 55 (Rated for Div. 2)</a></li><li><a href="https://blog.gyx.me/papers/codeforces/edu58.pdf">Educational Codeforces Round 58 (Rated for Div. 2)</a></li></ul><h2 id="Contests-Record"><a href="#Contests-Record" class="headerlink" title="Contests Record"></a>Contests Record</h2><p>只记录赛时的结果，Virtual 的比赛不再记录。</p><p>详细的场次信息以及考场代码可以戳表格里的链接。</p><div class="table-container"><table><thead><tr><th style="text-align:center">Contest</th><th style="text-align:center">Rank</th><th style="text-align:center">Solved</th><th style="text-align:center">Rating Change</th><th style="text-align:center">Level</th></tr></thead><tbody><tr><td style="text-align:center"><a href="http://codeforces.com/contest/1059" target="_blank" rel="noopener">Codeforces Round #514 (Div. 2)</a></td><td style="text-align:center"><a href="http://codeforces.com/contest/1059/standings/participant/20149739#p20149739" target="_blank" rel="noopener">1150</a></td><td style="text-align:center"><a href="http://codeforces.com/submissions/SGColin/contest/1059" target="_blank" rel="noopener">3</a></td><td style="text-align:center">1500 - 1544</td><td style="text-align:center"><font color="#20B2AA">Specialist</font></td></tr><tr><td style="text-align:center"><a href="http://codeforces.com/contest/1064" target="_blank" rel="noopener">Codeforces Round #516 (Div. 2)</a></td><td style="text-align:center"><a href="http://codeforces.com/contest/1064/standings/participant/20382251#p20382251" target="_blank" rel="noopener">181</a></td><td style="text-align:center"><a href="http://codeforces.com/submissions/SGColin/contest/1064" target="_blank" rel="noopener">4</a></td><td style="text-align:center">1544 - 1675</td><td style="text-align:center"><font color="#0000FF">Expert</font></td></tr><tr><td style="text-align:center"><a href="http://codeforces.com/contest/1072" target="_blank" rel="noopener">Codeforces Round #517 (Div. 2)</a></td><td style="text-align:center"><a href="http://codeforces.com/contest/1072/standings/participant/20554215#p20554215" target="_blank" rel="noopener">676</a></td><td style="text-align:center"><a href="http://codeforces.com/submissions/SGColin/contest/1072" target="_blank" rel="noopener">2</a></td><td style="text-align:center">1675 - 1666</td><td style="text-align:center"><font color="#0000FF">Expert</font></td></tr><tr><td style="text-align:center"><a href="http://codeforces.com/contest/1080" target="_blank" rel="noopener">Codeforces Round #524 (Div. 2)</a></td><td style="text-align:center"><a href="http://codeforces.com/contest/1080/standings/participant/21290259#p21290259" target="_blank" rel="noopener">1443</a></td><td style="text-align:center"><a href="http://codeforces.com/submissions/SGColin/contest/1080" target="_blank" rel="noopener">2</a></td><td style="text-align:center">1666 - 1619</td><td style="text-align:center"><font color="#0000FF">Expert</font></td></tr><tr><td style="text-align:center"><a href="http://codeforces.com/contest/1087" target="_blank" rel="noopener"> Codeforces Round #528 (Div. 2)</a></td><td style="text-align:center"><a href="http://codeforces.com/contest/1087/standings/participant/21856836#p21856836" target="_blank" rel="noopener">58</a></td><td style="text-align:center"><a href="http://codeforces.com/submissions/SGColin/contest/1087" target="_blank" rel="noopener">4</a></td><td style="text-align:center">1619 - 1787</td><td style="text-align:center"><font color="#0000FF">Expert</font></td></tr><tr><td style="text-align:center"><a href="http://codeforces.com/contest/1101" target="_blank" rel="noopener">Educational Round 58 (Rated for Div. 2)</a></td><td style="text-align:center"><a href="http://codeforces.com/contest/1101/standings/participant/22276981#p22276981" target="_blank" rel="noopener">1328</a></td><td style="text-align:center"><a href="http://codeforces.com/submissions/SGColin/contest/1101" target="_blank" rel="noopener">3</a></td><td style="text-align:center">1787 - 1751</td><td style="text-align:center"><font color="#0000FF">Expert</font></td></tr><tr><td style="text-align:center"><a href="http://codeforces.com/contest/1100" target="_blank" rel="noopener">Codeforces Round #532 (Div. 2)</a></td><td style="text-align:center"><a href="http://codeforces.com/contest/1100/standings/participant/22329455#p22329455" target="_blank" rel="noopener">19</a></td><td style="text-align:center"><a href="http://codeforces.com/submissions/SGColin/contest/1100" target="_blank" rel="noopener">4</a></td><td style="text-align:center">1751 - 1974</td><td style="text-align:center"><font color="#800080">Candidate Master</font></td></tr><tr><td style="text-align:center"><a href="http://codeforces.com/contest/1137" target="_blank" rel="noopener">Codeforces Round #545 (Div. 1)</a></td><td style="text-align:center"><a href="http://codeforces.com/contest/1137/standings/participant/23581580#p23581580" target="_blank" rel="noopener">377</a></td><td style="text-align:center"><a href="http://codeforces.com/submissions/SGColin/contest/1137" target="_blank" rel="noopener">2</a></td><td style="text-align:center">1974 - 1937</td><td style="text-align:center"><font color="#800080">Candidate Master</font></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solution </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP 2018 Tour</title>
      <link href="/2018/12/08/noip2018/"/>
      <url>/2018/12/08/noip2018/</url>
      
        <content type="html"><![CDATA[<p>按照惯例写一篇游记，以及简要题解。</p><p><strong>谨以此文纪念我高中信息学竞赛的第一次正式考试。</strong></p><p>飞雪连天射白鹿，笑书神侠倚碧鸳。纪念伟大的金庸先生。</p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><a href="">Solution for NOIP 2018</a></p><p>终于在年前把这套题补完了，心情复杂。</p><h2 id="Diary"><a href="#Diary" class="headerlink" title="Diary"></a>Diary</h2><h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day -1"></a>Day -1</h3><p>离考试越近自己越静不下来。</p><p>中午一点到了石家庄站，今年的比赛还是在燕大。</p><p>等车的时候发现不会在虚拟机里编译，慌张地问了一波。</p><p>上火车之后莫名其妙被换座到了1A。颓的时候发现，旁边两位爷开始离线切题太强了。</p><h3 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h3><p>早上起来被教练通知又要考一场模拟赛。T3 只会 60 暴力，然后事后诸葛…</p><p>下午试机。耍无赖苟在那里将近一个小时，最后只是敲了链剖和倍增互拍，还拍挂了慌慌慌。</p><p>晚上学长说注意事项，感觉讲的东西都没听说过。回去之后和 ZH 一起梳理了知识点，感觉不错。</p><p>睡觉的时候外面有跑步和喊叫的声音，以及午夜凶铃。以为是初中的 <del>后来得知是高一学长</del>。</p><h3 id="Day-1-1"><a href="#Day-1-1" class="headerlink" title="Day 1"></a>Day 1</h3><p>今天在燕大 1 机房，座位在前排角落，周围目测是友善的高一学长。</p><p>开题发现<code>i7-8700K</code> 以及 <code>512M</code> ，非常资瓷啊，再也不怕常数大了…</p><p>T1 确认完题意就会做了。 在<code>首尾相接</code> 上纠结了一会，发现样例解释不了环，就放心写了。</p><p>T2 读了两遍题，感觉有点难。玩样例发现选的都是原来就有的数，觉得有些蹊跷。冷静了一下，分情况讨论证明这个结论是对的，然后就得到了排序之后用背包贪心的解法。</p><p>T3 明白了问题模型之后，发现不会找树上一堆链，开始看部分分。发现简单的子任务合起来就有 55 了，于是先写了这些点，解法分别是树的直径，所有边长取最小值，正常的二分答案+验证，以及二分答案+双指针。</p><p>然后上个厕所冷静了一下，回来发现可以用树形DP搞。几次 WA 和 死循环 之后，找了好多反例，高度紧张的状态下在11:40 的时候终于码完了，应该是我人生中第一个考场 200+行吧。测了一发大样例没有 TLE ，肉眼比对第一页没锅，打开<code>cmd</code> ，输入<code>fc track.out track3.ans</code>，显示<code>FC: 找不到差异</code>，突然觉得全世界都清静了。</p><p>下午在宾馆里看板子，晚上十点多就睡了。意外的睡得不错。</p><h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h3><p>今天在燕大 4 机房，座位在正中间，前面是 zyz 后面是 czy ，旁边的老哥看起来不是很友好。</p><p>T1 开始以为是最小字典序拓扑序，写完过不了样例，发现读错题了，应该是是 DFS 序。想起来还没有看数据范围，看完发现是基环树。发现 60 很好写，100 只会平方复杂度，因为用的是邻接矩阵，感觉写起来很麻烦就先撂下了。</p><p>T2 题面太长就先做的 T3 。NOIP 前写过一道题，是 [SDOI2006] 保安站岗 。<strong>我就把边覆盖读成了点覆盖</strong>，十分自信地码完了 44 的暴力，<strong>竟然过了样例</strong>，然后就十分自信地去搞 T2 了。</p><p>T2 明确题意后写了状压路径的 20 暴力，开始找规律。发现和前不久 CodeForces 的 一道 D 题可能有一样的思路，每一条斜线上只要只是一段前缀 1 就合法了，因为每一条斜线上的点在字典序列位置相同。然后推了个公式带进去，发现 n=3,m=3 得到 144 ，而题面上写着 112。</p><p>找了很久没有发现原因，只好把不合法情况打出来，发现两条交错路径就凉了。尝试状压斜线，发现不会转移，只好暴力把 n,m<9 的表打出来算了。打的时候发现对于="" m="">n 的情况，(n,m) 的方案数等于 (n,m-1) 方案数的三倍。发现规律对 n&gt;4 并不适用，就只打了前 65 ，放弃了剩下的 35 。</9></p><p>回去赶 T1 ，思路混乱，发现得把邻接矩阵存改回邻接表。写完发现跑不出来，慌了，把 T1 60 的代码和另外两道题先打了包。到最后都没有调出来，最后收卷的时候头脑一片空白。</p><p>下午去看海，照了合影。我和 Luan 在沙滩上留下了手划出来的字。我写了<code>NEXT YEAR GOTO NOI 2019</code> 。</p><p>返程火车上老师把代码发下来了，交到洛谷上 60+65+0=125 恍恍惚惚，比预想的还要糟糕，没有再和教练说什么。晚上机房泡面，聊天时终于发现自己读错题的事实。</p><h3 id="Day-n"><a href="#Day-n" class="headerlink" title="Day n"></a>Day n</h3><p>几个晚上都在想，如果 Day2T1 码出来，或者 Day2T3 没读错题就能加上四十多。</p><p>民间数据在 HE 大概 rank30+ ，我还是想接着学的啊。</p><p>最后拿到了成绩单，跟洛谷上测出来成绩差不多。</p><p><img src="https://blog.gyx.me/images/noip2018.png" alt=""></p><p>得到了 rank40+ 的尴尬境地，几经折腾可以留下来准备省选了。</p><h2 id="Summaries-and-Flags"><a href="#Summaries-and-Flags" class="headerlink" title="Summaries and Flags"></a>Summaries and Flags</h2><p>稍微多说两句。</p><p>不要期望超常发挥，正常发挥就是最大的幸运。</p><p>心态要平衡，OI 两天的赛制也考验心态。之所以会出现低级错误，就是考场上想得太多。考场上不要想之前考的怎么样，认真做题就是最大的成功。</p><p>后面的学习已经有赌的成分在里面了，立一些 Flag 激励自己。</p><ul><li>少看游记少颓废</li><li>省选阶段模拟赛能搞懂的题都改完写题解</li><li>做掉尽可能多的近 5 年内各地省选题</li><li>把能打的不是猝死场的 CodeForces 都打了，赛后补题解</li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Travel </tag>
            
            <tag> Solution </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/11/29/hello-world/"/>
      <url>/2018/11/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>不忘初心，方得始终。初心易得，始终难守。</p><p>希望自己能记住为之坚持的东西，记住不掺杂利益的热爱。</p><p>希望自己能学会果断选择，不再踌躇，有拥抱生活的勇气。</p><p>Hello, the lovely world.</p><a id="more"></a><hr><p>优美胜于丑陋 明了胜于晦涩</p><p>简单胜于复杂 复杂胜于杂乱</p><p>扁平胜于嵌套 间隔胜于紧凑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> this</span><br><span class="line">The Zen of Python, by Tim Peters</span><br><span class="line"></span><br><span class="line">Beautiful <span class="keyword">is</span> better than ugly.</span><br><span class="line">Explicit <span class="keyword">is</span> better than implicit.</span><br><span class="line">Simple <span class="keyword">is</span> better than complex.</span><br><span class="line">Complex <span class="keyword">is</span> better than complicated.</span><br><span class="line">Flat <span class="keyword">is</span> better than nested.</span><br><span class="line">Sparse <span class="keyword">is</span> better than dense.</span><br><span class="line">Readability counts.</span><br><span class="line">Special cases aren<span class="string">'t special enough to break the rules.</span></span><br><span class="line"><span class="string">Although practicality beats purity.</span></span><br><span class="line"><span class="string">Errors should never pass silently.</span></span><br><span class="line"><span class="string">Unless explicitly silenced.</span></span><br><span class="line"><span class="string">In the face of ambiguity, refuse the temptation to guess.</span></span><br><span class="line"><span class="string">There should be one-- and preferably only one --obvious way to do it.</span></span><br><span class="line"><span class="string">Although that way may not be obvious at first unless you'</span>re Dutch.</span><br><span class="line">Now <span class="keyword">is</span> better than never.</span><br><span class="line">Although never <span class="keyword">is</span> often better than *right* now.</span><br><span class="line">If the implementation <span class="keyword">is</span> hard to explain, it<span class="string">'s a bad idea.</span></span><br><span class="line"><span class="string">If the implementation is easy to explain, it may be a good idea.</span></span><br><span class="line"><span class="string">Namespaces are one honking great idea -- let'</span>s do more of those!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Thinking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
