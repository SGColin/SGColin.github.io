<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Codeforces Records</title>
      <link href="2024/06/16/Codeforces/"/>
      <url>2024/06/16/Codeforces/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><center><font size=4>目前共做完了</font>   &nbsp; <font color=red size=6>2</font>  &nbsp;  <font size=4> 轮 Codeforces Contests 和</font> &nbsp; <font color=red size=6>1</font>  &nbsp;  <font size=4> 套 Gym</font></center><!--more--><h2 id="Dec-16-Round-761-4-6"><a href="#Dec-16-Round-761-4-6" class="headerlink" title="Dec / 16 - Round # 761 (4/6)"></a>Dec / 16 - Round # 761 (4/6)</h2><h2 id="Dec-14-Round-760-7-7"><a href="#Dec-14-Round-760-7-7" class="headerlink" title="Dec / 14 - Round # 760 (7/7)"></a>Dec / 14 - Round # 760 (7/7)</h2><h2 id="Nov-26-Round-757-3-6"><a href="#Nov-26-Round-757-3-6" class="headerlink" title="Nov / 26 - Round #757 (3/6)"></a>Nov / 26 - Round #757 (3/6)</h2><h2 id="Nov-23-Global-17-2-9"><a href="#Nov-23-Global-17-2-9" class="headerlink" title="Nov / 23 - Global #17 (2/9)"></a>Nov / 23 - Global #17 (2/9)</h2><h2 id="Nov-22-Edu-117-5-7"><a href="#Nov-22-Edu-117-5-7" class="headerlink" title="Nov / 22 - Edu #117 (5/7)"></a>Nov / 22 - Edu #117 (5/7)</h2><h2 id="Nov-14-Round-755-2-7"><a href="#Nov-14-Round-755-2-7" class="headerlink" title="Nov / 14 - Round #755 (2/7)"></a>Nov / 14 - Round #755 (2/7)</h2><h2 id="Nov-12-Round-754-4-6"><a href="#Nov-12-Round-754-4-6" class="headerlink" title="Nov / 12 - Round #754 (4/6)"></a>Nov / 12 - Round #754 (4/6)</h2><h2 id="Oct-30-Round-752-5-8"><a href="#Oct-30-Round-752-5-8" class="headerlink" title="Oct / 30 - Round #752 (5/8)"></a>Oct / 30 - Round #752 (5/8)</h2><ul><li><p>A（构造）：插入最少的数使得 $a_i\le i$ 。显然插入 $1$ 就可以了，需要插入的最少个数是 $\max_{i=1}^n\max(0, a_i-i)$ </p></li><li><p>B（构造）：将数列分段使每段 LIS 长度异或和为 $0$ 。偶数长 $1$ 个数 $1$ 段，奇数长找长度为 $2$ 的块 LIS 为 $1$ 即可。</p></li><li><p>C（构造）：若一个前缀可以删干净，则当前数可以在前方任意位置被删掉，暴力判断 10 个质数的范围即可。</p></li><li><p>D（构造）：找到一个 $n$ 使得 $n\ \text{mod}\ x = y\ \text{mod}\ n$ ，其中 $x,y$ 为偶数。</p><ul><li>若 $x&gt;y$ ，令 $n=x+y$ </li><li>若 $x=y$ ，令 $n=x$</li><li>若 $x&lt;y$ ，令 $n=\lfloor\frac{y}{x}\rfloor x+\frac{y\ \text{mod}\ x}{2}$ ，$x,y$ 为偶数保证 $y\ \text{mod}\ x$ 可以被 $2$ 整除</li><li>推导的方法是设 $n=t_1x+k,y = t_2n+k$ ，整理后发现令 $t_2=1$ 即可</li></ul></li><li><p>E（暴力）：设 $f[i][j]$ 表示有多少个 $i$ 的后缀，使得最优解中 $a_i\to j$ ，这样每个位置只有 $\sqrt{a_i}$ 种可能的取值，暴力转移即可，每次的贡献是 $i\times f[i+1][j]\times (\lceil\frac{a_i}{a_i+1}\rceil - 1)$ ，清空数组的方法比较有技巧。其实子序列也可以做。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> a[N], f[<span class="hljs-number">2</span>][N];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; pos[<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i] = rd();<br>    <span class="hljs-keyword">int</span> u = (n &amp; <span class="hljs-number">1</span>), v = <span class="hljs-number">1</span> - (n &amp; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i; --i, u ^= <span class="hljs-number">1</span>, v ^= <span class="hljs-number">1</span>) &#123;<br>        f[u][a[i]] = <span class="hljs-number">1</span>;<br>        pos[u].push_back(a[i]);<br>        <span class="hljs-keyword">int</span> lst = a[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : pos[v]) &#123;<br>            <span class="hljs-keyword">int</span> cnt = (a[i] + x - <span class="hljs-number">1</span>) / x;<br>            <span class="hljs-comment">//前面的方案数为i, 后面的方案数为f[v][x]</span><br>            ans = (ans + <span class="hljs-number">1l</span>l * i * f[v][x] * (cnt - <span class="hljs-number">1</span>)) % mod;<br>            <span class="hljs-keyword">int</span> tar = a[i] / cnt;<br>            f[u][tar] += f[v][x];<br>            <span class="hljs-keyword">if</span> (lst != tar) &#123;pos[u].push_back(tar); lst = tar;&#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : pos[v]) f[v][x] = <span class="hljs-number">0</span>;<br>        pos[v].clear();<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : pos[<span class="hljs-number">0</span>]) f[<span class="hljs-number">0</span>][x] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : pos[<span class="hljs-number">1</span>]) f[<span class="hljs-number">1</span>][x] = <span class="hljs-number">0</span>;<br>    pos[<span class="hljs-number">0</span>].clear(); pos[<span class="hljs-number">1</span>].clear();<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="Oct-29-Edu-116-4-6"><a href="#Oct-29-Edu-116-4-6" class="headerlink" title="Oct / 29 - Edu #116 (4/6)"></a>Oct / 29 - Edu #116 (4/6)</h2><h2 id="Oct-25-Round-751-3-8"><a href="#Oct-25-Round-751-3-8" class="headerlink" title="Oct / 25 - Round #751 (3/8)"></a>Oct / 25 - Round #751 (3/8)</h2><ul><li>D（不是DAG）：没注意到方案中一次跳跃可能会落到比出发点更低的地方。直接线段树优化建图是可以的。</li></ul><h2 id="Oct-24-Round-750-7-8"><a href="#Oct-24-Round-750-7-8" class="headerlink" title="Oct / 24 - Round #750 (7/8)"></a>Oct / 24 - Round #750 (7/8)</h2><ul><li>A （数据范围）：因为 1,2,3 个数都大于 $0$ ，所以可以组合出 $[1,\sum a_i]$ 内所有整数，所以拆成两部分差不会超过 $1$</li><li>D （特殊情况）：奇数构造时忘记考虑可能有相同的数字，用减法可能会产生 $0$ ，$n$ 为奇数的时候恰好是 $n$ 上界 $-1$ ，因此刚好剩出来一个 $10^4$ 的空间，直接用加法构造即可。</li><li>E （倒序转移）：要求区间越往后，长度越短+值越大，不好扩展（无法继承上一状态），转化成从右往左选区间，长度越长+值越小，这样就可以继承之前的状态了。设 $f[i][j]$ 表示到第 $i$ 个为止，最后一段长度为 $j$ 的区间和的最大值。</li><li>F （维护技巧）</li></ul><h2 id="Oct-17-Round-749-2-9"><a href="#Oct-17-Round-749-2-9" class="headerlink" title="Oct / 17 - Round #749 (2/9)"></a>Oct / 17 - Round #749 (2/9)</h2><h2 id="Oct-13-Edu-115-0-6"><a href="#Oct-13-Edu-115-0-6" class="headerlink" title="Oct / 13 - Edu #115 (0/6)"></a>Oct / 13 - Edu #115 (0/6)</h2><h2 id="Oct-09-Round-747-0-6"><a href="#Oct-09-Round-747-0-6" class="headerlink" title="Oct / 09 - Round #747 (0/6)"></a>Oct / 09 - Round #747 (0/6)</h2><h2 id="Oct-03-Round-746-5-7"><a href="#Oct-03-Round-746-5-7" class="headerlink" title="Oct / 03 - Round #746 (5/7)"></a>Oct / 03 - Round #746 (5/7)</h2><ul><li><p>B（分讨）：交换距离不小于 $k$ ，则不可移动的范围为 $[n - x + 1, x]$ ，只需保证这些位置数字正确即可。</p></li><li><p>C（性质）：注意到多个块是可以三个合并成一个的，因此任何解都等价于只划分成两个块或三个块。设所有 $a[i]$ 异或和为 $A$ ，若 $A=0$ 则可以划分为两个块。其余情况判断是否能划分成三个块，一遍 <code>dfs</code> 计数异或和为 $A$ 的块即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = hd[u], v; i; i = e[i].nxt)<br><span class="hljs-keyword">if</span> ((v = e[i].to) != fa) &#123;dfs(v, u); a[u] ^= a[v];&#125;<br><span class="hljs-keyword">if</span> (a[u] == tar) &#123;++cnt; a[u] = <span class="hljs-number">0</span>;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>D（构造）：寻找具有某个性质的路径可以考虑转化到欧拉序上二分。</p></li><li><p>E（性质）：注意到任意奇数长度的区间，所有数字的<strong>与和</strong> $\le$ <strong>异或和</strong>，因为与和为 $1$ 的位置，异或和里也是奇数个 $1$ 。而偶数长度的区间，<strong>与和</strong>为 $1$ 的位置<strong>异或和</strong>必定为 $0$ ，因此只要判断区间所有数比<strong>与和最高位</strong>更高的部分异或和是不是 $0$ 即可，枚举与和最高位，按照异或差分的思路维护，注意区间偶数长度的要求，需要区分奇偶位置。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> a[N], lst[N][<span class="hljs-number">2</span>], ans;<br><br><span class="hljs-built_in">memset</span>(lst, <span class="hljs-number">0xcf</span>, <span class="hljs-keyword">sizeof</span>(lst));<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = <span class="hljs-number">20</span>; t &gt;= <span class="hljs-number">0</span>; --t) &#123;<br>lst[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, pre = <span class="hljs-number">0</span>; i &lt;= n; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (!(a[i] &amp; (<span class="hljs-number">1</span> &lt;&lt; t))) &#123;<br>      pre = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span> (!s.empty()) &#123;<br>        <span class="hljs-keyword">int</span> x = s.front(); s.pop();<br>        lst[x][<span class="hljs-number">0</span>] = lst[x][<span class="hljs-number">1</span>] = <span class="hljs-number">-1</span>;<br>      &#125;<br>      <span class="hljs-comment">//注意区间从头开始的情况</span><br>      lst[<span class="hljs-number">0</span>][i &amp; <span class="hljs-number">1</span>] = i;<br>      lst[<span class="hljs-number">0</span>][<span class="hljs-number">1</span> - (i &amp; <span class="hljs-number">1</span>)] = <span class="hljs-number">-1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      pre ^= (a[i] &gt;&gt; (t + <span class="hljs-number">1</span>));<br>      <span class="hljs-keyword">int</span> fl = (i &amp; <span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">if</span> (lst[pre][fl] &lt; <span class="hljs-number">0</span>) lst[pre][fl] = i;<br>        <span class="hljs-keyword">if</span> (lst[pre][fl] &gt;= <span class="hljs-number">0</span>) ans = max(ans, i - lst[pre][fl]);<br>        s.push(pre); <span class="hljs-comment">//记录需要清空的位置</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!s.empty()) &#123;<br>      <span class="hljs-keyword">int</span> x = s.front(); s.pop();<br>      lst[x][<span class="hljs-number">0</span>] = lst[x][<span class="hljs-number">1</span>] = <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="Feb-12-Round-701-6-6"><a href="#Feb-12-Round-701-6-6" class="headerlink" title="Feb / 12 - Round #701 (6/6)"></a>Feb / 12 - Round #701 (6/6)</h2><ul><li><p>Add and Divide</p><p>首先最优解一定是 <code>++b</code> 若干次（可能为 $0$ ），然后再一直做 <code>a=a/b</code> 直到符合条件。</p><p>考虑最差的情况：$a=10^9,b=1$ ，至多只需 $1+\lceil \log_2{10^9}\rceil = 31$ 次，所以所有答案都 $\le 31$。</p><p>因此枚举<code>++b</code> 的操作次数 $k\ (0\le k\le 31)$  ，然后暴力计算答案即可，复杂度 $\text O(t\log^2 a)$ 。</p></li><li><p>B. Replace and Keep Sorted</p><p>考虑 $b_i\not =a_i$ ，那么考虑 $b_i$ 的取值范围：</p><ul><li><p>对于 $i=l$ 的情况， $1\le b_i&lt;a_{i+1}$ ，与 $a_i$ 不同的方案有 $a_{i + 1} - 2$ 个。</p></li><li><p>对于 $i=r$ 的情况， $a_{i-1}&lt;b_i\le k$ ，与 $a_i$ 不同的方案有 $k - a_{i-1} - 1$ 个。</p></li><li><p>对于 $l&lt;i&lt;r$ 的情况， $a_{i-1}&lt;b_i&lt;a_{i+1}$ ，与 $a_i$ 不同的方案有 $a_{i+1}-a_{i-1}-2$ 个。</p></li></ul><p>$i$ 不同的贡献是独立的，所以用前缀和优化一下第三部分的计算，各个位置的方案数求和即可。</p></li><li><p>C. Floor and Mod</p><p>设 $\lfloor a/b\rfloor=a\ \text{mod}\ b=k$ ，根据整除理论，有 $a=k *b+k$ ，且 $k &lt; b$ 。</p><p>考虑枚举 $k$ ，去数可行的 $b$ ，那么限制条件有：$1\le b \le y\ ,\ 1\le k*b+b=a\le x$</p><p>移项，得 $1\le b\le \min(y,\ x / k - 1)$ ，即 $k$ 的贡献为 $\min(y,\ x/k - 1)$ 。</p><p>又由 $k\le b$ 得 $k ^2 &lt;  k * b+k = a\le x$ ，得 $k\le \sqrt x$ ，因此 $O(t\sqrt x)$ 枚举 $k$ 直接计算即可。</p><hr><p>比赛时用的另一种做法，复杂度也是 $\text O(t\sqrt x)$ ：</p><p>考虑枚举 $b$ ，由上知可行的 $a = k *(b+1)$ 且 $1\le k\le b-1$ 。</p><p>考虑枚举 $b$ ，则贡献为 $\min(b-1,\lfloor x/(b + 1)\rfloor)$ ，具体的：</p><ul><li><p>当 $(b+1)(b-1)\le x$ 时，即 $b \le \sqrt{x + 1}$ 时，贡献为 $b-1$ ，可以等差数列求和。</p></li><li><p>否则贡献取 $\lfloor x /(b + 1)\rfloor$ ，整除分块计算即可。</p></li></ul></li><li><p>D. Multiples and Power Differences</p><p>数据范围 $1\le a_{i,j}\le 16$ ，观察：</p><ul><li><p>$\text{lcm}(1,2,\cdots,16)=720720\le 10^6 - 10^5$ </p></li><li><p>$16^4 = 65536\le 10^5$</p></li></ul><p>将矩阵黑白染色，黑色变为 $720720$ ， 白色变为 $720720+x^4$ 即可 （ $x$ 为原矩阵对应位置的数）</p></li><li><p>E. Move and Swap</p><p>设 $f[u]$ 表示红点在 $u$ 时，$u$ 及其子树的最大得分。</p><p>若红蓝不交换，假设红色在 $u$ ，则最优解本质上是 $u$ 儿子最大得分 + 同深度点与 $u$ 点权最大差值。</p><p>若红蓝交换，则本质是任选同深度节点 $v$ 的最优儿子，及 $v$ 与 $u$ 点权差值。</p><p>那么转移方程具体的（设 $d[u]$ 表示节点 $u$ 的深度）：<br>$$<br>f[u] = \max \bigg \{ \max_{s\in son[u]} f[s] + \max_{d[v] = d[u]} | a_u - a_v |\ ,\ \max_{d[v]=d[u]}\bigg(|a_u-a_v| + \max_{s\in son[v]} f[s]\bigg)\bigg \}<br>$$<br>可以发现转移是<strong>从深到浅</strong>转移的。第一部分直接枚举儿子转移即可，第二部分维护：</p><p>$$<br>mxp[d] = \max_{d[v]=d}\bigg(a_v + \max_{s\in son[v]} f[s]\bigg)\ ,\ mxm[d] = \max_{d[v]=d}\bigg(-a_v + \max_{s\in son[v]} f[s]\bigg)<br>$$</p><p>则第二部分的转移就可以表示为 $f[u] = \max{mxp[d[u]] - a[u],mxm[d[u]]+a[u]}$ 。</p></li><li><p>F. Copy or Prefix Sum</p><p>假设当前处理到第 $i$ 位，前 $i-1$ 位的和为 $S$ ，那么 $a_i=b_i$ 或者 $a_i=b_i-S$ 都是可以的。</p><p>那么答案为什么不是 $2^n$ 呢？因为 $S=0$ 时会重复计数。</p><p>设 $f_{i,S}$ 表示前 $i$ 位填完，前缀和为 $S$ 的方案数，那么转移为：</p><ul><li><p>$a_i=b_i$ ： $\forall S\ ,\  f_{i+1,S+b_i} += f_{i,S}$</p></li><li><p>$a_i = b_i -S$ ： $\forall S\ ,\ f_{i+1,b_i}+=f_{i,S}$ ，即 $f_{i+1,b_i}=\sum_{\forall  S} f_{i,S}$</p></li><li><p>$S=0$ 去重：$f_{i+1,b_i} -= f_{i,0}$</p></li></ul><p>综上，$i\to i+1$ 转移的过程即为：所有的 $f$ 整体向右偏移 $b_i$ ，然后对 $f_{b_i}$ 单独赋值。</p><p>因此省略第一维，使用 <code>map</code>  维护第二维，用记录整体偏移量的方法优化。</p><p>记录 $tot=\sum_{k=1}^ib_k\ ,\ ans=\sum_{\forall S} f_S$ ，递推即可，实现见 <a href="http://blog.gyx.me/code/codeforces/1485F.cpp">代码</a> 。</p></li></ul><h2 id="Feb-05-Round-699-4-6"><a href="#Feb-05-Round-699-4-6" class="headerlink" title="Feb / 05 - Round #699 (4/6)"></a>Feb / 05 - Round #699 (4/6)</h2><ul><li><p>A. Space Navigation</p><p>  统计四个方向的移动分别有多少，只保留走向目标向量对应方向的移动，判断是否可达。</p></li><li><p>B. New Colony</p><p>  观察数据范围 $n,h_i\le 100$ 最多扔 $10^4$ 个石头就结束了，模拟 $\text O(n^2h)$ 即可。</p></li><li><p>C. Fence Painting</p><p>首先如果最后一次涂色不在 $b_i$ 里，肯定无解。</p><p>然后如果所有涂色不能满足将所有 $a_i$ 和 $b_i$ 不一样的位置覆盖为 $b_i$ ，则无解。</p><p>剩下的情况必定有解，一种构造方法：</p><p>对每种颜色 $c$ 预处理出来所有 $a_i$ 和 $b_i$ 不同且 $b_i=c$ 的位置集合 $S_c$ 。</p><p>首先确定最后一次涂色的位置 $pos_m$ ：</p><ul><li><p>若 $S_{c_m}$ 为空，则令 $pos_m$ 为任意一个 $b_i=c_m$ 的位置。</p></li><li><p>若 $S_{c_m}$ 不为空，则让 $pos_m$ 为 $S_{c_m}$ 中的任意一个，并将该位置移出 $S_{c_m}$ 。</p></li></ul><p>然后时间倒序考虑，对于当前颜色 $c_j$ ：</p><ul><li><p>若 $S_{c_j}$ 为空，那么让 $pos_j=pos_m$ ，因为第 $m$ 次操作是最后一次，所以肯定会覆盖。</p></li><li><p>若 $S_{c_j}$ 不为空，则让 $pos_j$ 为 $S_{c_j}$ 中任意一个位置，然后将该位置移除 $S_{c_j}$ 即可。</p></li></ul></li><li><p>D. AB Graph</p><p>首先奇数长度一定有解，在两个点之间来回跑就可以了。</p><p>考虑偶数长度，如果存在连接两个点的一组边类型相同，那么就一直在这两个点之间来回跑就可以了。</p><p> 剩余的情况就是每一组边都是一条 $A$ 一条 $B$ ，那么对于 $n\ge 3$ 时很容易证明：</p><p><strong>存在一个点 $x$ ，满足存在另两个点 $y,z$ ，边 $x\to y$ 和 $x\to z$ 的类型不同。</strong> </p>  <div class="note note-success">            <p>反证法：假设对于任意的点，所有的出边类型相同，入边类型相同，且两种边类型不同。</p><p>不妨设点 $x$ 的所有出边类型均为 $A$ ，也就是说对于其他任意的点的入边类型均为 $A$ （由假设性质）</p><p>那么对于任意另外两个点 $y,z$ 之间的边的类型，存在矛盾：</p><p>$z$ 的入边由上知类型为 $A$ ，则 $y\to z$ 是 $z$ 的入边，类型必须为 $A$。</p><p>$y$ 的出边与入边类型相反，则 $y\to z$ 是 $y$ 的出边，类型必须为 $B$ 。</p>          </div><p>因此只需要 $\text O(n)$ 枚举 $x$ ，$\text O(n)$ 扫描其他点，判断是否存在 $y,z$ 即可。</p><p>对于 $m = 4k$ 的情况，构造解形如 $x\ y\ x\ y\cdots x\ y\ x\ z\ x\ \cdots z\ x\ z\ x$ 即可。</p><p>对于 $m = 4k+2$ 的情况，构造解形如 $y\ x\ y\ x\ y\cdots x\ y\ x\ z\ x\ \cdots z\ x\ z\ x\ z$ 即可。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Contests </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Facing the Unknown</title>
      <link href="2021/12/29/face-the-unknown/"/>
      <url>2021/12/29/face-the-unknown/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>本学期选了《影视音乐鉴赏》这门课，期末要求写一篇课程论文赏析一部影片中的影视音乐。很早就想看《海上钢琴师》，而且想想这部片子里的音乐应该少不了，就趁机看掉了。不得不说顶着期末季的压力，真的很容易被感动到。</p><p>片子真的很棒，剧情节奏虽然很缓慢，但自己却能很真实的感受到人物内心丰富的世界。可圈可点的地方太多了，只能说：妙不可言，建议自己去看一遍。<del>（这篇随笔容量太小，我对影片有很多绝妙的点评，但是写不下）</del></p><p>想动笔写这篇随笔的起源是，看完电影和 Eva 同学讨论，聊的很久的主题是面对未知的选择。</p><h2 id="面对未知"><a href="#面对未知" class="headerlink" title="面对未知"></a>面对未知</h2><p>人们对未知的恐惧，往往来自于失去了对已知的掌控感，或许也是“未知”这个词本身的含义。</p><p>作为一个学生，从小受到的教育往往是圈好范围、划好边界的，即使是探究性问题，也往往会有标准答案。在需要接触陌生的学科，涉足陌生的领域时，自己往往会像1900一样选择不去尝试。说的难听一点，原因其实是害怕自己失去对于”已知“内容的掌控感。想象自己在面对过于开放性的问题时，手足无措的感觉确实让人望而却步。</p><p>这就要回到电影里的核心话题：为什么1900 没有选择上岸？</p><blockquote><p>Take a piano. The keys begin, the keys end.</p><p>You know there are 88 of them, and nobody can tell you any different. </p><p><strong>They are not infinite. You are infinite.</strong></p><p><strong>And on those keys the music that you can make is infinite.</strong> That I can live by. </p><p>But you get me up on that gangway and you roll out in front of me a keyboard of millions of keys, millions and billions of keys that never end, and <strong>that’s the truth. That keyboard is infinite.</strong> </p><p>And if that keyboard is infinite, then on it there’s no music you can play.</p><p>You are sitting on the wrong bench! <strong>That’s God’s piano.</strong></p><p>钢琴的琴键固定是88个，只有创作出的音乐才是无穷的，这是我赖以为生的方式。</p><p>但陆地的生活是一个巨大的琴键，琴键本身就是是无穷的，而人无法在无穷的琴键上创作音乐。这是属于上帝的键盘。</p></blockquote><p>这段 1900 的独白确实很打动人心。他从小生活的地方和他的日常生活都很干净纯粹，他对于一切都尽在掌握，乐在其中。而面对无穷的陆地生活，1900害怕了。害怕的是无穷的选择，害怕自己迷失在没有边界的生活中。因为害怕，他拒绝了开始。</p><blockquote><p><strong>All the world weighing down on you without even knowing when it ends.</strong></p></blockquote><p>不得不说自己仿佛也经历过这个过程，不过是在面对要学习知识这个相对较小的问题上。在发现知识真的是“学不完”的时候，那种恐惧的感觉确实像是整个世界压在了身上。我算是还没感受到对未知的恐惧时，就迈出去了。等发现对“未知”的恐惧时，也已经在路上走的有一段距离了，因此更想谈谈的是改变。</p><p>抛开 1900 的局限性（接触的世界有限、接触到的人往往都有着世俗的价值观），对于他阐述的理由，我想问的是：<strong>在面对未知时，是否能放下“掌控欲”，能够接受世界的无穷而去勇敢的迈出去呢？</strong></p><p>我觉得往往在结果无关紧要的时候都是可以接受的。但真的面对在心中很重要的事情时，往往会选择保守。</p><p>是竞赛给我带来了转折，逼着我经历了<strong>从对未知的恐惧，到一半情况下还算平和</strong> 的变化。刚开始接触竞赛，是因为觉得各种算法里蕴含的思想十分精妙有趣。但随着深入的学习，自己越来越感受到了那种面对无穷知识的恐惧感。作为传统的学生，失去了那种对于知识的掌控感后，我一度也很丧失信心。经常因为在上考场前已经确信知道有自己不会的东西，反而导致了比赛的时候畏首畏尾，不敢探索。竞赛逼着我接受现实：<strong>你永远学不完你要考的，要么放弃，要么没有回避的余地。</strong></p><p>一点点把我磨到现在，也算是坚持下来了。现在的状态往往是这样子的：心情好感兴趣的时候可以一直深入，一通 Google 到一堆自己不会的东西，感受下知识的无边。不高兴的时候就把目光收回来，看看自己已经会的东西，敝帚自珍也还是挺开心的。至少现在能够接受自己在上考场时、面对挑战时，<strong>即使没有十足的把握，也不至于胆战心惊，把自己会的东西做好就好了。就算手里的牌再烂，也能调整好心情不至于破罐子破摔。</strong>（当然也因此养成了坏习惯，面对考试有的时候就摆烂了，最近考试周也因为这个原因几度惹 Eva 同学生气）</p><p>说玄学些，自己的信心其实更多的改为建立在<strong>对自己能力的信任</strong>上了。画大饼就是：我可以不会，但是我相信我可以学会。这种信心的两面性在我的生活中体现就很充分：在面对问题时往往会带来一份坦然，不会因为什么临时的测试过于紧张。但是这也很容易养成不好的性格，就是经常画饼充饥自我安慰，重度拖延症患者。</p><p>说回学习，每个学科的东西也本身是无边无际的，只是人为的考纲给画了个圈而已。科研，与其说是发现新事物，不如说是探索现在人类看不到的、没有理解或意识到的“未知”，变为“已知”而已。胡适先生说的好啊，怕什么真理无穷，进一寸有一寸的欢喜。知道自己在做什么就好。</p><p>世界确实是上帝的键盘，但也没必要完全参透演奏的方法才敢生活。</p><p>就像学习弹琴的人一样，没有谁是把练习曲练得熟熟的才开始碰正式的乐曲。</p><p>想想那些刚开始接触钢琴的小孩子，有几个不是上来就一通乱弹，也很开心的呢？</p><p>（哪怕是现在我和 Eva 同学也往往会从一通乱弹中获取很多乐趣</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>写到最后发现自己理说的越来越歪，站不住脚，前后互搏，想到哪里就写到哪里了。</p><p>感慨的核心大概还是挺惋惜 1900 没有下船的。以及对自己现在面对问题的态度还算接受？</p><p>顶着数片课程论文没写，过来写这个的我也是挺离谱的。希望自己改一改拖的毛病，活过期末。</p><p>不合时宜的借用 wls 的一句话：<strong>可以是一个理想主义者，但不能用理想主义的方式做事对吧</strong></p><p><img src="/img/piano.png"></p><hr><p>以及最后的小彩蛋：</p> <center><img src="/img/yes.png" style="zoom:50%;"/></center>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>The 46th ICPC Asia Shenyang Regional</title>
      <link href="2021/11/22/icpc46-shenyang/"/>
      <url>2021/11/22/icpc46-shenyang/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><blockquote><p>热身赛的ABC都是去年沈阳的三道签到题，D 题是计算几何 HDU 6697。</p><blockquote><p><strong>Closest Pair of Segments</strong>  &nbsp;  Author：Yaohui Zeng</p><p>二分答案之后考虑将线段扩张成 “香肠”，检查是否有一对“香肠”相交。</p><p>考虑对 $x$ 扫描线，用 <code>set</code> 维护这些香肠关于 $y$ 的顺序，那么总是只需要检查相邻的两个香肠是否相交。亦即，对于一个插入事件，检查新的香肠是否和上下相邻的两个香肠相交，对于一个删除事件，删除香肠之后检查上下两个相邻的香肠是否相交。如果判定到相交说明答案偏大，否则答案偏小。</p><p>由于在判定到相交之前的扫描过程中，香肠都是互不相交的凸图形，可以简单地用一条连接香肠最左点和最右点的线段来描述香肠在扫描线上的相对顺序，判定香肠相交直接计算扩张前的两个线段的距离即可。</p><p>复杂度是 $O(n\log n\log (1/\epsilon))$ 。</p></blockquote><p>正赛开场签 BEFJ 比较顺利，F 卡了一会 <code>char</code> 和 <code>string</code> 不能直接 <code>+</code> ，后来改字符数组了。</p><p>之后两个半小时没过题，H 假做法 + 假代码卡了两个多小时过了。</p><p>然后 I 简单分讨了一下，不想调破罐子破摔就直接过了，这个时候刚封榜。</p><p>最后 1h 队友搞 L，最后 5 min 成功冲出来了！非常激动！</p></blockquote><p>虽然又是遗憾银首，但这次参赛体验还是很棒的，收获很多。</p><p>首先是虽然中期血崩，但是还是顶住了，在最后一个多小时补救了三题。赛后看看觉得题目并不难，重点还是赛中要有信心，I 题这种题其实有信心的话很早就可以冲出来了。</p><p>然后就是相信队友，在最后一个小时还是担心过一段时间的，甚至有点想抢机位写 G 。好在综合过题数考虑后，最后一个小时决定让队友集中精力，搞出来了 L。此外负责乱搞和思路题的队友这场也相当给力，J  题上机之后很快就过了，没有像往常一样调试很久，I 题的推式子也是他提供的方向。整场比赛中真实的感受到整个队都有在努力，很满足。</p><h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><a class="btn" href="/material/ICPC/46-Shenyang/Warmup.pdf"  title="PDF" target="_blank">热身赛题面.pdf</a> &nbsp;  <a class="btn" href="/material/ICPC/46-Shenyang/Problemset.pdf"  title="PDF" target="_blank">正式赛题面.pdf</a>  &nbsp; <a class="btn" href="/material/ICPC/46-Shenyang/sol.pptx"  title="PPT" target="_blank">官方题解.pptx</a>  <h2 id="B-Bitwise-Exclusive-OR-Sequence"><a href="#B-Bitwise-Exclusive-OR-Sequence" class="headerlink" title="B. Bitwise Exclusive-OR Sequence"></a>B. Bitwise Exclusive-OR Sequence</h2><div class="note note-warning">            <p>构造 $n$ 个数 $a_1,\dots,a_n$，满足 $m$ 个约束条件，形如 $a_{p_i}\oplus a_{q_i} = w_i$ ，且 $\sum a_i$ 最小。 </p>          </div><p>按位考虑，那么按照每一位都可以建出来一张图，边权为 $0/1$ 表示两个数<strong>在这一位相同/不同</strong> 。</p><p>图存在矛盾的边则无解，有解时可以将每一个连通分图的点划分为两组，让个数少的那一组这一位取 $1$ 即可最小化。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><span class="hljs-keyword">int</span> a, b, w;&#125; c[N];<br><br>ll ans = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">int</span> tot, cnt[<span class="hljs-number">2</span>], hd[N], col[N];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span><span class="hljs-keyword">int</span> to, nxt, w;&#125;e[N &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span> </span>&#123;<br>    e[++tot].to = u; e[tot].w = w;<br>    e[tot].nxt = hd[v]; hd[v] = tot;<br>    e[++tot].to = v; e[tot].w = w;<br>    e[tot].nxt = hd[u]; hd[u] = tot;<br>&#125;<br><br><span class="hljs-keyword">bool</span> fl = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    ++cnt[col[u]];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = hd[u], v; i; i = e[i].nxt) &#123;<br>        v = e[i].to;<br>        <span class="hljs-keyword">if</span> (col[v] != <span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (col[v] != (col[u] ^ e[i].w)) &#123;fl = <span class="hljs-number">1</span>; <span class="hljs-keyword">return</span>;&#125;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        col[v] = (col[u] ^ e[i].w);<br>        dfs(v); <span class="hljs-keyword">if</span>(fl) <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">work</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) hd[i] = <span class="hljs-number">0</span>, col[i] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        add(c[i].a, c[i].b, ((c[i].w &amp; (<span class="hljs-number">1</span> &lt;&lt; p)) &gt; <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span> (col[i] == <span class="hljs-number">-1</span>) &#123;<br>            cnt[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; cnt[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>            col[i] = <span class="hljs-number">0</span>; dfs(i);<br>            <span class="hljs-keyword">if</span> (fl) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            ans += <span class="hljs-number">1l</span>l * (<span class="hljs-number">1</span> &lt;&lt; p) * min(cnt[<span class="hljs-number">0</span>], cnt[<span class="hljs-number">1</span>]);<br>        &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = rd(); m = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        c[i].a = rd(); c[i].b = rd(); c[i].w = rd();<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; --i) <br>        <span class="hljs-keyword">if</span> (work(i)) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="E-Edward-Gaming-the-Champion"><a href="#E-Edward-Gaming-the-Champion" class="headerlink" title="E. Edward Gaming, the Champion"></a>E. Edward Gaming, the Champion</h2><div class="note note-warning">            <p>给定一个串，数串里有多少个 <code>edgnb</code></p>          </div><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> ans;<br><span class="hljs-keyword">char</span> s[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; s[i]; ++i)<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strncmp</span>(s + i, <span class="hljs-string">&quot;edgnb&quot;</span>, <span class="hljs-number">5</span>)) ++ans;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="F-Encoded-Strings-I"><a href="#F-Encoded-Strings-I" class="headerlink" title="F. Encoded Strings I"></a>F. Encoded Strings I</h2><div class="note note-warning">            <p>设从后往前看，字符 $c$ 第一次出现之前出现过 $k$  个不同的字母，则映射 <code>f(c)=&#39;a&#39;+k</code></p><p>定义一个串 $s$ 的 Encoded String $s’$ ：对 $\forall i\le |s|, s’[i] = f(s[i])$ </p><p>求给定串所有前缀对应的 Encoded String 中，字典序最大的那个。</p>          </div><p>暴力求，然后按字典序排序。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1007</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-keyword">char</span> S[N];<br><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>&gt; f;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> len;<br>    <span class="hljs-keyword">char</span> a[N];<br>&#125;s[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node a, node b)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> tot = min(a.len, b.len);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= tot; ++i)<br>        <span class="hljs-keyword">if</span> (a.a[i] != b.a[i]) <span class="hljs-keyword">return</span> a.a[i] &lt; b.a[i];<br>    <span class="hljs-keyword">return</span> a.len &lt; b.len;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>; f.clear();<br>    s[p].len = p;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = p; i; --i) &#123;<br>        <span class="hljs-keyword">if</span> (!f[S[i]]) f[S[i]] = ++cnt;<br>        s[p].a[i] =<span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">1</span> + f[S[i]];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, S + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) work(i);<br>    sort(s + <span class="hljs-number">1</span>, s + <span class="hljs-number">1</span> + n, cmp);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= s[n].len; ++i) <span class="hljs-built_in">putchar</span>(s[n].a[i]);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="H-Line-Graph-Matching"><a href="#H-Line-Graph-Matching" class="headerlink" title="H. Line Graph Matching"></a>H. Line Graph Matching</h2><p>一个猜结论 + tarjan 题</p><h2 id="I-Linear-Fractional-Transformation"><a href="#I-Linear-Fractional-Transformation" class="headerlink" title="I. Linear Fractional Transformation"></a>I. Linear Fractional Transformation</h2><div class="note note-warning">            <p>定义复数函数 $f(z)=\frac{az+b}{cz+d}\ (a,b,c,d\in \mathbb{C},ad-bc\not=0)$，给定 $f(z_1)=w_1,f(z_2)=w_2,f(z_3)=w_3$ ，求 $f(z_0)$</p><p>数据保证 $z_1,z_2,z_3,w_1,w_2,w_3$ 两两不同</p>          </div><ol><li><p>若 $c=0$ ，则 $f(z)=kz+b$ ，直接用两个方程把 $k,b$ 求出后，判断第三个方程是否正确，然后代入即可。</p></li><li><p>若 $c\not = 0$ ，则 $zf(z)+k_3f(z)=k_1z+k_2$ ，手动消元一下得：<br>$$<br>k_3=\displaystyle\frac{(w_2z_2 - w_1z_1) - \displaystyle\frac{z_2-z_1}{z_3-z_1} * (w_3z_3 - w_1z_1)}{\displaystyle\frac{z_2-z_1}{z_3-z_1} * (w_3 - w_1) - (w_2 - w_1)}<br>$$</p></li></ol><p>比赛的时候本来想用自带的 <code>complex&lt;double&gt;</code> 类，但是发现 <code>real</code> 和 <code>imag</code> 不能直接赋值，就不会用了遂手写…</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200007</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">double</span> <span class="hljs-title">sqr</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span> </span>&#123;<br><span class="hljs-keyword">return</span> x * x;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cp</span> &#123;</span><br><span class="hljs-keyword">double</span> a, b;<br><span class="hljs-keyword">inline</span> cp <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> cp &amp;obj) <span class="hljs-keyword">const</span>&#123;<br><span class="hljs-keyword">return</span> (cp)&#123;a + obj.a, b + obj.b&#125;;<br>&#125;<br><span class="hljs-keyword">inline</span> cp <span class="hljs-keyword">operator</span> - (<span class="hljs-keyword">const</span> cp &amp;obj) <span class="hljs-keyword">const</span>&#123;<br><span class="hljs-keyword">return</span> (cp)&#123;a - obj.a, b - obj.b&#125;;<br>&#125;<br><span class="hljs-keyword">inline</span> cp <span class="hljs-keyword">operator</span> * (<span class="hljs-keyword">const</span> cp &amp;obj) <span class="hljs-keyword">const</span>&#123;<br><span class="hljs-keyword">return</span> (cp)&#123;a * obj.a - b * obj.b, a * obj.b + b * obj.a&#125;;<br>&#125;<br><span class="hljs-keyword">inline</span> cp <span class="hljs-keyword">operator</span> / (<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> x) <span class="hljs-keyword">const</span> &#123;<br><span class="hljs-keyword">return</span> (cp)&#123;a / x, b / x&#125;;<br>&#125;<br><span class="hljs-keyword">inline</span> cp <span class="hljs-keyword">operator</span> / (<span class="hljs-keyword">const</span> cp &amp;obj) <span class="hljs-keyword">const</span>&#123;<br><span class="hljs-keyword">return</span> (cp)&#123;a * obj.a + b * obj.b, b * obj.a - a * obj.b&#125; / (sqr(obj.a) + sqr(obj.b));<br>&#125;<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> == (<span class="hljs-keyword">const</span> cp &amp;obj) <span class="hljs-keyword">const</span>&#123;<br><span class="hljs-keyword">return</span> (<span class="hljs-built_in">fabs</span>(a - obj.a) &lt;= <span class="hljs-number">1e-6</span> &amp;&amp; <span class="hljs-built_in">fabs</span>(b - obj.b) &lt;= <span class="hljs-number">1e-6</span>);<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>cp z0, z1, z2, z3, w1, w2, w3;<br>z1.a = rd(); z1.b = rd(); w1.a = rd(); w1.b = rd();<br>z2.a = rd(); z2.b = rd(); w2.a = rd(); w2.b = rd();<br>z3.a = rd(); z3.b = rd(); w3.a = rd(); w3.b = rd();<br>z0.a = rd(); z0.b = rd();<br><br>cp k = (w2 - w1) / (z2 - z1);<br>cp b = w1 - k * z1;<br><span class="hljs-keyword">if</span> (w3 == k * z3 + b) &#123;<br>cp res = k * z0 + b;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10lf %.10lf\n&quot;</span>, res.a, res.b);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>cp g1, g2, g3;<br>g1 = z1 * w1; g2 = z2 * w2; g3 = z3 * w3;<br>cp kk = (z2 - z1) / (z3 - z1);<br>cp k3 = ((g2 - g1) - kk * (g3 - g1)) / (kk * (w3 - w1) - (w2 - w1));<br>cp k1 = ((g2 - g1) + k3 * (w2 - w1)) / (z2 - z1);<br>cp k2 = z1 * w1 + k3 * w1 - k1 * z1;<br>cp res = (k1 * z0 + k2) / (z0 + k3);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10lf %.10lf\n&quot;</span>, res.a, res.b);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><p>题解提供的做法比较神仙，先抄上：分式线性变换保交换比，有：<br>$$<br>\frac{w_0-w_1}{w_0-w_2}\bigg/\frac{w_3-w_1}{w_3-w_2}=\frac{z_0-z_1}{z_0-z_2}\bigg/\frac{z_3-z_1}{z_3-z_2}<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">complex</span>&lt;<span class="hljs-keyword">double</span>&gt; C;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> C <span class="hljs-title">rdc</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = rd(), y = rd();<br>    <span class="hljs-keyword">return</span> C(x, y);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    C z1 = rdc(), w1 = rdc(), z2 = rdc(), w2 = rdc(), z3 = rdc(), w3 = rdc(), z0 = rdc();<br>    C res = ((z0 - z1) / (z0 - z2)) / ((z3 - z1) / (z3 - z2)) * ((w3 - w1) / (w3 - w2));<br>    res = w2 + (w2 - w1) / (res - C(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.12lf %.12lf\n&quot;</span>, res.real(), res.imag());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="J-Luggage-Lock"><a href="#J-Luggage-Lock" class="headerlink" title="J. Luggage Lock"></a>J. Luggage Lock</h2><p>队友强强切掉了～回头再来看</p><h2 id="L-Perfect-Matchings"><a href="#L-Perfect-Matchings" class="headerlink" title="L. Perfect Matchings"></a>L. Perfect Matchings</h2><p>队友强强切掉了～回头再来看</p>]]></content>
      
      
      <categories>
          
          <category> Competitions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>The 7th CCPC Guilin Regional</title>
      <link href="2021/11/11/ccpc7-guilin/"/>
      <url>2021/11/11/ccpc7-guilin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><blockquote><p>热身赛是澳门的三道题，B 题卡常带 $8$ 倍常数卡过去了， C 没有做出来。</p><p>正赛开场我们比较顺利，AGI过的很快，D猜了一次结论WA了，很快找出了反例。</p><p>之后猜到了E的结论，spfa 被卡了两发，改 dijkstra 之后过了，大概耗了一个小时。</p><p>之后 D 想出来了能通过写出所有反例的方法，WA了一发，发现是数组开小了，过了。</p><p>之后开了BFJK，因为 J 最先想到了一种做法，选择了先写 J ，复杂度有点高卡不过去。</p><p>还剩下一个半小时，觉得 B 的线段树比较有把握，写 + 调 + 对拍花了一个小时，过了。</p><p>最后半个小时感觉写 F 不是很有信心，于是调 JK，都是 TLE/MLE 左右横跳，卡到最后。</p></blockquote><p>这次参赛体验还是不错的，我也没有像往常一样挂机，输出还可以。</p><p>赛程后一半机位交给了两个大数据结构 + 一个乱搞，我也无能为力，对于结果只能说菜是原罪了。</p><p>比较遗憾的是 F 很轻松地看出了正解，但是因为没写过不敢上机，希望之后的比赛能敢冲计算几何吧。</p><h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><a class="btn" href="/material/CCPC/7-guilin/Warmup.pdf"  title="PDF" target="_blank">热身赛题面.pdf</a> &nbsp;  <a class="btn" href="/material/CCPC/7-guilin/Problemset.pdf"  title="PDF" target="_blank">正式赛题面.pdf</a>  &nbsp; <a class="btn" href="/material/CCPC/7-guilin/Tutorial.pdf"  title="PDF" target="_blank">官方题解.pdf</a>  &nbsp; <a class="btn" href="https://www.luogu.com.cn/paste/1jm02k28"  title="云剪贴板 - 洛谷" target="_blank">F 题 Heltion 参考代码</a> <h2 id="A-A-Hero-Named-Magnus"><a href="#A-A-Hero-Named-Magnus" class="headerlink" title="A. A Hero Named Magnus"></a>A. A Hero Named Magnus</h2><div class="note note-warning">            <p>从第 $x$ 轮之后就会一直胜，此前胜率 $50\%$ ，问至少比几轮保证能一定胜利（获胜轮数多者胜）</p>          </div><p>前面全输，答案是 $2x-1$ ，开 <code>long long</code> 或者 python.</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, rd() * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="B-A-Plus-B-Problem"><a href="#B-A-Plus-B-Problem" class="headerlink" title="B. A Plus B Problem"></a>B. A Plus B Problem</h2><div class="note note-warning">            <p>维护一个 $n \ (n\le 10^6)$  位数加法器，包含三个 $n$ 位数 $A+B=C$ （忽略最高位进位）。</p><p>每次修改 $A$ 或 $B$ 中的一位，求修改后 $C$ 这一位的结果，以及加法器中有多少位受影响。</p>          </div><p>线段树是可以直接模拟的，支持查询前缀 $0$ 长度，前缀 $9$ 长度，区间赋值 $0$ ，区间赋值 $9$ 即可。</p><p>比较妙的做法：$C_i=(A_i+B_i+[A_j+B_j\ge 10])\ \text{mod}\ 10$ ，$j$ 为 $i$ 后面第一个 $A_i+B_i\not= 9$ 的位置。</p><p>进位/退位影响的话，也是影响前缀 $A_j+B_j=9$ 的一段，因此需要查询 $i$ 前面第一个 $A_i+B_i\not= 9$ 的位置。</p><p>综上，<code>set</code> 维护 $A_i+B_i\not= 9$ 的位置 $i$ 即可，复杂度 $O((n+q)\log n)$ .</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000007</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rdc</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) c = getchar();<br>    <span class="hljs-keyword">return</span> c - <span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">3</span>][N];<br><span class="hljs-comment">//a[0] = c, a[1] = a, a[2] = b</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> r = rd(), c = rd(), x = rd();<br>    <span class="hljs-keyword">int</span> pos = *s.upper_bound(c);<br>    <span class="hljs-keyword">int</span> old = a[<span class="hljs-number">0</span>][c] + (a[<span class="hljs-number">0</span>][pos] &gt;= <span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">if</span> (a[r][c] == x) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d 0\n&quot;</span>, old % <span class="hljs-number">10</span>);<span class="hljs-keyword">return</span>;&#125;<br><br>    <span class="hljs-keyword">if</span> (a[<span class="hljs-number">0</span>][c] != <span class="hljs-number">9</span>) s.erase(c); <br>    a[r][c] = x; a[<span class="hljs-number">0</span>][c] = a[<span class="hljs-number">1</span>][c] + a[<span class="hljs-number">2</span>][c];<br>    <span class="hljs-keyword">if</span> (a[<span class="hljs-number">0</span>][c] != <span class="hljs-number">9</span>) s.insert(c);<br><br>    <span class="hljs-keyword">int</span> nw = a[<span class="hljs-number">0</span>][c] + (a[<span class="hljs-number">0</span>][pos] &gt;= <span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> ((old &gt;= <span class="hljs-number">10</span>) ^ (nw &gt;= <span class="hljs-number">10</span>)) &#123;<br>        <span class="hljs-keyword">int</span> pre = *(--s.lower_bound(c));<br>        ans = c - pre + <span class="hljs-number">1</span> + (pre != <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, nw % <span class="hljs-number">10</span>, ans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), q = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[<span class="hljs-number">1</span>][i] = rdc();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        a[<span class="hljs-number">2</span>][i] = rdc(); <br>        a[<span class="hljs-number">0</span>][i] = a[<span class="hljs-number">1</span>][i] + a[<span class="hljs-number">2</span>][i];<br>        <span class="hljs-keyword">if</span> (a[<span class="hljs-number">0</span>][i] != <span class="hljs-number">9</span>) s.insert(i);<br>    &#125;<br>    s.insert(<span class="hljs-number">0</span>); s.insert(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; ++i) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="D-Assumption-is-All-You-Need"><a href="#D-Assumption-is-All-You-Need" class="headerlink" title="D. Assumption is All You Need"></a>D. Assumption is All You Need</h2><h2 id="E-Buy-and-Delete"><a href="#E-Buy-and-Delete" class="headerlink" title="E. Buy and Delete"></a>E. Buy and Delete</h2><div class="note note-warning">            <p>给一个有向图，每条边有一个价值 $w_i$ ，你可以选总价值不超过 $c$ 的边<strong>保留</strong>，其余边删除。</p><p>一组边可以被删除，当且仅当这组边不包含一个有向环。</p><p>另一个人采取最优策略删除所得图的边（最少次数），问你最多能让他操作几次。</p>          </div><p>一条边都买不起的时候答案是 <code>0</code> ;</p><p>买得起一条边但买不起一个环的时候答案是 <code>1</code> ;</p><p>买得起环的时候，可以发现所有边可以分成无环的两组：$u&gt;v$ 和 $u&lt;v$ ，因此答案最大为 <code>2</code> .</p><p>因此只需要找出最小环，使用 dijkstra 枚举起点 $O(n(m+n)\log m)$ 即可。</p><div class="note note-danger">            <p><strong>spfa 已死！真的不要幻想在正赛继续用 spfa 了…</strong></p><p>$n=2000,m=5000$ 的时候竟然也能把 spfa 卡掉… </p><p><strong>「历史的经验教训告诉我们，人们不会从历史的经验中吸取教训。」</strong></p>          </div><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 2007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fr first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sc second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pii pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-keyword">int</span> tot, hd[N], mnw = <span class="hljs-number">1e9</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span><span class="hljs-keyword">int</span> w, to, nxt;&#125; e[N &lt;&lt; <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> u = rd();<br>    e[++tot].to = rd(); <br>    mnw = min(mnw, (e[tot].w = rd()));<br>    e[tot].nxt = hd[u]; hd[u] = tot;<br>&#125;<br><br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">1e9</span>, dis[N];<br><br><span class="hljs-built_in">priority_queue</span>&lt;pii&gt; q;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dij</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(dis));<br>    dis[s] = <span class="hljs-number">0</span>; q.push(mp(<span class="hljs-number">0</span>, s));<br>    <span class="hljs-keyword">while</span> (!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.top().sc; q.pop();<br>        <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">continue</span>; vis[u] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = hd[u], v; i; i = e[i].nxt)<br>            <span class="hljs-keyword">if</span> (dis[v = e[i].to] &gt; dis[u] + e[i].w) &#123;<br>                dis[v] = dis[u] + e[i].w;<br>                q.push(<span class="hljs-built_in">make_pair</span>(-dis[v], v));<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (v == s) ans = min(ans, dis[u] + e[i].w);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd(), c = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) add();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) dij(i);<br>    <span class="hljs-built_in">puts</span>( c &lt; mnw ? <span class="hljs-string">&quot;0&quot;</span> : (c &lt; ans ? <span class="hljs-string">&quot;1&quot;</span> : <span class="hljs-string">&quot;2&quot;</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="F-Illuminations-II"><a href="#F-Illuminations-II" class="headerlink" title="F. Illuminations II"></a>F. Illuminations II</h2><div class="note note-warning">            <p>给两个凸包，小凸包严格在大凸包内，现在在大凸包边界上等概率放一个点光源，问能照到小凸包周长的期望长度。</p>          </div><p>根据期望的线性，考虑小凸包每条边的贡献，有贡献的概率是：</p><p>（这条边所在直线切割大凸包周长所得的可以照射到这条边的长度）/（大凸包周长）</p><p>因此只需要求出直线和凸包的两个交点即可，按照时针顺序枚举小凸包的边，交点移动方向单调。</p><p>具体找交点的方法是将直线拆成两条射线，然后射线 $s\to t$ 和线段 $cd$ 判交，然后直线 $st$ 和直线 $cd$ 求交点即可。</p><p>实现的时候参考 Heltion 的代码学到很多！代码中有很妙的技巧，限于篇幅 <del>没时间写</del> 就先只贴一下我的代码</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000007</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vec</span> &#123;</span><br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> x, y;<br>    <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> <span class="hljs-title">norm2</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> x * x + y * y;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> <span class="hljs-title">norm</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(norm2());&#125;<br>    vec <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> vec &amp;obj) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> (vec)&#123;x + obj.x, y + obj.y&#125;;&#125;<br>    vec <span class="hljs-keyword">operator</span> - (<span class="hljs-keyword">const</span> vec &amp;obj) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> (vec)&#123;x - obj.x, y - obj.y&#125;;&#125;<br>    vec <span class="hljs-keyword">operator</span> * (<span class="hljs-keyword">const</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> &amp;t) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> (vec)&#123;x * t, y * t&#125;;&#125;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> <span class="hljs-keyword">operator</span> * (<span class="hljs-keyword">const</span> vec &amp;obj) <span class="hljs-keyword">const</span> &#123;<span class="hljs-keyword">return</span> x * obj.x + y * obj.y;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> <span class="hljs-title">cross</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> vec &amp;obj)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> x * obj.y - y * obj.x;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> <span class="hljs-title">dis</span><span class="hljs-params">(<span class="hljs-keyword">const</span> vec &amp;obj)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> ((*<span class="hljs-keyword">this</span>) - obj).norm();&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cross</span><span class="hljs-params">(<span class="hljs-keyword">const</span> vec &amp;s, <span class="hljs-keyword">const</span> vec &amp;t, <span class="hljs-keyword">const</span> vec &amp;c, <span class="hljs-keyword">const</span> vec &amp;d)</span> </span>&#123;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> w1 = (t - s).cross(c - s);<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> w2 = (t - s).cross(d - s);<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> w3 = (d - c).cross(s - c);<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> w4 = (d - c).cross(t - c);<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> w5 = (d - c).cross(t - s);<br>    <span class="hljs-keyword">if</span> (w1 * w2 &gt; <span class="hljs-number">0</span> || (w3 * w4 &gt; <span class="hljs-number">0</span> &amp;&amp; w3 * w5 &gt; <span class="hljs-number">0</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (w1 * w2 &lt; <span class="hljs-number">0</span> || w3 * w4 &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> v1 = (t - s) * (c - s);<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> v2 = (t - s) * (d - s);<br>    <span class="hljs-keyword">return</span> (v1 &gt;= <span class="hljs-number">0</span> || v2 &gt;= <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function">vec <span class="hljs-title">cross_point</span><span class="hljs-params">(<span class="hljs-keyword">const</span> vec &amp;a, <span class="hljs-keyword">const</span> vec &amp;b, <span class="hljs-keyword">const</span> vec &amp;c, <span class="hljs-keyword">const</span> vec &amp;d)</span> </span>&#123;<br>    vec d0 = b - a, d1 = d - c, u = c - a;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> t = u.cross(d1) / d0.cross(d1);<br>    <span class="hljs-keyword">return</span> a + d0 * t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd(), m = rd();<br>    vector&lt;vec&gt; p(n), q(m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; [x, y] : p) &#123;x = rd(); y = rd();&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; [x, y] : q) &#123;x = rd(); y = rd();&#125;<br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span>&gt; <span class="hljs-title">sum</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        sum[i] = (p[i] - p[(i + <span class="hljs-number">1</span>) % n]).norm();<br>        <span class="hljs-keyword">if</span> (i) sum[i] += sum[i - <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">int</span> f = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) &#123;<br>        <span class="hljs-keyword">const</span> vec &amp;A = q[i], &amp;B = q[(i + <span class="hljs-number">1</span>) % m];<br>        <span class="hljs-keyword">while</span> (!cross(B, A, p[f], p[(f + <span class="hljs-number">1</span>) % n])) f = (f + <span class="hljs-number">1</span>) % n;<br>        <span class="hljs-keyword">while</span> (!cross(A, B, p[t], p[(t + <span class="hljs-number">1</span>) % n])) t = (t + <span class="hljs-number">1</span>) % n;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> df = cross_point(B, A, p[f], p[(f + <span class="hljs-number">1</span>) % n]).dis(p[f]) + sum[(f - <span class="hljs-number">1</span> + n) % n];<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> dt = cross_point(A, B, p[t], p[(t + <span class="hljs-number">1</span>) % n]).dis(p[t]) + sum[(t - <span class="hljs-number">1</span> + n) % n];<br>        <span class="hljs-keyword">if</span> (dt &lt; df) dt += sum.back();<br>        ans += (A - B).norm() * (dt - df);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.15Lf\n&quot;</span>, ans / sum.back());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="G-Occupy-the-Cities"><a href="#G-Occupy-the-Cities" class="headerlink" title="G. Occupy the Cities"></a>G. Occupy the Cities</h2><div class="note note-warning">            <p>给一个 $01$ 序列，每秒每个 $1$ 可以选择将左侧<strong>或</strong>右侧的数变成 $1$ ，问最少多少秒全部变成 $1$ 。</p>          </div><p>可以发现连续 $1$ 的长度大于 $1$ 时，每秒向左向右都可以扩展 $1$ 个位置。</p><p>因此考虑二分答案 $x$ ，从左往右依次判断，对于长度大于 $1$ 的连续段直接计算左右扩展范围。</p><p>对于单个的 $1$ ，如果 $x-1$ 秒可以把前缀剩下的部分填完，就先向右扩展一个 ，否则先向左。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500007</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rdc</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) c = getchar();<br>    <span class="hljs-keyword">return</span> c - <span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">int</span> n, tot;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seg</span> &#123;</span><span class="hljs-keyword">int</span> l, r;&#125;c[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>    c[++tot].l = l; c[tot].r = r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">valid</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> nwr = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, dis; i &lt;= tot; ++i) &#123;<br>        dis = c[i].l - nwr - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (dis &gt; x) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        nwr = c[i].r + x;<br>        <span class="hljs-keyword">if</span> (c[i].r == c[i].l &amp;&amp; dis == x) --nwr; <br>    &#125;<br>    <span class="hljs-keyword">return</span> nwr &gt;= n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    n = rd(); tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> x = rdc();<br>        <span class="hljs-keyword">if</span> (x) &#123;<span class="hljs-keyword">if</span> (!l) l = i; r = i;&#125;<br>        <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">if</span> (l) add(l, r); l = <span class="hljs-number">0</span>; r = <span class="hljs-number">0</span>;&#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (l) add(l, r);<br>    <span class="hljs-keyword">if</span> (c[<span class="hljs-number">1</span>].l == <span class="hljs-number">1</span> &amp;&amp; c[<span class="hljs-number">1</span>].r == n) &#123;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>); <span class="hljs-keyword">return</span>;&#125;<br>    l = <span class="hljs-number">1</span>; r = n;<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        <span class="hljs-keyword">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        valid(mid) ? r = mid : l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, l);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>此外官方题解给出了两个 $O(n)$ 的写法。我尝试了一下 WA 了并且非常难调遂放弃了…</p></blockquote><h2 id="I-PTSD"><a href="#I-PTSD" class="headerlink" title="I. PTSD"></a>I. PTSD</h2><div class="note note-warning">            <p>$n$ 个数 $1,\cdots ,n$ ，第 $i$ 个数有权值 $a_i=0/1$ 。将所有数划分成若干组，答案为每组第二大 $i\times a_i$ 的和。</p>          </div><p>贪心的拿正确性比较显然，同情况下第二名可以是大的一定拿大的，可以多拿一定多拿。</p><p>因此方案就是<strong>尽可能</strong>两两一组，第二大的 $a_i=1$ ，第一大的 $a_i=0$ 。</p><p>因此维护一个 <code>cnt</code>，记录还有多少个比当前大的数字还没被分组。</p><p>从大往小考虑，只要 <code>cnt&gt;0</code> 并且 $a_i=1$ 就将 $i$ 累加进答案，<code>--cnt</code>，否则 <code>++cnt</code> 。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000007</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rdc</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) c = getchar();<br>    <span class="hljs-keyword">return</span> c - <span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">int</span> n, a[N], tot;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    n = rd(); tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[i] = rdc();<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i; --i) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] &amp;&amp; tot) &#123;ans += i; --tot;&#125;<br>        <span class="hljs-keyword">else</span> ++tot;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = rd(); t; --t) work();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="J-Suﬃx-Automaton"><a href="#J-Suﬃx-Automaton" class="headerlink" title="J. Suﬃx Automaton"></a>J. Suﬃx Automaton</h2><p>队友强强补掉了～ 有空再来看</p><h2 id="K-Tax"><a href="#K-Tax" class="headerlink" title="K. Tax"></a>K. Tax</h2><p>队友强强补掉了～ 有空再来看</p>]]></content>
      
      
      <categories>
          
          <category> Competitions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT  Autumn 2021</title>
      <link href="2021/09/11/pat2021/"/>
      <url>2021/09/11/pat2021/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>某天心血来潮拉上 Eva 同学一起报名了 PAT ～</p><p>开学前在 <a href="https://pintia.cn/problem-sets/994805148990160896/problems/type/7">官方题库</a> 里刷了两道题热身！<del>其实是想刷完但是太鸽了</del> </p><p>然后就到考试时间啦！<del>借着考试翘掉了半天的军训！好耶！</del></p><h2 id="Solution-Top-Level"><a href="#Solution-Top-Level" class="headerlink" title="Solution ( Top Level )"></a>Solution ( Top Level )</h2><p>代码写的赶时间，比较丑。</p><h3 id="A-Sorted-Cartesian-tree"><a href="#A-Sorted-Cartesian-tree" class="headerlink" title="A. Sorted Cartesian tree"></a>A. Sorted Cartesian tree</h3><div class="note note-warning">            <p>给定 $n$ 个 <code>pair&lt;priority, key&gt;</code> ，构建一棵 $n$ 个节点的二叉树，满足：</p><ul><li><p>节点  <code>priority</code> 关键字满足堆的性质，即 <code>priority</code> 父节点小于子节点</p></li><li><p>节点 <code>key</code> 关键字满足二叉搜索树的性质，即中序遍历 <code>key</code> 单调不降</p></li></ul><p>把树建出来，输出 <code>priority</code> 和 <code>key</code> 的 <code>Level-order traversal</code> 序列</p>          </div><p>模拟题意 <code>dfs</code> 建树，传一个 <code>set&lt;node&gt;</code> 即可。</p><p>求层序遍历一个 <code>bfs</code> 就够了 <del>考场上写了个dfn+dep双关键字排序</del></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 37</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125; <br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><span class="hljs-keyword">int</span> k, p, id;&#125; c[N];<br><br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> node &amp;a, <span class="hljs-keyword">const</span> node &amp;b) &#123;<br>    <span class="hljs-keyword">if</span> (a.p != b.p) <span class="hljs-keyword">return</span> a.p &lt; b.p;<br>    <span class="hljs-keyword">if</span> (a.k != b.k) <span class="hljs-keyword">return</span> a.k &lt; b.k;<br>    <span class="hljs-keyword">return</span> a.id &lt; b.id;<br>&#125;<br><br><span class="hljs-keyword">int</span> ls[N], rs[N], k[N], p[N];<br><br><span class="hljs-built_in">set</span>&lt;node&gt; S;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-built_in">set</span>&lt;node&gt; s)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (s.empty()) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    node nw = *s.begin();<br>    s.erase(nw);<br>    <span class="hljs-built_in">set</span>&lt;node&gt; l, r;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> t : s) &#123;<br>        <span class="hljs-keyword">if</span> (t.k &lt;= nw.k) l.insert(t);<br>        <span class="hljs-keyword">else</span> r.insert(t);<br>    &#125;<br>    ls[nw.id] = dfs(l);<br>    rs[nw.id] = dfs(r);<br>    <span class="hljs-keyword">return</span> nw.id;<br>&#125;<br><br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        c[i].id = i; c[i].k = rd(); c[i].p = rd();<br>        S.insert(c[i]);<br>    &#125;<br>    <span class="hljs-keyword">int</span> ptr = <span class="hljs-number">0</span>, rt = dfs(S);<br>    q.push(rt);<br>    <span class="hljs-keyword">while</span> (!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>        <span class="hljs-keyword">if</span> (ls[u]) q.push(ls[u]);<br>        <span class="hljs-keyword">if</span> (rs[u]) q.push(rs[u]);<br>        k[++ptr] = c[u].k;<br>        p[ptr] = c[u].p;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, k[i]); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, k[n]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p[i]); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, p[n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="B-Unity-is-Strength"><a href="#B-Unity-is-Strength" class="headerlink" title="B. Unity is Strength"></a>B. Unity is Strength</h3><div class="note note-warning">            <p>给一张有权无向图，以及若干条可以花 $w_i$ 连接 $u_i,v_i$ 的无向边。</p><p>先输出每个联通块的 “块内最小编号 - 块内最小边权” ，按照块大小-最小边权-最小点编号的顺序排序</p><p>然后计算把整个图联通的最小代价，除给定边外，任意两点之间都可以花 $10^4$ 的代价连接一条边。</p>          </div><p>并查集模拟题意即可，第一步求出来每个集合的若干信息，然后排序一下。</p><p>之后就是最小生成树，考虑给定边不一定能让整个图联通，最后答案加上（联通块数 $-1$ ）$\times 10^4$ 即可。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inf 1e9</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125; <br><br><span class="hljs-keyword">int</span> f[N], mn[N], mnid[N], sz[N], totr, totc;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">road</span> &#123;</span><br><span class="hljs-keyword">int</span> u, v, w;<br>&#125;r[N]; <br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">cmp2</span><span class="hljs-params">(road a, road b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a.w &lt; b.w;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">return</span> x == f[x] ? x : f[x] = find(f[x]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> w)</span> </span>&#123;<br>a = find(a); b = find(b);<br><span class="hljs-keyword">if</span> (a == b) &#123;<br>mn[a] = min(mn[a], w);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>f[a] = b; sz[b] += sz[a];<br>mnid[b] = min(mnid[b], mnid[a]);<br>mn[b] = min(mn[b], min(mn[a], w));<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br><span class="hljs-keyword">int</span> mnid, sz, str;<br>&#125;c[N]; <br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">cmp1</span><span class="hljs-params">(node a, node b)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (a.str != b.str) <span class="hljs-keyword">return</span> a.str &gt; b.str;<br><span class="hljs-keyword">if</span> (a.sz != b.sz) <span class="hljs-keyword">return</span> a.sz &gt; b.sz;<br><span class="hljs-keyword">return</span> a.mnid &lt; b.mnid;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-keyword">int</span> m = rd();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>f[i] = i; mn[i] = inf; mnid[i] = i; sz[i] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, u, v, w; i &lt;= m; ++i) &#123;<br>u = rd(); v = rd(); w = rd();<br><span class="hljs-keyword">if</span> (w &gt; <span class="hljs-number">0</span>) merge(u, v, w);<br><span class="hljs-keyword">else</span> r[++totr] = (road)&#123;u, v, -w&#125;; <br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br><span class="hljs-keyword">if</span> (f[i] == i) c[++totc] = (node)&#123;mnid[i], sz[i], (mn[i] == inf ? <span class="hljs-number">0</span> : mn[i])&#125;;<br>sort(c + <span class="hljs-number">1</span>, c + <span class="hljs-number">1</span> + totc, cmp1);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; totc; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d-%d &quot;</span>, c[i].mnid, c[i].str);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d-%d\n&quot;</span>, c[totc].mnid, c[totc].str);<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>sort(r + <span class="hljs-number">1</span>, r + <span class="hljs-number">1</span> + totr, cmp2);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= totr; ++i) &#123;<br><span class="hljs-keyword">int</span> u = find(r[i].u);<br><span class="hljs-keyword">int</span> v = find(r[i].v);<br><span class="hljs-keyword">if</span> (u != v) &#123;merge(u, v, r[i].w); ans += r[i].w;&#125; <br>&#125;<br><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <br>cnt += (f[i] == i);<br>ans += (cnt - <span class="hljs-number">1</span>) * <span class="hljs-number">10000</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="C-Manhattan"><a href="#C-Manhattan" class="headerlink" title="C. Manhattan"></a>C. Manhattan</h3><div class="note note-warning">            <p>给定一个序列 ${ a_i }\ (1\le a_i\le 3)$，两个人玩（开始双方均为 $0$ 分），每次某个人取走最靠前的 $a_i$ 加到当前的得分里。</p><p>要求每个人拿完之后，<strong>当前的得分不得少于对方</strong>，问有多少种划分方案，答案 $\mod 10^ 9 + 7$ </p>          </div><p>裸的 DP 就是 <code>f[i][j]</code> 表示当前考虑前 $i$ 个数，第一个人比第二个人多 $j$ 的方案数。</p><p>因为 $a_i\le 3$ ，所以如果某个人比另一个人多了超过 $3$ 分，对手就无法满足要求，之后就只能是这个人拿了。</p><p>所以 <code>j</code> 可以把特殊的状态放到一起，范围就只有 $9$ 了，复杂度 $O (9n)$ ，转移要注意条件。</p><p>实现的时候整体偏移了 $5$ ，也就是 $j=5$ 时两个人得分一样。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 1000000007</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> c = getchar();<br><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125; <br><br><span class="hljs-keyword">int</span> f[N][<span class="hljs-number">10</span>];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> add(a,b) a = (a + b) % mod</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>f[<span class="hljs-number">0</span>][<span class="hljs-number">5</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> n = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x; i &lt;= n; ++i) &#123;<br>x = rd();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">9</span>; ++j) &#123;<br><span class="hljs-keyword">if</span> (j - x &lt;= <span class="hljs-number">1</span>) add(f[i][<span class="hljs-number">1</span>], f[i - <span class="hljs-number">1</span>][j]);<br><span class="hljs-keyword">if</span> (j + x &gt;= <span class="hljs-number">9</span>) add(f[i][<span class="hljs-number">9</span>], f[i - <span class="hljs-number">1</span>][j]);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>; j &lt;= <span class="hljs-number">8</span>; ++j) &#123;<br><span class="hljs-keyword">if</span> (j - x &gt; <span class="hljs-number">1</span> &amp;&amp; j - x &lt;= <span class="hljs-number">5</span>) add(f[i][j - x], f[i - <span class="hljs-number">1</span>][j]);<br><span class="hljs-keyword">if</span> (j + x &lt; <span class="hljs-number">9</span> &amp;&amp; j + x &gt;= <span class="hljs-number">5</span>) add(f[i][j + x], f[i - <span class="hljs-number">1</span>][j]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; ++i) add(ans, f[n][i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>比赛之前比较焦虑（毕竟军训一周都没碰键盘），到考场发现左边坐的是学长。</p><p>开场把三个题都开了， 题目描述都十分迷惑（英语太差），结合样例枚举题意读题。</p><blockquote><p>分不清：Preorder 先序；Inorder 中序；Postorder 后序；Level-order traversal 层序遍历</p></blockquote><p>过题顺序 T2 - T1 - T3 ，看榜应该是 Rank 2，所有题都是一次过非常舒适。</p><p>然后就提前跑路了！因为 Eva 同学还在奋战，我就开始快乐的浙传半日游～</p><p>浙传的校园就比较有感觉，总觉得杭电的楼都是一个样子的，缺点大学的气息…</p><p><img src="/img/cuz/cuz1.JPG"></p><p><img src="/img/cuz/cuz2.JPG"></p><p><img src="/img/cuz/cuz3.JPG"></p><p><img src="/img/cuz/cuz4.JPG" alt="井盖上超级可爱的小王子和狐狸～"></p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> Union-Find Set </tag>
            
            <tag> Counting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Love is the Greatest</title>
      <link href="2021/07/08/freshman/"/>
      <url>2021/07/08/freshman/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天是 2021 年 7 月 8 日，星期四。</p><p>一年前的今天，高考最后一门刚刚考完。走出考场，回到自己的教室，拿手机，搬行李，告别。</p><p>离开学校的时候，碰到了还在梳理交通的竞赛教练，问我考的怎么样，然后约了后天要给高一的学弟们上课。</p><p>直到昨晚，暑假回本部给又一届的学弟们上完最后一天课。从二中本部的校门里走出来，回头看看。</p><h2 id="来杭电之前"><a href="#来杭电之前" class="headerlink" title="来杭电之前"></a>来杭电之前</h2><p>高考完就跟爸爸妈妈说我<strong>不复读</strong>，当晚就对答案，大概 645。报了南科大综评，拿到了还算不错的校考分。</p><p>然后在南校区给高一的同学讲了比较入门的概率，也是那些在一年前的暑假认识的，刚踏入二中大门学弟。</p><p>结束的时候在空空的学校里溜达，想想他们上课时候那种纯粹的热情，一代又一代，多少有一点感慨。</p><p>走之前拍了张照片，想起来一句自认为很应景的话：“<strong>雨过天青云破处，者般颜色做将来</strong>”</p><p><img src="/img/EZS.png" alt="连着下了两三天的小雨，只剩下竞赛生的二中"></p><p>出分的晚上比较坦然，提前几分钟查到了分数，比估计的低 9 分，都扣在语文上，115 / 134 / 136 / 251。</p><p>之后的几天比较迷茫，听了几个学校的招生宣讲都不尽如人意。南科大那边几度有希望，后来终究是落空。</p><hr><p>在我想起来杭电这所学校的时候，突然感觉就是要去这里了。</p><p>可能是高二去学军培训喜欢上了杭州这个城市，也可能是对竞赛生涯结束的不甘吧。</p><p>先自己偷偷找 Claris 要到了教练的联系方式，问了读研和专业的事情，刘老师的热情的杭州话让人很舒服。</p><p>然后就是小心翼翼地和父母交流，说我自己的想法和考虑，直到最后心里十分踏实地填上了第一志愿。</p><p>录取的结果是数学系，高考分数达到了卓越学院二次选拔的报名分数线，报了卓越学院的招生考试。</p><p>之后的假期写了几个板子，打了几场 CF 恢复一点水平，参加了 HDU 的几场内部训练，搬了一套题恰烂钱。</p><p>开学之前和岳老师吃了个饭（竟然还赶上了他生日）， 让我重心不要全部放到竞赛上，要给自己留个后路。</p><h2 id="初到杭电"><a href="#初到杭电" class="headerlink" title="初到杭电"></a>初到杭电</h2><p>有一说一假期还是过的比较随意，虽然报名了卓越学院，但是一点没准备，9 月份忐忑地就来到杭电啦。</p><p>考试之前自己很没有底气，当时觉得能进计科班就不错了。考完觉得考的还行，因为竞赛里接触过一点高数线代的知识，觉得自己英语阅读也比较会蒙。然后晚上大概九点的时候出成绩了，震惊自己竟然过了英才班的线。</p><p>晚上给爸爸妈妈很激动地打了个电话，有点担心 11 进 9 被刷掉，一直到十二点多才睡着。</p><p>第二天面试的时候其实自己比较轻松，感觉面试向来都比较稳 <del>比较会吹</del> ，面试单独面，五个老师。</p><p>面试比较自然，老师们的问题基本是跟着我的自我介绍思路走，不过还是有几个问题血压拉满。</p><ol><li>我努力地强调自己的竞赛水平，然后冯老师问：“现在让你去打区域赛能拿到什么奖项？”</li><li>我介绍了一下高中学校和班级的情况，然后另一个老师问：“你觉得二中和衡一哪个更好？”</li><li>周老师（也是现在的导师）问：“你也不能打一辈子竞赛啊。以后有什么进一步的打算？”<br>我说会读研，以后可能会去当大学老师。导师笑笑说要想当教授，后面得去好点的大学读书。</li></ol><p>面试完出来觉得自己还挺稳的，但是也不敢确定，忐忑到了晚上十点多出了结果。终于还是去学计算机了。</p><p>之后的生活很顺利，见面会，正常上课，班委选举（当了学委）。</p><p>上课的时候强迫自己去提问，回答问题，意识到自己可以做一些 <strong>由自己决定的</strong> <strong>想做什么就做什么</strong> 的事。</p><p>遇到了自己喜欢的老师，有能够舒适相处，真心相待的一帮同学，慢慢地从高三痛苦自闭的状态走出来了。</p><h2 id="竞赛"><a href="#竞赛" class="headerlink" title="竞赛"></a>竞赛</h2><p>这段话也想写给每个学竞赛过程中感到无力的同行者。</p><p><strong>算法竞赛的魅力在于，通过努力积累或灵机一动，你能够做出越来越难的题目，是一种对自我能力的认可。</strong></p><p><strong>算法竞赛的危险亦在于，你学会的东西越多，认识的厉害的人越多，面对不可计数的强者，很容易陷入自我否定。</strong></p><p>想到杭电之前，很长一段时间都觉得，大学不会再打竞赛了。</p><p>学竞赛的过程中经历的打击，不仅是比赛和上课中受到一众神仙居高临下的压迫感，更多的其实是周围人不经意的否定和安慰。对我来说，这是一种对信心很大的打击，会想要证明自己，亦或是心里感到无力而故作轻松。</p><p>在面临是否买 D 的抉择时，我放弃了。不是担心取得不了什么结果，而是觉得压力太大了。</p><p>在选学校的时候，突然想到杭电的那一刻，有种死灰复燃的感觉。</p><p>记起来 NOIP 2018 结束的时候，在存真楼下，孙校长和我们几个刚从秦皇岛回来的学生说的几句话：</p><p>“学别的竞赛的，最终的发展和竞赛不一定有关系，但是算法竞赛的学生，最终往往都会选择计算机行业。”</p><p><strong>算法竞赛会在心里埋下一颗种子。</strong></p><p><strong>我不是那种一帆风顺的天才，在受到打击的时候，我会感到无力。</strong></p><p><strong>但当我抛开名利、和他人比较、证明自己这些功利的意义之后，我发现自己还剩下些东西，还能看到初心。</strong></p><p><strong>是对算法的欣赏和热爱，是理解每一个算法、做出每一个题目的瞬间，精神上的享受，这就够了。</strong></p><p>至少在我看来，从我开始接触竞赛，到做出很多重要的选择，我决策的初心从来都不是名利，因为对算法还爱着。决定最终没有买 D 类，最大的原因还是在那个时刻，竞赛带来的痛苦超过了学习的享受，被一次次的排名裹挟，被各种机会所吸引，我越来越像一个没有自我的机器，越来越被成功学牢牢锁死。而在我选择大学的时候，竞赛对我的意义不再是未来的全部了。我能够静下来，问问自己对算法还有没有那种近乎痴迷的喜爱，能够将它作为一种兴趣去发展，不需要考虑付出和回报，至少在大学，我还是有自由支配自己的权利。</p><p><strong>我还是那个深深爱着算法的小孩，对几十行代码背后的智慧如痴如醉。</strong></p><hr><ul><li>Gold Medal (30th Place) : The 45th ICPC Asia Jinan Regional Contest, 2020</li><li>Gold Medal ( 15th Place) : The 18th Zhejiang Provincial Collegiate Programming Contest, 2021</li><li>Silver Medal (28th Place) : The 45th ICPC Asia Shenyang Regional Contest, 2021</li></ul><h2 id="课内学习"><a href="#课内学习" class="headerlink" title="课内学习"></a>课内学习</h2><p>第一个学期不会选课，修了系统默认的 25.25 个学分， 第二个学期修了 32.25 个学分。</p><p>通识选修只完成了科技发展与科学精神（2/2），大二上应该会把剩下的指标修完。</p><table><thead><tr><th align="center">数理基础 (23)</th><th>数分 （6 * 3.5 + 5 * 4.2）、高代（3 * 5 + 2 * 5）、离散（4 * 5）、大物1（3 * 5）</th></tr></thead><tbody><tr><td align="center">CS专业课 (14)</td><td>计导（2 * 5）、程设基础（5 * 5）、数据结构（4 * 4.5）、C++ 面向对象（3 * 5）</td></tr><tr><td align="center">通识教育 (8)</td><td>思修法基（3 * 5）、心理健康（1 * 4.3）、大军（2 * 4.8）、ACM（2 * 5）</td></tr><tr><td align="center">外语类 (8)</td><td>英语精读 A（2 * 4.4 + 2 * 4.6）、英语听说 A（1 * 4.3 + 1 * 4.7）、实用翻译（2 * 4.6）</td></tr><tr><td align="center">其他 (3.5)</td><td>大学启示录（1 * 4）、形式与政策（0.5 * 5）、科研实践（1 * 5）、体育（1 * 2.1 + 1 * 1.8）</td></tr></tbody></table><p>很幸运的是遇到的老师都很认真负责，老师们对课程内容非常了解，自己遇到问题也都能很好沟通。</p><p>很多课程都觉得自己做的没那么好，对给出的成绩也常常受之有愧。</p><p><strong>数学分析</strong>和<strong>高等代数</strong>两门数学基础课的表现截然相反，让我更清楚地意识到很大程度上我是个兴趣驱动的人。</p><p>对数分的知识体系自己本身可能就不太感兴趣，<del>加上数分课是真的提不起来精神</del>，两个学期的数学分析成绩都不太看的过去，数分上可能要在大三重修了。老师确实想要认真教会我，可是自己确实提不起兴趣去学。经历了数分上的洗礼，数分下还是逼着自己学了学，最后的结果算是马马虎虎吧，确实对不起老师对不起自己。</p><p>很喜欢高代老师的课，很大程度驱动我去花相对比较多的时间在这门课上。两个学期最后的结果都比较好，在自己喜欢的科目上能够看到自己做了些事情，也是让自己很开心的一件事。唯一遗憾的是期末错在了最后一节课老师强调过的一个小点上（证明正定阵需先说明对称）。大二下预定了老师的近世代数。</p><p>也很喜欢 Cathy 上的<strong>英语精读</strong>，也算是第一次能让我主动提起来学英语的兴趣。 Cathy 的课有一种很轻松的气氛，不会按照课本一板一眼的去上，讲的很多东西很受用。</p><p>感谢<strong>程设和OOP（C++）</strong>的老师对我的包容，自己在这两门课上确实有过很幼稚的行为。很佩服将近退休的老师能精确把控很多细节，随手写的代码能一遍过编译什么错都没有。</p><p><strong>离散数学和数据结构</strong> 给了我很深刻的教训。两门都是自认为了解比较多的，<strong>数据结构</strong>甚至申请了免听。考前复习的都不是很充分，等上了考场发现要开始脑补一堆一堆的概念。期末离散卷子简单，没暴露出来什么问题。数据结构觉得自己看看书就够了，最后的成绩却不尽如人意，原因只是不知道排序里的一个既定细节，只能悔不当初。</p><p><strong>大学物理和思想道德修养与法律基础</strong> 两门课结果意外的好，其实自己认真去学一学还是可以有效果的。中学阶段一直头疼的政治在闭卷的期末考试也写了个差不多。学不会电磁在考场上也做出来了绝大多数题。考试遇到不会的题也不能太着急，多想一会没准就通了。</p><p><strong>体育</strong> 从中考的 $18$ 分保底，到大一上的体测 $36$ 分，痛失两个学期的奖学金，终究还是没逃过身体素质不行这个问题。还是感谢环境逼着我去直面体育，按着体能班的要求大一下结结实实把 40 次阳光长跑跑完了，也确实让我看到耐力可以有提升，从操场跑一圈就喘不上气，到体测的时候人生第一次把 1000 米全跑下来，确实是很激动的。也终于在锻炼身体上有了动力，首先是大二下想要和 qyy 同学一起学体育舞，其次是想要恰奖学金。</p><h2 id="我的她"><a href="#我的她" class="headerlink" title="我的她"></a>我的她</h2><p>只想说爱情的体验是一种很纯粹的幸福。</p><p>愿意为她牺牲自己的一切，无时无刻都会想起她的事情，找不到她会坐如针毡，什么都做不下去。</p><p>她所高兴的事情比她还高兴，她难受的时候会跟着一起哭出来，在爱情中两个人都学会了如何照顾对方。</p><p>两个人在一起呆着常常心有灵犀，做事情反应如出一辙，很多事情不用言语。</p><p>两个人在一起呆着就是最快乐的事情，能够一起学习，散步，她在我的身边就能感受到无比的踏实。</p><p>会走到一起的人终究不会分开。心里对未来有着期盼，静下心来踏踏实实做事，继续加油。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Render Math Equations in Hexo</title>
      <link href="2019/06/01/mathjax/"/>
      <url>2019/06/01/mathjax/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>$$<br>f(a) = \frac{1}{2\pi i}\oint_{\gamma}\frac{f(z)}{z-a}dz<br>$$</p><p><a href="https://www.mathjax.org/">Beautiful and accessible math in all browsers - MathJax</a> </p><p>This post is used to check out whether the mathjax plugin (<a href="https://github.com/hexojs/hexo-math">hexo-math</a>) still works.</p><h2 id="Inline-Formula"><a href="#Inline-Formula" class="headerlink" title="Inline Formula"></a>Inline Formula</h2><p>Consider the sequence of $n$ distinct positive integers: $c_1, c_2, \cdots, c_n$. The child calls a vertex-weighted rooted binary tree <strong>good</strong> if and only if for every vertex $v$, the weight of $v$ is in the set ${c_1, c_2, \cdots, c_n}$ . Also our child thinks that the <strong>weight</strong> of a vertex-weighted tree is the sum of all vertices’ weights.</p><p>Given an integer $m$, can you for all $s (1 \le  s ≤ m) $ calculate the number of good vertex-weighted rooted binary trees with weight $s$ ? Please, check the samples for better understanding what trees are considered different.</p><p>We only want to know the answer modulo $998244353$ ( $7 × 17 × 2^{23} + 1$ , a prime number).</p><h2 id="Block-Formula"><a href="#Block-Formula" class="headerlink" title="Block Formula"></a>Block Formula</h2><p>$$<br>\int \frac{dx}{cos^2x}=\int sec^2xdx=tan x+C\<br>$$</p><p>$$<br>\int \frac{dx}{sin^2x}=\int csc^2xdx=-cot x+C\<br>$$</p><p>$$<br>\sum\limits_{i = 0}^{E} w[i]{M \choose i} {N \choose iS} \frac{(iS)!}{(S!)^{i}} \sum\limits_{j = 0}^{E - i} (-1)^{j} {M - i \choose j} {N - iS \choose jS} \frac{(jS)!}{(S!)^{j}} (M - i - j)^{N - iS - jS}<br>$$</p><p>$$<br>= \sum\limits_{i = 0}^{E} w[i]{M \choose i} {N \choose iS} \frac{(iS)!}{(S!)^{i}} \sum\limits_{j = i}^{E} (-1)^{j - i} {M - i \choose j - i} {N - iS \choose jS - iS} \frac{(jS - iS)!}{(S!)^{j - i}} (M - j)^{N - jS}<br>$$</p><h2 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h2><p>$$<br>\begin{bmatrix}<br>(\omega_n^0)^0 &amp; (\omega_n^0)^1 &amp; \cdots &amp; (\omega_n^0)^{n-1}\\ (\omega_n^1)^0 &amp; (\omega_n^1)^1 &amp; \cdots &amp; (\omega_n^1)^{n-1}\\<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>(\omega_n^{n-1})^0 &amp; (\omega_n^{n-1})^1 &amp; \cdots &amp; (\omega_n^{n-1})^{n-1}<br>\end{bmatrix}<br>\begin{bmatrix}<br>a_0 \\<br>a_1 \\<br>\vdots \\<br>a_{n-1}<br>\end{bmatrix}<br>=<br>\begin{bmatrix}<br>A(\omega_n^0) \\<br>A(\omega_n^1) \\<br>\vdots \\<br>A(\omega_n^{n-1})<br>\end{bmatrix}<br>$$</p><p>$$<br>\begin{bmatrix}<br>a_0 \\<br>a_1 \\<br>\vdots \\<br>a_{n-1}<br>\end{bmatrix}<br>=<br>\frac{1}{n}<br>\begin{bmatrix}<br>(\omega_n^{-0})^0 &amp; (\omega_n^{-0})^1 &amp; \cdots &amp; (\omega_n^{-0})^{n-1} \\<br>(\omega_n^{-1})^0 &amp; (\omega_n^{-1})^1 &amp; \cdots &amp; (\omega_n^{-1})^{n-1} \\<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>(\omega_n^{-(n-1)})^0 &amp; (\omega_n^{-(n-1)})^1 &amp; \cdots &amp; (\omega_n^{-(n-1)})^{n-1}<br>\end{bmatrix}<br>\begin{bmatrix}<br>A(\omega_n^0) \\<br>A(\omega_n^1) \\<br>\vdots \\<br>A(\omega_n^{n-1})<br>\end{bmatrix}<br>$$</p><p>To prevent escaping, you need to use <code>\\\\</code> to make a new line rather than <code>\\</code> .</p><p>For more about the Mathjax symbols, refer to ：<a href="/material/mathjax-symbol-list.pdf"><strong>The Comprehensive LaTeX Symbol List</strong></a> .</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2018/11/29/hello-world/"/>
      <url>2018/11/29/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>「 Hello, the lovely world. 」</p><p>「 Stay hungry, Stay foolish. 」</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> this<br>The Zen of Python, by Tim Peters<br><br>Beautiful <span class="hljs-keyword">is</span> better than ugly.<br>Explicit <span class="hljs-keyword">is</span> better than implicit.<br>Simple <span class="hljs-keyword">is</span> better than complex.<br>Complex <span class="hljs-keyword">is</span> better than complicated.<br>Flat <span class="hljs-keyword">is</span> better than nested.<br>Sparse <span class="hljs-keyword">is</span> better than dense.<br>Readability counts.<br>Special cases aren<span class="hljs-string">&#x27;t special enough to break the rules.</span><br><span class="hljs-string">Although practicality beats purity.</span><br><span class="hljs-string">Errors should never pass silently.</span><br><span class="hljs-string">Unless explicitly silenced.</span><br><span class="hljs-string">In the face of ambiguity, refuse the temptation to guess.</span><br><span class="hljs-string">There should be one-- and preferably only one --obvious way to do it.</span><br><span class="hljs-string">Although that way may not be obvious at first unless you&#x27;</span>re Dutch.<br>Now <span class="hljs-keyword">is</span> better than never.<br>Although never <span class="hljs-keyword">is</span> often better than *right* now.<br>If the implementation <span class="hljs-keyword">is</span> hard to explain, it<span class="hljs-string">&#x27;s a bad idea.</span><br><span class="hljs-string">If the implementation is easy to explain, it may be a good idea.</span><br><span class="hljs-string">Namespaces are one honking great idea -- let&#x27;</span>s do more of those!<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
