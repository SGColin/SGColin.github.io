<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nowcoder Summer 2021. Contest 1</title>
      <link href="2021/07/21/Nowcoder_Summer_2021_1/"/>
      <url>2021/07/21/Nowcoder_Summer_2021_1/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><p>Problems: <a href="https://ac.nowcoder.com/acm/contest/11166">https://ac.nowcoder.com/acm/contest/11166</a></p><p>Official Editorial: <a href="https://www.nowcoder.com/study/live/633">https://www.nowcoder.com/study/live/633</a></p><a id="more"></a><p><strong>Problems to be solved : C（点分治） / I（期望DP） / J（线段树）</strong></p><h2 id="A-Alice-and-Bob"><a href="#A-Alice-and-Bob" class="headerlink" title="A. Alice and Bob"></a>A. Alice and Bob</h2><blockquote class="colorquote warning"><p>两堆石子，数量分别为 $a,b$ ，两个人博弈，每次选一堆拿走 $k\ (k&gt;0)$ 个，另一堆拿走 $s\times k\ (s \ge 0)$​​​​ 个。</p><p>无法操作者输，问谁赢，数据范围 $T\le 10^4, 1\le n, m\le 5\times 10^3$​​​ 。</p></blockquote><p>设 $f[i][j]=0/1$​​​ 表示初始状态为 $i,j$​ 先手是否必胜，转移复杂度为调和级数 $O(n\log n)$ ，总复杂度 $O(n^3\log n)$ 。</p><p>打表后发现先手必败局面非常少，打表可过。有依据性质的解法，待更。</p><h2 id="E-Escape-along-Water-Pipe"><a href="#E-Escape-along-Water-Pipe" class="headerlink" title="E. Escape along Water Pipe"></a>E. Escape along Water Pipe</h2><blockquote class="colorquote warning"><p>一个 $n*m$​ 的网格图，每个格子里是一个水管（共 $(_2^4)= 6$​​ 种类型，一条边入另一条边出）。</p><p>从左上角的上方走到右下角的下方，中间任意时刻可以旋转任意位置，但不能旋转当前所在位置。</p><p>问是否有解，<strong>若有解输出方案（旋转+移动）</strong>，数据范围 $\sum n\times m\le 10^6$​ 。</p></blockquote><p>把每个位置拆点，加上离开的方向，大力 BFS 判连通性就好了。</p><p>输出方案需要记录 BFS 过程中的上一个状态，反推回去，维护一下需要旋转的角度。</p><p><strong>由于一个点可能由多个方向进入，因此可能会被旋转多次，每次的角度是基于上一次旋转的。</strong></p> <div><div class="fold_hider"><div class="close hider_title">Code - Problem E. Escape along Water Pipe</div></div><div class="fold"><figure class="highlight c++ hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1005</span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>{</span><br><span class="line"><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span> ;</span><br><span class="line"><span class="hljs-keyword">char</span> c = getchar();</span><br><span class="line"><span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar()) f |= (c == <span class="hljs-string">'-'</span>);</span><br><span class="line"><span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> f ? -x : x;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">bool</span> f[N][N][<span class="hljs-number">4</span>], ty[N][N];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m, a[N][N];</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">state</span> {</span></span><br><span class="line"><span class="hljs-keyword">int</span> x, y, dr;</span><br><span class="line"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> == (<span class="hljs-keyword">const</span> state &amp;b) {</span><br><span class="line"><span class="hljs-keyword">return</span> x == b.x &amp;&amp; y == b.y &amp;&amp; dr == b.dr;</span><br><span class="line">}</span><br><span class="line">}lst[N][N][<span class="hljs-number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">queue</span>&lt;state&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//     1</span></span><br><span class="line"><span class="hljs-comment">//  0 [+] 2</span></span><br><span class="line"><span class="hljs-comment">//     3  </span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> dy[<span class="hljs-number">4</span>] = {<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>};</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>] = {<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>};</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>{</span><br><span class="line">f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">2</span> + ty[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]] = <span class="hljs-number">1</span>;</span><br><span class="line">lst[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">2</span> + ty[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]] = (state){<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>};</span><br><span class="line">q.push((state){<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span> + ty[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]});</span><br><span class="line"><span class="hljs-keyword">while</span> (!q.empty()) {</span><br><span class="line">state nw = q.front(); q.pop();</span><br><span class="line"><span class="hljs-keyword">int</span> x = nw.x + dx[nw.dr];</span><br><span class="line"><span class="hljs-keyword">int</span> y = nw.y + dy[nw.dr];</span><br><span class="line"><span class="hljs-comment">//printf("(%d,%d,%d)\n", nw.x, nw.y, nw.dr);</span></span><br><span class="line"><span class="hljs-keyword">if</span> (x &lt;= <span class="hljs-number">0</span> || x &gt; n || y &lt;= <span class="hljs-number">0</span> || y &gt; m) <span class="hljs-keyword">continue</span>;</span><br><span class="line"><span class="hljs-keyword">if</span> (ty[x][y]) {</span><br><span class="line"><span class="hljs-keyword">int</span> dr = nw.dr;</span><br><span class="line"><span class="hljs-keyword">if</span> (f[x][y][dr]) <span class="hljs-keyword">continue</span>;</span><br><span class="line">f[x][y][dr] = <span class="hljs-number">1</span>;</span><br><span class="line">lst[x][y][dr] = nw;</span><br><span class="line">q.push((state){x, y, dr});</span><br><span class="line">} <span class="hljs-keyword">else</span> {</span><br><span class="line"><span class="hljs-keyword">int</span> dr = (nw.dr + <span class="hljs-number">1</span>) % <span class="hljs-number">4</span>;</span><br><span class="line"><span class="hljs-keyword">if</span> (!f[x][y][dr]) {</span><br><span class="line">f[x][y][dr] = <span class="hljs-number">1</span>;</span><br><span class="line">lst[x][y][dr] = nw;</span><br><span class="line">q.push((state){x, y, dr});</span><br><span class="line">}</span><br><span class="line">dr = (nw.dr + <span class="hljs-number">3</span>) % <span class="hljs-number">4</span>;</span><br><span class="line"><span class="hljs-keyword">if</span> (!f[x][y][dr]) {</span><br><span class="line">f[x][y][dr] = <span class="hljs-number">1</span>;</span><br><span class="line">lst[x][y][dr] = nw;</span><br><span class="line">q.push((state){x, y, dr});</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> tube[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>] = {</span><br><span class="line">{<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>},</span><br><span class="line">{<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>},</span><br><span class="line">{<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">2</span>},</span><br><span class="line">{<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>}};</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> tr[<span class="hljs-number">6</span>][<span class="hljs-number">6</span>] = {</span><br><span class="line">{<span class="hljs-number">0</span>, <span class="hljs-number">90</span>, <span class="hljs-number">180</span>, <span class="hljs-number">270</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>},</span><br><span class="line">{<span class="hljs-number">270</span>, <span class="hljs-number">0</span>, <span class="hljs-number">90</span>, <span class="hljs-number">180</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>},</span><br><span class="line">{<span class="hljs-number">180</span>, <span class="hljs-number">270</span>, <span class="hljs-number">0</span>, <span class="hljs-number">90</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>},</span><br><span class="line">{<span class="hljs-number">90</span>, <span class="hljs-number">180</span>, <span class="hljs-number">270</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>},</span><br><span class="line">{<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">90</span>},</span><br><span class="line">{<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">90</span>, <span class="hljs-number">0</span>}};</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">deque</span>&lt;state&gt; route;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> state <span class="hljs-title">getsta</span><span class="hljs-params">(state nw)</span> </span>{</span><br><span class="line"><span class="hljs-keyword">int</span> lstdr = (lst[nw.x][nw.y][nw.dr].dr + <span class="hljs-number">2</span>) % <span class="hljs-number">4</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> (state){nw.x, nw.y, tube[nw.dr][lstdr]};</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> tmp[N][N];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{</span><br><span class="line"><span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) x += <span class="hljs-number">360</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getroute</span><span class="hljs-params">()</span> </span>{</span><br><span class="line">route.clear();</span><br><span class="line">state nw{n, m, <span class="hljs-number">3</span>};</span><br><span class="line"><span class="hljs-keyword">while</span> (nw.x != <span class="hljs-number">0</span> || nw.y != <span class="hljs-number">0</span>) {</span><br><span class="line">state pre = lst[nw.x][nw.y][nw.dr];</span><br><span class="line">nw = getsta(nw);</span><br><span class="line">route.push_front((state){nw.x, nw.y, <span class="hljs-number">-1</span>});</span><br><span class="line"><span class="hljs-comment">//printf("nw = (%d,%d,%d)\n", nw.x, nw.y, nw.dr);</span></span><br><span class="line"><span class="hljs-comment">//printf("push_front : %d %d %d\n", nw.x, nw.y, 0);</span></span><br><span class="line">route.push_front((state){nw.x, nw.y, tr[a[nw.x][nw.y]][nw.dr]});</span><br><span class="line"><span class="hljs-comment">//printf("push_front : %d %d %d\n", nw.x, nw.y, tr[a[nw.x][nw.y]][nw.dr]);</span></span><br><span class="line">nw = pre;</span><br><span class="line">}</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lu\n"</span>, route.size());</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : route) {</span><br><span class="line"><span class="hljs-keyword">if</span> (i.dr != <span class="hljs-number">-1</span>) {</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"1 %d %d %d\n"</span>, getr(i.dr - tmp[i.x][i.y]), i.x, i.y);</span><br><span class="line">tmp[i.x][i.y] = i.dr;</span><br><span class="line">}</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"0 %d %d\n"</span>, i.x, i.y);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>{</span><br><span class="line">n = rd(); m = rd();</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) {</span><br><span class="line">a[i][j] = rd();</span><br><span class="line">ty[i][j] = (a[i][j] &gt; <span class="hljs-number">3</span>);</span><br><span class="line">            tmp[i][j] = <span class="hljs-number">0</span>;</span><br><span class="line">f[i][j][<span class="hljs-number">0</span>] = f[i][j][<span class="hljs-number">1</span>] = f[i][j][<span class="hljs-number">2</span>] = f[i][j][<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br><span class="line">bfs();</span><br><span class="line"><span class="hljs-keyword">if</span> (!f[n][m][<span class="hljs-number">3</span>]) {<span class="hljs-built_in">puts</span>(<span class="hljs-string">"NO"</span>); <span class="hljs-keyword">return</span>;}</span><br><span class="line"><span class="hljs-built_in">puts</span>(<span class="hljs-string">"YES"</span>);</span><br><span class="line">getroute();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{</span><br><span class="line"><span class="hljs-keyword">int</span> t = rd();</span><br><span class="line"><span class="hljs-keyword">while</span> (t--) work();</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></div><h2 id="H-Hash-Function"><a href="#H-Hash-Function" class="headerlink" title="H. Hash Function"></a>H. Hash Function</h2><blockquote class="colorquote warning"><p>给定 $n$​ 个数 $a_1, \cdots, a_n$​ ，使用取模的方法进行哈希，即取定模数 $x$​ 有 $Hash(a_i) = a_i\ \text{mod}\  x$​ 。</p><p>确定最小非负整数 $x$​ ，使得不会出现哈希冲突。数据范围 $1\le n, a_i\le 10^5$​​​​ 。</p></blockquote><p>$a_i$ 和 $a_j$ 发生冲突的条件为 $x\ |\ (a_i-a_j)$  ，因此只需要考虑差有哪些，然后将他们的倍数划掉即可。</p><p>由于值域只有 $10^5$ ，因此只需要确定 $1\cdots 10^5$​ 中有哪些数是某两个数的差值。</p><p>假设 $v_i=0/1$ 表示是否存在一个 $a_i=i$ ，$w_i$ 表示是否存在一对 $j,k$ 满足 $i=a_j-a_k$​ ，有：</p><p>$$<br>w_i=\bigg[\ \sum_{i=j-k}v_j*v_k &gt;0 \ \bigg]<br>$$</p><blockquote class="colorquote info"><p>这里的卷积处理技巧就比较常见了，设值域为 $[0,m]$​​​ ，令  $u_i=v_{m-i}$​​​ ，有</p><p>$$<br>\sum_{i=j-k}v_j\ast v_k = \sum_{i+m=j+m-k} v_j\ast v_k = \sum_{i+m=j+k} v_j\ast u_k<br>$$<br>因此将 $u$​ 和 $v$​​ 做卷积，将结果数组的后一半平移 $m$​ 即可得到 $w_i$ 。</p></blockquote><p>NTT 之后，枚举答案 $x$ 调和级数判断是否存在倍数 $ki$ 满足 $w_{ki}=1$，复杂度 $O(n\log n)$ 。</p> <div><div class="fold_hider"><div class="close hider_title">Code - Problem H. Hash Function</div></div><div class="fold"><figure class="highlight c++ hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 2100001</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 500000</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>{</span><br><span class="line">    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">char</span> c = getchar();</span><br><span class="line">    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = getchar());</span><br><span class="line">    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = getchar()) x = x * <span class="hljs-number">10</span> + (c ^ <span class="hljs-number">48</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> t = mod - <span class="hljs-number">2</span>)</span> </span>{</span><br><span class="line">    <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (t) {</span><br><span class="line">        <span class="hljs-keyword">if</span> (t &amp; <span class="hljs-number">1</span>) res = <span class="hljs-number">1l</span>l * res * x % mod;</span><br><span class="line">        x = <span class="hljs-number">1l</span>l * x * x % mod; t &gt;&gt;= <span class="hljs-number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n, m, a[N], b[N], rev[N], w[<span class="hljs-number">2</span>][N], mxlen;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<span class="hljs-keyword">return</span> x &gt;= mod ? x - mod : x;}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> len)</span> </span>{</span><br><span class="line">    mxlen = len;</span><br><span class="line">    w[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = w[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> per = fpow(<span class="hljs-number">3</span>, (mod - <span class="hljs-number">1</span>) / mxlen);</span><br><span class="line">    <span class="hljs-keyword">int</span> invper = fpow(per);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; mxlen; ++i) {</span><br><span class="line">            w[<span class="hljs-number">0</span>][i] = <span class="hljs-number">1l</span>l * w[<span class="hljs-number">0</span>][i - <span class="hljs-number">1</span>] * per % mod;</span><br><span class="line">            w[<span class="hljs-number">1</span>][i] = <span class="hljs-number">1l</span>l * w[<span class="hljs-number">1</span>][i - <span class="hljs-number">1</span>] * invper % mod;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Rev</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="hljs-keyword">int</span> len = <span class="hljs-number">1</span>, bit = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (len &lt;= n) ++bit, len &lt;&lt;= <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; ++i)</span><br><span class="line">        rev[i] = ((rev[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span>) | ((i &amp; <span class="hljs-number">1</span>) &lt;&lt; (bit - <span class="hljs-number">1</span>)));</span><br><span class="line">    <span class="hljs-keyword">return</span> len;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">NTT</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *f, <span class="hljs-keyword">int</span> len, <span class="hljs-keyword">int</span> o)</span> </span>{</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; ++i)</span><br><span class="line">        <span class="hljs-keyword">if</span> (i &gt; rev[i]) swap(f[i], f[rev[i]]);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; len; i &lt;&lt;= <span class="hljs-number">1</span>) {</span><br><span class="line">        <span class="hljs-keyword">int</span> wn = mxlen / (i &lt;&lt; <span class="hljs-number">1</span>);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; len; j += (i &lt;&lt; <span class="hljs-number">1</span>)) {</span><br><span class="line">            <span class="hljs-keyword">int</span> nw = <span class="hljs-number">0</span>, x, y;</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; i; ++k, nw += wn) {</span><br><span class="line">                x = f[j + k];</span><br><span class="line">                y = <span class="hljs-number">1l</span>l * w[o][nw] * f[i + j + k] % mod;</span><br><span class="line">                f[j + k] = mo(x + y);</span><br><span class="line">                f[i + j + k] = mo(x - y + mod);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">if</span> (o == <span class="hljs-number">1</span>) {</span><br><span class="line">        <span class="hljs-keyword">int</span> invl = fpow(len);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; ++i) f[i] = <span class="hljs-number">1l</span>l * f[i] * invl % mod;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{</span><br><span class="line">    n = rd();</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) a[rd()] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= M; ++i) b[i] = a[M - i];</span><br><span class="line">    <span class="hljs-keyword">int</span> len = Rev(<span class="hljs-number">2</span> * M + <span class="hljs-number">2</span>);</span><br><span class="line">    init(len);</span><br><span class="line">    NTT(a, len, <span class="hljs-number">0</span>); NTT(b, len, <span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; ++i) a[i] = <span class="hljs-number">1l</span>l * a[i] * b[i] % mod;</span><br><span class="line">    NTT(a, len, <span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= M; ++i) </span><br><span class="line">        <span class="hljs-keyword">if</span> (a[i + M] &gt; <span class="hljs-number">0</span>) vis[i] = <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">bool</span> f = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; ++i) {</span><br><span class="line">        f = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt;= M; j += i) </span><br><span class="line">            <span class="hljs-keyword">if</span> (vis[j]) {f = <span class="hljs-number">1</span>; <span class="hljs-keyword">break</span>;}</span><br><span class="line">        <span class="hljs-keyword">if</span> (!f) {<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, i); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;}</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, M + <span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></div></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>热爱生活</title>
      <link href="2021/07/08/freshman/"/>
      <url>2021/07/08/freshman/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><p>今天是 2021 年 7 月 8 日，星期四。</p><p>一年前的今天，高考最后一门刚刚考完。走出考场，回到自己的教室，拿手机，搬行李，告别。</p><p>离开学校的时候，碰到了还在梳理交通的竞赛教练，问我考的怎么样，然后约了后天要给高一的学弟们上课。</p><p>直到昨晚，暑假回本部给又一届的学弟们上完最后一天课。从二中本部的校门里走出来，回头看看。</p><a id="more"></a><h2 id="来杭电之前"><a href="#来杭电之前" class="headerlink" title="来杭电之前"></a>来杭电之前</h2><p>高考完就跟爸爸妈妈说我<strong>不复读</strong>，当晚就对答案，大概 645。报了南科大综评，拿到了还算不错的校考分。</p><p>然后在南校区给高一的同学讲了比较入门的概率，也是那些在一年前的暑假认识的，刚踏入二中大门学弟。</p><p>结束的时候在空空的学校里溜达，想想他们上课时候那种纯粹的热情，一代又一代，多少有一点感慨。</p><p>走之前拍了张照片，想起来一句自认为很应景的话：“<strong>雨过天青云破处，者般颜色做将来</strong>”</p><img src="/material/a.png" alt="连着下了两三天的小雨，只剩下竞赛生的二中" style="zoom:70%;"><p>出分的晚上比较坦然，提前几分钟查到了分数，比估计的低 9 分，都扣在语文上，115 / 134 / 136 / 251。</p><p>之后的几天比较迷茫，听了几个学校的招生宣讲都不尽如人意。南科大那边几度有希望，后来终究是落空。</p><hr><p>在我想起来杭电这所学校的时候，突然感觉就是要去这里了。</p><p>可能是高二去学军培训喜欢上了杭州这个城市，也可能是<strong>对竞赛生涯结束的不甘</strong>吧。</p><p>先自己偷偷找 Claris 要到了教练的联系方式，问了读研和专业的事情，刘老师的热情的杭州话让人很舒服。</p><p>然后就是小心翼翼地和父母交流，说我自己的想法和考虑，直到最后心里十分踏实地填上了第一志愿。</p><p>录取的结果是数学系，高考分数达到了卓越学院二次选拔的报名分数线，报了卓越学院的招生考试。</p><p>之后的假期写了几个板子，打了几场 CF 恢复一点水平，参加了 HDU 的几场内部训练，搬了一套题恰烂钱。</p><p>开学之前和岳老师吃了个饭（竟然还赶上了他生日）， 让我重心不要全部放到竞赛上，要给自己留个后路。</p><h2 id="初到杭电"><a href="#初到杭电" class="headerlink" title="初到杭电"></a>初到杭电</h2><p>有一说一假期还是过的比较随意，虽然报名了卓越学院，但是一点没准备，9 月份忐忑地就来到杭电啦。</p><p>考试之前自己很没有底气，当时觉得能进计科班就不错了。考完觉得考的还行，因为竞赛里接触过一点高数线代的知识，觉得自己英语阅读也比较会蒙。然后晚上大概九点的时候出成绩了，震惊自己竟然过了英才班的线。</p><p>晚上给爸爸妈妈很激动地打了个电话，有点担心 11 进 9 被刷掉，一直到十二点多才睡着。</p><p>第二天面试的时候其实自己比较轻松，感觉面试向来都比较稳 <del>比较会吹</del> ，面试单独面，五个老师。</p><p>面试跟想象里的一样顺利，老师们的问题基本是跟着我的自我介绍思路走，不过还是有几个问题血压拉满。</p><ol><li><p>我努力地强调自己的竞赛水平，然后冯老师问：“现在让你去打区域赛能拿到什么奖项？”</p></li><li><p>我介绍了一下高中学校和班级的情况，然后另一个老师问：“你觉得二中和衡一哪个更好？”</p></li><li><p>周老师（也是现在的导师）问：“你也不能打一辈子竞赛啊。以后有什么进一步的打算？”<br> 我说会读研，以后可能会去当大学老师。导师笑笑说要想当教授，后面得去好点的大学读书。</p></li></ol><p>面试完出来觉得自己还挺稳的，但是也不敢确定，忐忑到了晚上十点多出了结果。终于还是去学计算机了。</p><p>之后的生活比较顺利，见面会，正常上课，班委选举（当了学委）。</p><p>上课的时候强迫自己去提问，回答问题，意识到自己可以做一些 <strong>由自己决定的</strong> <strong>想做什么就做什么</strong> 的事。</p><p>遇到了自己喜欢的老师，有能够舒适相处，真心相待的一帮同学，慢慢地从高三痛苦自闭的状态走出来了。</p><h2 id="竞赛"><a href="#竞赛" class="headerlink" title="竞赛"></a>竞赛</h2><p>这段话也想写给每个学竞赛过程中感到无力的同行者。</p><p><strong>算法竞赛的魅力在于，通过努力积累或灵机一动，你能够做出越来越难的题目，是一种对自我能力的认可。</strong></p><p><strong>算法竞赛的危险亦在于，你学会的东西越多，认识的厉害的人越多，面对不可计数的强者，很容易陷入自我否定。</strong></p><p>想到杭电之前，很长一段时间都觉得，大学不会再打竞赛了。</p><p>学竞赛的过程中经历的打击，不仅是比赛和上课中受到一众神仙居高临下的压迫感，更多的其实是周围人不经意的否定和安慰。对我来说，这是一种对信心很大的打击，会想要证明自己，亦或是心里感到无力而故作轻松。 </p><p>在面临是否买 D 的抉择时，我放弃了。不是担心取得不了什么结果，而是觉得压力太大了。</p><p>在选学校的时候，突然想到杭电的那一刻，有种死灰复燃的感觉。</p><p>记起来 NOIP 2018 结束的时候，在存真楼下，孙校长和我们几个刚从秦皇岛回来的学生说的几句话：</p><p>“学别的竞赛的，最终的发展和竞赛不一定有关系，但是算法竞赛的学生，最终往往都会选择计算机行业。”</p><p><strong>算法竞赛会在心里埋下一颗种子。</strong></p><p><strong>我不是那种一帆风顺的天才，在受到打击的时候，我会感到无力。</strong></p><p><strong>但当我抛开名利、和他人比较、证明自己这些功利的意义之后，我发现自己还剩下些东西，还能看到初心。</strong></p><p><strong>是对算法的欣赏和热爱，是理解每一个算法、做出每一个题目的瞬间，精神上的的享受，这就够了。</strong></p><p>至少在我看来，从我开始接触竞赛，到做出很多重要的选择，我决策的初心从来都不是名利，因为对算法还爱着。决定最终没有买 D 类，最大的原因还是在那个时刻，竞赛带来的痛苦超过了学习的享受，被一次次的排名裹挟，被各种机会所吸引，我越来越像一个没有自我的机器，越来越被成功学牢牢锁死。而在我选择大学的时候，竞赛对我的意义不再是未来的全部了。我能够静下来，问问自己对算法还有没有那种近乎痴迷的喜爱，能够将它作为一种兴趣去发展，不需要考虑付出和回报，至少在大学，我还是有自由支配自己的权利。</p><p><strong>我还是那个深深爱着算法的小孩，对几十行代码背后的智慧如痴如醉。</strong></p><hr><p>一年来取得的结果超过预期，也让自己慢慢恢复了信心，继续努力。</p><ul><li>Gold Medal (30th Place) : The 45th ICPC Asia Jinan Regional Contest, 2020</li><li>Gold Medal ( 15th Place) : The 18th Zhejiang Provincial Collegiate Programming Contest, 2021</li><li>Silver Medal (28th Place) : The 45th ICPC Asia Shenyang Regional Contest, 2021</li></ul><h2 id="课内学习"><a href="#课内学习" class="headerlink" title="课内学习"></a>课内学习</h2><p>第一个学期不会选课，修了系统默认的 25.25 个学分， 第二个学期修了 32.25​ 个学分。</p><p>通识选修的任务完成的不太行，只完成了科技发展与科学精神（2/2），大二上应该会把通识剩下的指标修完。</p><table><thead><tr><th align="center">数理基础（23）</th><th>数分 （6 * 3.5 + 5 * 4.2）、高代（3 * 5 + 2 * 5）、离散（4 * 5）、大学物理1（3 * 5）</th></tr></thead><tbody><tr><td align="center">CS专业课（14）</td><td>计导（2 * 5）、程设基础（5 * 5）、数据结构（4 * 4.5）、C++ 面向对象（3 * 5）</td></tr><tr><td align="center">通识教育（8）</td><td>思修法基（3 * 5）、心理健康（1 * 4.3）、大军（2 * 4.8）、ACM（2 * 5）</td></tr><tr><td align="center">外语类（8）</td><td>英语精读 A（2 * 4.4 + 2 * 4.6）、英语听说 A（1 * 4.3 + 1 * 4.7）、实用翻译（2 * 4.6）</td></tr><tr><td align="center">其他（3.5）</td><td>大学启示录（1 * 4）、形式与政策（0.5 * 5）、科研实践（1 * 5）、体育（1 * 2.1 + 1 * 1.8）</td></tr></tbody></table><p>很幸运的是遇到的老师都很认真负责，老师们对课程内容非常了解，自己遇到问题也都能很好沟通。</p><p>很多课程都觉得自己做的没那么好，对给出的成绩也常常受之有愧。</p><p><strong>数学分析</strong>和<strong>高等代数</strong>两门数学基础课的表现截然相反，让我更清楚地意识到很大程度上我是个兴趣驱动的人。</p><p>对数分的知识体系自己本身可能就不太感兴趣，<del>加上数分课是真的提不起来精神</del>，两个学期的数学分析成绩都不太看的过去，数分上可能要在大三重修了。老师确实想要认真教会我，可是自己确实提不起兴趣去学。经历了数分上的洗礼，数分下还是逼着自己学了学，最后的结果算是马马虎虎吧，确实对不起老师对不起自己。</p><p>很喜欢高代老师的课，很大程度驱动我去花相对比较多的时间在这门课上。两个学期最后的结果都比较好，在自己喜欢的科目上能够看到自己做了些事情，也是让自己很开心的一件事。唯一遗憾的是期末错在了最后一节课老师强调过的一个小点上（证明正定阵需先说明对称）。大二下预定了老师的近世代数。</p><p>也很喜欢 Cathy 上的<strong>英语精读</strong>，也算是第一次能让我主动提起来学英语的兴趣。 Cathy 的课有一种很轻松的气氛，不会按照课本一板一眼的去上，讲的很多东西很受用。</p><p>感谢<strong>程设和OOP（C++）</strong>的老师对我的包容，自己在这两门课上确实有过很幼稚的行为。很佩服将近退休的老师能精确把控很多细节，随手写的代码能一遍过编译什么错都没有。</p><p><strong>离散数学和数据结构</strong> 给了我很深刻的教训。两门都是自认为了解比较多的，<strong>数据结构</strong>甚至申请了免听。考前复习的都不是很充分，等上了考场发现要开始脑补一堆一堆的概念。期末离散卷子简单，没暴露出来什么问题。数据结构觉得自己看看书就够了，最后的成绩却不尽如人意，原因只是不知道排序里的一个既定细节，只能悔不当初。</p><p><strong>大学物理和思想道德修养与法律基础</strong> 两门课结果意外的好，其实自己认真去学一学还是可以有效果的。中学阶段一直头疼的政治在闭卷的期末考试也写了个差不多。学不会电磁在考场上也做出来了绝大多数题。考试遇到不会的题也不能太着急，多想一会没准就通了。</p><p><strong>体育</strong> 从中考的 $18$ 分保底，到大一上的体测 $36$ 分，痛失两个学期的奖学金，终究还是没逃过身体素质不行这个问题。还是感谢环境逼着我去直面体育，按着体能班的要求大一下结结实实把 40 次阳光长跑跑完了，也确实让我看到耐力可以有提升，从操场跑一圈就喘不上气，到体测的时候人生第一次把 1000 米全跑下来，确实是很激动的。也终于在锻炼身体上有了动力，首先是大二下想要和 qyy 同学一起学体育舞，其次是想要恰奖学金。</p><h2 id="情窦初开"><a href="#情窦初开" class="headerlink" title="情窦初开"></a>情窦初开</h2><p>我知道你们想看这个，但是没有什么要多说的，只想说爱情的体验是一种很纯粹的幸福。</p><p>愿意为她牺牲自己的一切，无时无刻都会想起她的事情，找不到她会坐如针毡，什么都做不下去。</p><p>她所高兴的事情比她还高兴，她难受的时候会跟着一起哭出来，在爱情中两个人都学会了如何照顾对方。</p><p>两个人在一起呆着常常心有灵犀，做事情反应如出一辙，很多事情不用言语。</p><p>两个人在一起呆着就是最快乐的事情，能够一起学习，散步，她在我的身边就能感受到无比的踏实。</p><p>会走到一起的人终究不会分开。心里对未来有着期盼，静下心来踏踏实实做事，继续加油。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Atcode Beginner Contest 203</title>
      <link href="2021/05/31/abc203/"/>
      <url>2021/05/31/abc203/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><p>Contest Link: <a href="https://atcoder.jp/contests/abc203">AtCoder Beginner Contest 203</a></p><p>Official Editorial: <a href="https://atcoder.jp/contests/abc203/editorial">Editorial - AtCoder Beginner Contest 203</a></p><a id="more"></a><p>Overview: 比平时的 ABC 难一些， F 题比较有意思。</p><h2 id="D-Pond"><a href="#D-Pond" class="headerlink" title="D. Pond"></a>D. Pond</h2><p>给定一个 $n\times n$ 的矩阵，找到所有 $k\times k$ 的子矩阵中，子矩阵内中位数的最小值。</p><blockquote class="colorquote info"><p>考虑对于某个 $x$ ，将矩阵中小于等于 $x$ 的数标 $1$ ，其余标 $0$ 。</p><p>若某个 $k\times k$ 的子矩阵内和为 $\lfloor\frac{k^2}{2} + 1\rfloor$ ，则此时 $x$ 可以成为答案之一（ $x$ 为该子矩阵的中位数）</p></blockquote><p>赛时的做法比较窒息，将所有数字排序后逐个插入，需要支持单点加，询问是否存在对应的子矩阵。</p><p>由于询问的矩阵大小相同，将子矩阵内的权值记录在左上角，转化成了子矩阵加加，维护矩阵内单点 $\max$ 。</p><p>写了二维线段树复杂度 $O(n^2\log^2n)$ ，TLE * 8，耻辱下播。</p><hr><p>实际上二分答案+二维前缀和就好了，每次二分，把原矩阵中小于的标 $1$ 。</p><p>然后用二维容斥逐个检查是否存在 $k\times k$ 的子矩阵内和 $&gt;\lfloor\frac{k^2}{2} + 1\rfloor$ 即可，复杂度 $O(n^2\log n)$ 。</p><h2 id="E-White-Pawn"><a href="#E-White-Pawn" class="headerlink" title="E. White Pawn"></a>E. White Pawn</h2><p>题意不再叙述，注意直着移动目标位置不能有黑点，斜着移动目标位置必须有黑点。</p><p>考虑维护起点到每一行末尾的连通性，那么一个黑点能影响的连通性，其实只有它所在的行。</p><p>具体的，如果某个黑点坐标在 $(x_0,y_0)$ ，起点可以到的 $x=x_0-1$ 的行的集合为 $S$ ，那么：</p><ul><li><p>￼ 如果 $y_0+1\in S$ 或 $y_0-1\in S$ ，则 $x=x_0$ 时 $y_0$ 可达，将 $y_0$ 加入。</p></li><li><p>￼ 否则 $x=x_0$ 时 $y_0$ 不可达，将 $y_0$ 删去。</p></li></ul><p>因此只需要维护可达行的集合 $S$ ，按黑点 $x$ 从小到大修改 $S$ 即可，显然集合的大小与黑点的个数是线性关系。</p><p>维护的时候需要注意同一列上不同点可能会互相影响，可以把修改存下来，每一列处理完后统一做。</p><figure class="highlight c++ hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; S;</span><br><span class="line"><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &gt; a;</span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; add, del;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{ </span><br><span class="line">    <span class="hljs-keyword">int</span> n = rd(), m = rd();</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) a[rd()].push_back(rd());</span><br><span class="line">    S.insert(n);</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : a) {</span><br><span class="line">        add.clear();</span><br><span class="line">      del.clear();</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : v.second) </span><br><span class="line">            <span class="hljs-keyword">if</span> (S.count(y - <span class="hljs-number">1</span>) || S.count(y + <span class="hljs-number">1</span>)) add.push_back(y);</span><br><span class="line">            <span class="hljs-keyword">else</span> del.push_back(y);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : add) S.insert(y);</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : del) S.erase(y);</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, S.size());</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="F-Weed"><a href="#F-Weed" class="headerlink" title="F. Weed"></a>F. Weed</h2><p>题意不再叙述，注意是双关键字最优。</p><p>赛时以为第一关键字最优的情况一定是推掉最大/最小的共 k 个，反例很好找（一段一段的分布）</p><p>性质：每次 2 操作集合里的最大值都会至少减半，最多删 $\log\{\max a_i\}$ 次一定会结束了，第一关键字最大为 $30$ 。</p><p>这个状态设计比较有意思（答案放到状态中）：首先将 $a[i]$ 从小到大排序，$f[i][j]$ 表示，只考虑 $a[1],\cdots, a[i]$ ，即只考虑 $\le a[i]$ 的元素时， 最少提前使用 2 操作删掉几个，使得剩余的只需要 $j$ 次 1 操作即可删干净。</p><p>转移分讨当前元素删/不删即可: $f[i][j] = \min(f[i-1][j] + 1,f[pos - 1][j - 1])$</p><p>其中 $pos$ 的含义为，最小的 $x\ge 1$ ，满足 $a[x] &gt; \frac{a[i]}2$ ，即使用一次操作 $a[i]$ 能带走的最靠前的位置。</p><figure class="highlight c++ hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n);</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, p = <span class="hljs-number">1</span>; i &lt;= n; i++) {</span><br><span class="line">  <span class="hljs-keyword">for</span> (; a[p] * <span class="hljs-number">2</span> &lt;= a[i]; p++);</span><br><span class="line">    f[i][<span class="hljs-number">0</span>] = i;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; K; j++)</span><br><span class="line">      f[i][j] = min(f[i - <span class="hljs-number">1</span>][j] + <span class="hljs-number">1</span>, f[p - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="hljs-keyword">for</span> (p = <span class="hljs-number">0</span>; f[n][p] &gt; k; p++);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d\n"</span>, p, f[n][p]);</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      <categories>
          
          <category> solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Atcoder </tag>
            
            <tag> Binary Search </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Render Math Equations in Hexo</title>
      <link href="2019/06/01/mathjax/"/>
      <url>2019/06/01/mathjax/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><p>$$<br>f(a) = \frac{1}{2\pi i}\oint_{\gamma}\frac{f(z)}{z-a}dz<br>$$</p><p><a href="https://www.mathjax.org/">Beautiful and accessible math in all browsers - MathJax</a> </p><p>This post is used to check out whether the mathjax plugin (<a href="https://github.com/hexojs/hexo-math">hexo-math</a>) still works.</p><a id="more"></a><h2 id="Inline-Formula"><a href="#Inline-Formula" class="headerlink" title="Inline Formula"></a>Inline Formula</h2><p>Consider the sequence of $n$ distinct positive integers: $c_1, c_2, \cdots, c_n$. The child calls a vertex-weighted rooted binary tree <strong>good</strong> if and only if for every vertex $v$, the weight of $v$ is in the set ${c_1, c_2, \cdots, c_n}$ . Also our child thinks that the <strong>weight</strong> of a vertex-weighted tree is the sum of all vertices’ weights.</p><p>Given an integer $m$, can you for all $s (1 \le  s ≤ m) $ calculate the number of good vertex-weighted rooted binary trees with weight $s$ ? Please, check the samples for better understanding what trees are considered different.</p><p>We only want to know the answer modulo $998244353$ ( $7 × 17 × 2^{23} + 1$ , a prime number).</p><h2 id="Block-Formula"><a href="#Block-Formula" class="headerlink" title="Block Formula"></a>Block Formula</h2><p>$$<br>\int \frac{dx}{cos^2x}=\int sec^2xdx=tan x+C\<br>$$</p><p>$$<br>\int \frac{dx}{sin^2x}=\int csc^2xdx=-cot x+C\<br>$$</p><p>$$<br>\sum\limits_{i = 0}^{E} w[i]{M \choose i} {N \choose iS} \frac{(iS)!}{(S!)^{i}} \sum\limits_{j = 0}^{E - i} (-1)^{j} {M - i \choose j} {N - iS \choose jS} \frac{(jS)!}{(S!)^{j}} (M - i - j)^{N - iS - jS}<br>$$</p><p>$$<br>= \sum\limits_{i = 0}^{E} w[i]{M \choose i} {N \choose iS} \frac{(iS)!}{(S!)^{i}} \sum\limits_{j = i}^{E} (-1)^{j - i} {M - i \choose j - i} {N - iS \choose jS - iS} \frac{(jS - iS)!}{(S!)^{j - i}} (M - j)^{N - jS}<br>$$</p><h2 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h2><p>$$<br>\begin{bmatrix}<br>(\omega_n^0)^0 &amp; (\omega_n^0)^1 &amp; \cdots &amp; (\omega_n^0)^{n-1}\\ (\omega_n^1)^0 &amp; (\omega_n^1)^1 &amp; \cdots &amp; (\omega_n^1)^{n-1}\\<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>(\omega_n^{n-1})^0 &amp; (\omega_n^{n-1})^1 &amp; \cdots &amp; (\omega_n^{n-1})^{n-1}<br>\end{bmatrix}<br>\begin{bmatrix}<br>a_0 \\<br>a_1 \\<br>\vdots \\<br>a_{n-1}<br>\end{bmatrix}<br>=<br>\begin{bmatrix}<br>A(\omega_n^0) \\<br>A(\omega_n^1) \\<br>\vdots \\<br>A(\omega_n^{n-1})<br>\end{bmatrix}<br>$$</p><p>$$<br>\begin{bmatrix}<br>a_0 \\<br>a_1 \\<br>\vdots \\<br>a_{n-1}<br>\end{bmatrix}<br>=<br>\frac{1}{n}<br>\begin{bmatrix}<br>(\omega_n^{-0})^0 &amp; (\omega_n^{-0})^1 &amp; \cdots &amp; (\omega_n^{-0})^{n-1} \\<br>(\omega_n^{-1})^0 &amp; (\omega_n^{-1})^1 &amp; \cdots &amp; (\omega_n^{-1})^{n-1} \\<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>(\omega_n^{-(n-1)})^0 &amp; (\omega_n^{-(n-1)})^1 &amp; \cdots &amp; (\omega_n^{-(n-1)})^{n-1}<br>\end{bmatrix}<br>\begin{bmatrix}<br>A(\omega_n^0) \\<br>A(\omega_n^1) \\<br>\vdots \\<br>A(\omega_n^{n-1})<br>\end{bmatrix}<br>$$</p><blockquote class="colorquote warning"><p>To prevent escaping, you need to use <code>\\\\</code> to make a new line rather than <code>\\</code> .</p></blockquote><blockquote class="colorquote success"><p>For more about the Mathjax symbols, refer to <a href="/material/mathjax-symbol-list.pdf">The Comprehensive LaTeX Symbol List</a> .</p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2018/11/29/hello-world/"/>
      <url>2018/11/29/hello-world/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script></head><body><p>「 Hello, the lovely world. 」</p><p>「 Stay hungry, Stay foolish. 」</p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> this</span><br><span class="line">The Zen of Python, by Tim Peters</span><br><span class="line"></span><br><span class="line">Beautiful <span class="hljs-keyword">is</span> better than ugly.</span><br><span class="line">Explicit <span class="hljs-keyword">is</span> better than implicit.</span><br><span class="line">Simple <span class="hljs-keyword">is</span> better than complex.</span><br><span class="line">Complex <span class="hljs-keyword">is</span> better than complicated.</span><br><span class="line">Flat <span class="hljs-keyword">is</span> better than nested.</span><br><span class="line">Sparse <span class="hljs-keyword">is</span> better than dense.</span><br><span class="line">Readability counts.</span><br><span class="line">Special cases aren<span class="hljs-string">'t special enough to break the rules.</span></span><br><span class="line"><span class="hljs-string">Although practicality beats purity.</span></span><br><span class="line"><span class="hljs-string">Errors should never pass silently.</span></span><br><span class="line"><span class="hljs-string">Unless explicitly silenced.</span></span><br><span class="line"><span class="hljs-string">In the face of ambiguity, refuse the temptation to guess.</span></span><br><span class="line"><span class="hljs-string">There should be one-- and preferably only one --obvious way to do it.</span></span><br><span class="line"><span class="hljs-string">Although that way may not be obvious at first unless you'</span>re Dutch.</span><br><span class="line">Now <span class="hljs-keyword">is</span> better than never.</span><br><span class="line">Although never <span class="hljs-keyword">is</span> often better than *right* now.</span><br><span class="line">If the implementation <span class="hljs-keyword">is</span> hard to explain, it<span class="hljs-string">'s a bad idea.</span></span><br><span class="line"><span class="hljs-string">If the implementation is easy to explain, it may be a good idea.</span></span><br><span class="line"><span class="hljs-string">Namespaces are one honking great idea -- let'</span>s do more of those!</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
