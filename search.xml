<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Templates of Polynomial</title>
      <link href="/2019/03/08/polynomial/"/>
      <url>/2019/03/08/polynomial/</url>
      
        <content type="html"><![CDATA[<p>最近在写一些多项式的模板题，代码总是显得十分混乱。</p><p>深感代码通用的重要性，因此开一篇小结用以记录比较通用的模板。</p><p>如果模板出了问题请联系我，万分感谢。</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>为了体现简洁，在每一部分只会放关键代码。</p><p>关于完整代码，在每一部分的代码标题处都放了链接。</p><p>可以保证代码之间函数的调用是合法的，会给出参数说明。</p><p>因为放代码可能会比较长，可以点右边的小火箭回到目录。</p><p>算法原理部分的总结是用 LaTeX 写的，可以看这里 <a href="https://blog.gyx.me/note/polynomialtech.pdf">多项式科技初步</a></p><h2 id="多项式乘法"><a href="#多项式乘法" class="headerlink" title="多项式乘法"></a>多项式乘法</h2><p>使用 <a href="http://uoj.ac/problem/34" target="_blank" rel="noopener">[ UOJ 34 ] 多项式乘法</a> 作为测试题。</p><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p><strong>Rev</strong> 传入需要预处理的长度 n，返回对应的二的幂次大小，并处理好全局 Reverse 数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Rev</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = <span class="number">1</span>, bit = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (len &lt;= n) ++bit, len &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">    rev[i] = ((rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>)));</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FFT-版本"><a href="#FFT-版本" class="headerlink" title="FFT 版本"></a><a href="https://blog.gyx.me/code/template/polynomial/fft.cpp">FFT 版本</a></h3><p><strong>Mul</strong> 传入长度为 n 的数组 a，长度为 m 的数组 b</p><p><strong>FFT</strong> 传入数组 f，处理的长度 len，以及旋转方向 o</p><p>使用的是 3 次变换的最基本写法，用时 362 ms</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT</span><span class="params">(Complex *f, <span class="keyword">int</span> len, <span class="keyword">int</span> o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">      <span class="keyword">if</span> (rev[i] &gt; i) swap(f[i], f[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      Complex wn = Complex(<span class="built_in">cos</span>(PI / i) , o * <span class="built_in">sin</span>(PI / i));</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j += (i &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Complex w = Complex(<span class="number">1</span>, <span class="number">0</span>), x, y;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; ++k, w = w * wn) &#123;</span><br><span class="line">          x = f[j + k]; y = w * f[i + j + k];</span><br><span class="line">          f[i + j + k] = x - y; f[j + k] = x + y;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="number">-1</span>) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) f[i].x /= len;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mul</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = Rev(n + m);</span><br><span class="line">  FFT(a, len, <span class="number">1</span>); FFT(b, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) a[i] = a[i] * b[i];</span><br><span class="line">  FFT(a, len, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NTT-版本"><a href="#NTT-版本" class="headerlink" title="NTT 版本"></a><a href="https://blog.gyx.me/code/template/polynomial/ntt.cpp">NTT 版本</a></h3><p><strong>Mul</strong>  传入长度为 n 的数组 a，长度为 m 的数组 b</p><p><strong>NTT</strong>  传入数组 f，处理的长度 len，以及旋转方向 o</p><p>模数为 998244353，原根为 3，用时 403 ms</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> *f, <span class="keyword">int</span> len, <span class="keyword">int</span> o)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">    <span class="keyword">if</span> (i &gt; rev[i]) swap(f[i], f[rev[i]]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> wn = qpow(<span class="number">3</span>, (mod - <span class="number">1</span>) / (i &lt;&lt; <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="number">-1</span>) wn = qpow(wn, mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j += (i &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">      <span class="keyword">int</span> w = <span class="number">1</span>, x, y;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; ++k, w = <span class="number">1l</span>l * w * wn % mod) &#123;</span><br><span class="line">        x = f[j + k]; y = <span class="number">1l</span>l * w * f[i + j + k] % mod;</span><br><span class="line">        f[j + k] = mo(x + y); f[i + j + k] = mo(x - y + mod);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (o == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> invl = qpow(len, mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) f[i] = <span class="number">1l</span>l * f[i] * invl % mod;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mul</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = Rev(n + m);</span><br><span class="line">  FFT(a, len, <span class="number">1</span>); FFT(b, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) a[i] = a[i] * b[i];</span><br><span class="line">  FFT(a, len, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式求逆"><a href="#多项式求逆" class="headerlink" title="多项式求逆"></a>多项式求逆</h2><p>使用 <a href="https://www.luogu.org/problemnew/show/P4238" target="_blank" rel="noopener">[ Luogu P4238 ] 多项式求逆</a> 作为测试题。</p><p><strong>Inv</strong> 传入一个长度为 n 的数组 a，求出其模 x 的 n 次下的逆 b，需要使用辅助数组 tmp</p><h3 id="递归版本"><a href="#递归版本" class="headerlink" title="递归版本"></a><a href="https://blog.gyx.me/code/template/polynomial/inv1.cpp">递归版本</a></h3><p>使用 O2 优化，用时 562 ms</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Inv</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;b[<span class="number">0</span>] = qpow(a[<span class="number">0</span>], mod - <span class="number">2</span>); <span class="keyword">return</span>;&#125;</span><br><span class="line">  Inv(a, b, (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">int</span> len = Rev(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) tmp[i] = a[i];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; len; ++i) b[i] = tmp[i] = <span class="number">0</span>;</span><br><span class="line">  NTT(b, len, <span class="number">1</span>); NTT(tmp, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">    b[i] = (<span class="number">2l</span>l - <span class="number">1l</span>l * tmp[i] * b[i] % mod + mod) * b[i] % mod;</span><br><span class="line">  NTT(b, len, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) tmp[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; len; ++i) b[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代版本"><a href="#迭代版本" class="headerlink" title="迭代版本"></a><a href="https://blog.gyx.me/code/template/polynomial/inv2.cpp">迭代版本</a></h3><p>使用 O2 优化，用时 570 ms</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Inv</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  b[<span class="number">0</span>] = qpow(a[<span class="number">0</span>], mod - <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">int</span> len;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt; (n &lt;&lt; <span class="number">1</span>); l &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    len = Rev(l &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i) tmp[i] = a[i];</span><br><span class="line">    NTT(b, len, <span class="number">1</span>); NTT(tmp, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">      b[i] = (<span class="number">2l</span>l - <span class="number">1l</span>l * tmp[i] * b[i] % mod + mod) * b[i] % mod;</span><br><span class="line">    NTT(b, len, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; len; ++i) b[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式开根"><a href="#多项式开根" class="headerlink" title="多项式开根"></a>多项式开根</h2><p>使用 <a href="https://www.luogu.org/problemnew/show/P5205" target="_blank" rel="noopener">[ Luogu P5205 ] 多项式开根</a> 作为测试题，多项式求逆部分均采用递归版本。</p><p><strong>Sqrt</strong> 传入一个长度为 n 的数组 a，求出其模 x 的 n 次下的根 b，需要使用辅助数组 a0，b0</p><h3 id="递归版本-1"><a href="#递归版本-1" class="headerlink" title="递归版本"></a><a href="https://blog.gyx.me/code/template/polynomial/sqrt1.cpp">递归版本</a></h3><p>使用 O2 优化，用时 3081 ms</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Sqrt</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;b[<span class="number">0</span>] = <span class="number">1</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line">  Sqrt(a, b, (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  Inv(b, b0, n);</span><br><span class="line">  <span class="keyword">int</span> len = Rev(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) a0[i] = a[i];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; len; ++i) a0[i] = <span class="number">0</span>;</span><br><span class="line">  NTT(a0, len, <span class="number">1</span>); NTT(b0, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) a0[i] = <span class="number">1l</span>l * a0[i] * b0[i] % mod;</span><br><span class="line">  NTT(a0, len, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) b[i] = <span class="number">1l</span>l * (b[i] + a0[i]) % mod * inv2 % mod;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; len; ++i) b[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代版本-1"><a href="#迭代版本-1" class="headerlink" title="迭代版本"></a><a href="https://blog.gyx.me/code/template/polynomial/sqrt2.cpp">迭代版本</a></h3><p>使用 O2 优化，用时 3104 ms</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Sqrt</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> len;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt; (n &lt;&lt; <span class="number">1</span>); l &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    Inv(b, b0, l);</span><br><span class="line">    len = Rev(l &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i) a0[i] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; len; ++i) a0[i] = <span class="number">0</span>;</span><br><span class="line">    NTT(a0, len, <span class="number">1</span>); NTT(b0, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) a0[i] = <span class="number">1l</span>l * a0[i] * b0[i] % mod;</span><br><span class="line">    NTT(a0, len, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i) b[i] = <span class="number">1l</span>l * (b[i] + a0[i]) % mod * inv2 % mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; len; ++i) b[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式除法和取模"><a href="#多项式除法和取模" class="headerlink" title="多项式除法和取模"></a>多项式除法和取模</h2><p>使用 <a href="https://www.luogu.org/problemnew/show/P4512" target="_blank" rel="noopener">[ Luogu P4512 ] 多项式除法</a> 作为测试题，不再区分多项式求逆部分的实现方式。</p><p><strong>Div</strong> 传入一个长度为 n 的数组 a，和一个长度为 m 的数组 b，返回一个长度为 n-m 的商数组 d, 以及一个长度不超过 m 的余数数组 r</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><a href="https://blog.gyx.me/code/template/polynomial/div.cpp">代码实现</a></h3><p>使用 O2 优化，用时 710 ms</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Div</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) ar[i] = a[n - i];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) br[i] = b[m - i];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n - m + <span class="number">2</span>; i &lt;= n; ++i) ar[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n - m + <span class="number">2</span>; i &lt;= m; ++i) br[i] = <span class="number">0</span>;</span><br><span class="line">  Inv(br, invb, n - m + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">int</span> len = Rev((n - m + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">  NTT(ar, len, <span class="number">1</span>); NTT(invb, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) ar[i] = <span class="number">1l</span>l * ar[i] * invb[i] % mod;</span><br><span class="line">  NTT(ar, len, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - m; ++i) tmp[i] = d[i] = ar[n - m - i];</span><br><span class="line">  len = Rev(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n - m + <span class="number">1</span>; i &lt;= len; ++i) tmp[i] = <span class="number">0</span>;</span><br><span class="line">  NTT(b, len, <span class="number">1</span>); NTT(tmp, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) b[i] = <span class="number">1l</span>l * b[i] * tmp[i] % mod;</span><br><span class="line">  NTT(b, len, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) r[i] = mo(a[i] - b[i] + mod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分治-FFT"><a href="#分治-FFT" class="headerlink" title="分治 FFT"></a>分治 FFT</h2><p>使用 <a href="https://www.luogu.org/problemnew/show/P4721" target="_blank" rel="noopener">[ Luogu P4721 ] 分治 FFT</a> 作为测试题，多项式求逆采用递归版本。</p><h3 id="分治版本"><a href="#分治版本" class="headerlink" title="分治版本"></a><a href="https://blog.gyx.me/code/template/polynomial/divfft1.cpp">分治版本</a></h3><p><strong>Solve</strong> 传入分治区间 [l,r]，默认全局系数数组 g 和待求数组 f，需要辅助数组 a，b</p><p>使用 O2 优化，用时 974 ms</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">  solve(l, mid);</span><br><span class="line">  <span class="keyword">int</span> len = Rev((r - l + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len; ++ i) a[i] = b[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = l ; i &lt;= mid; ++ i) a[i - l] = f[i];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= r - l; ++ i) b[i] = g[i];</span><br><span class="line">  NTT(a, len, <span class="number">1</span>); NTT(b, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) a[i] = <span class="number">1l</span>l * a[i] * b[i] % mod;</span><br><span class="line">  NTT(a, len, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt;= r; ++i) f[i] = mo(f[i] + a[i - l]);</span><br><span class="line">  solve(mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多项式求逆版本"><a href="#多项式求逆版本" class="headerlink" title="多项式求逆版本"></a><a href="https://blog.gyx.me/code/template/polynomial/divfft2.cpp">多项式求逆版本</a></h3><p><strong>Solve</strong> 传入长度为 n-1 的系数数组 a，返回答案数组 b</p><p>使用 O2 优化，用时 261 ms</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) a[i] = mo(mod - a[i]);</span><br><span class="line">  Inv(a, b, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式求导和积分"><a href="#多项式求导和积分" class="headerlink" title="多项式求导和积分"></a>多项式求导和积分</h2><p><strong>Der</strong> 传入长度为 n 的数组 a，对其求导</p><p><strong>Int</strong> 传入长度为 n 的数组 a，对其积分</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Der</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) a[i - <span class="number">1</span>] = <span class="number">1l</span>l * i * a[i] % mod;</span><br><span class="line">  a[n - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Int</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) a[i] = <span class="number">1l</span>l * a[i - <span class="number">1</span>] * qpow(i, mod - <span class="number">2</span>) % mod;</span><br><span class="line">  a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式-ln"><a href="#多项式-ln" class="headerlink" title="多项式 ln"></a>多项式 ln</h2><p>使用 <a href="https://www.luogu.org/problemnew/show/P4725" target="_blank" rel="noopener">[ Luogu P4725 ] 多项式对数函数</a> 作为测试题，不再区分多项式求逆部分的实现方式。</p><p><strong>Ln</strong> 传入一个长度为 n 的数组 a，返回一个长度为 n 的数组 b 代表 ln(a)</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a><a href="https://blog.gyx.me/code/template/polynomial/ln.cpp">代码实现</a></h3><p>使用 O2 优化，用时 682 ms</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Ln</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  Inv(a, b, n); Der(a, n);</span><br><span class="line">  <span class="keyword">int</span> len = Rev(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">  NTT(a, len, <span class="number">1</span>); NTT(b, len, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) a[i] = <span class="number">1l</span>l * a[i] * b[i] % mod;</span><br><span class="line">  NTT(a, len, <span class="number">-1</span>); Int(a, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mathematics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Goodbye Wuxu</title>
      <link href="/2019/02/04/goodbye-wuxu/"/>
      <url>/2019/02/04/goodbye-wuxu/</url>
      
        <content type="html"><![CDATA[<p>戊戌狗年结束了，这一年的生活还算顺利。</p><p>上下求索的过程中，一次次的走进迷茫，再从迷茫中回到自己。</p><p>尽人事，知天命。新的一年加油。</p><a id="more"></a><h2 id="Memorabilia"><a href="#Memorabilia" class="headerlink" title="Memorabilia"></a>Memorabilia</h2><p>Mar.  写了转入三三的申请。给十六留下了粗糙的值周记录PPT。</p><p>Apr.  转入三三。省选划水，最后是非正式 rank15。</p><p>May.  花了两天时间研究了 Hexo，采用的 Next 主题。</p><p>Jun.  人生第一次过集体生日。</p><p>Jul.  NOI 同步赛 Spfa 被卡。在洛谷出的比赛过审了，正解被爆踩。</p><p>Aug.  把 Dev-C++ 换了 Atom 。</p><p>Nov.  NOIP 2018 差点被送退役。</p><p>Dec.  参加学考。简单学了点 LaTeX 。</p><p>Jan. 参加 CCPC-Wannafly Winter Camp。</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>随便写点还记得的东西，想到哪里就写些什么了。</p><p>嘴上常挂着 “不忘初心 ”，但是做了不少表面文章，做了不少不懂装懂的傻事。</p><p>有的事情总是呆在 Todo List 上，但是一直不去碰，或是看了两下就把它扔回去，等到下决心去搞了，也有几次搞到一半因为奇奇怪怪的原因放弃了。但这些东西还老是堆在心里一直想着，列的 deadline 也总是咕掉。</p><p>花哨的东西却认认真真搞了不少，几度沉沦于形式的简约和规范，甚至是操作界面的美观。</p><p>很多东西浅尝辄止，只学了一个开头，就去做做水题装作很懂的样子，过了一段时间发现学的不透，又会回来重新再看一遍，反反复复。</p><p>OI 在上半年逐渐成了生活的主线。但是好多时候不知道事情从哪里下手，或者希望渺茫。</p><p>这段时间 OI 以外的生活过的还是比较愉快的，经历了值周，换班，听到了想听的课，见识了很强的同学们和新鲜的思路。但是精力渐渐不太放在文化课上了，好多该刷题的东西一直放着，下课就想往机房跑，到期末还是不怎么会做动量和电解池的题。</p><p>OI 上也没有踏实下来吃透些什么，该学的东西不知道为什么也一直在拖，逐渐的变成了回避，躲避，沉默，每遇到了这些知识点的话题。这种感觉就像个瘤，它就长在你的心上，但是你就是不会碰它，越长越大压得喘不过气来。</p><p>过了生日之后，某一个晚上给父母写了点东西。现在看当时略显稚气的信里并没有说出来什么深处的东西，但还是借此给自己打打气，当时的感觉是 “有所成长” ，也算在那个时期拉了自己一把，OI 开始有些起色。</p><p>NOIP 前的三个月或许是到现在为止最拼的一段时间吧。那段时间压力比较大，也收获了很多感动。</p><p>第一次停课单休也是很新鲜。但状况也不容乐观，好多东西还停留在认识的阶段，有段时间甚至接近崩溃。万幸的是有 Luan 能陪我挺过那段时间，互相交流，心情也逐渐变得乐观起来，工作比较高效。感觉自己能挺过那段时间也是挺神奇，一个多月学了之前落下的好多东西，还能挺住比较密集的考试。我要感谢 Luan，我都不敢想象没了他跟我交流现在我会是什么样子。</p><p>那段时间的生活过的比较平淡，但是充实。还不是太冷的时候跑了几次步，N 老师带着队，第一次没停下跑完了二南外圈 2km。</p><p>NOIP 的事情不想说太多了，以前也写过东西。分别是必然的，但很多意料之外的事情让人很痛苦。</p><p>学考之后这段时间过的比较平凡。事情变得开朗一些。</p><p>突击学考算是一种比较奇妙的体验吧。当整天整天的摸不到键盘的时候，就会坐不住，开始知道自己已经离不开了。教学楼里有趣的事情倒是不少，少见的感受到了 C 主任的亲民，趁着自习的时候也可以偷着拜读一下渡边先生的大作了。</p><p>去不了 NOIWC 的事情也是早就准备好的，能去 CCPC-Wannafly Winter Camp 算是一个惊喜吧，以大学生的视角看算法竞赛也是一种体验。搞到了自己的域名也算是了了一桩心事，以后颓废的时候可能会开发一下。</p><p>大家都好厉害啊。逐渐发现自己站位有些低，或许该多想想远一些的事情。</p><p>希望新的一年自己能专注一些，注意自律，做些务实的事情。</p>]]></content>
      
      
      <categories>
          
          <category> Thinking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Records of CodeForces Rounds</title>
      <link href="/2019/01/14/codeforces/"/>
      <url>/2019/01/14/codeforces/</url>
      
        <content type="html"><![CDATA[<p>简单记录 CodeForces 上打比赛的排名和 Rating 变化。</p><p>题解和一些细节写到解题报告里了，代码详见 “Solutions” 。</p><p>本篇长期置顶。有问题请联系我，万分感谢。</p><a id="more"></a><h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><p>这里是自己写的一些比赛题解。</p><p>代码可以去 <a href="http://codeforces.com/submissions/SGColin" target="_blank" rel="noopener">My Submissions</a> 找，或者去我的 <a href="https://github.com/SGColin/SGColin.github.io/tree/master/code/codeforces" target="_blank" rel="noopener">代码仓库</a> 看，或者访问：</p><p><code>https://blog.gyx.me/code/codeforces/name.cpp</code> </p><p>在 <code>name</code> 处输入题号就可以了，例如 <code>1100A</code> 的 <a href="https://blog.gyx.me/code/codeforces/1100A.cpp">访问结果</a> 。</p><ul><li><a href="https://blog.gyx.me/papers/codeforces/cf514.pdf">Codeforces Round #514 (Div. 2)</a></li><li><a href="https://blog.gyx.me/papers/codeforces/cf524.pdf">Codeforces Round #524 (Div. 2)</a></li><li><a href="https://blog.gyx.me/papers/codeforces/cf525.pdf">Codeforces Round #525 (Div. 2)</a></li><li><a href="https://blog.gyx.me/papers/codeforces/cf532.pdf">Codeforces Round #532 (Div. 2)</a></li><li><a href="https://blog.gyx.me/papers/codeforces/edu55.pdf">Educational Codeforces Round 55 (Rated for Div. 2)</a></li><li><a href="https://blog.gyx.me/papers/codeforces/edu58.pdf">Educational Codeforces Round 58 (Rated for Div. 2)</a></li></ul><h2 id="Contests-Record"><a href="#Contests-Record" class="headerlink" title="Contests Record"></a>Contests Record</h2><p>只记录赛时的结果，Virtual 的比赛不再记录。</p><p>详细的场次信息以及考场代码可以戳表格里的链接。</p><div class="table-container"><table><thead><tr><th style="text-align:center">Contest</th><th style="text-align:center">Rank</th><th style="text-align:center">Solved</th><th style="text-align:center">Rating Change</th><th style="text-align:center">Level</th></tr></thead><tbody><tr><td style="text-align:center"><a href="http://codeforces.com/contest/1059" target="_blank" rel="noopener">Codeforces Round #514 (Div. 2)</a></td><td style="text-align:center"><a href="http://codeforces.com/contest/1059/standings/participant/20149739#p20149739" target="_blank" rel="noopener">1150</a></td><td style="text-align:center"><a href="http://codeforces.com/submissions/SGColin/contest/1059" target="_blank" rel="noopener">3</a></td><td style="text-align:center">1500 - 1544</td><td style="text-align:center"><font color="#20B2AA">Specialist</font></td></tr><tr><td style="text-align:center"><a href="http://codeforces.com/contest/1064" target="_blank" rel="noopener">Codeforces Round #516 (Div. 2)</a></td><td style="text-align:center"><a href="http://codeforces.com/contest/1064/standings/participant/20382251#p20382251" target="_blank" rel="noopener">181</a></td><td style="text-align:center"><a href="http://codeforces.com/submissions/SGColin/contest/1064" target="_blank" rel="noopener">4</a></td><td style="text-align:center">1544 - 1675</td><td style="text-align:center"><font color="#0000FF">Expert</font></td></tr><tr><td style="text-align:center"><a href="http://codeforces.com/contest/1072" target="_blank" rel="noopener">Codeforces Round #517 (Div. 2)</a></td><td style="text-align:center"><a href="http://codeforces.com/contest/1072/standings/participant/20554215#p20554215" target="_blank" rel="noopener">676</a></td><td style="text-align:center"><a href="http://codeforces.com/submissions/SGColin/contest/1072" target="_blank" rel="noopener">2</a></td><td style="text-align:center">1675 - 1666</td><td style="text-align:center"><font color="#0000FF">Expert</font></td></tr><tr><td style="text-align:center"><a href="http://codeforces.com/contest/1080" target="_blank" rel="noopener">Codeforces Round #524 (Div. 2)</a></td><td style="text-align:center"><a href="http://codeforces.com/contest/1080/standings/participant/21290259#p21290259" target="_blank" rel="noopener">1443</a></td><td style="text-align:center"><a href="http://codeforces.com/submissions/SGColin/contest/1080" target="_blank" rel="noopener">2</a></td><td style="text-align:center">1666 - 1619</td><td style="text-align:center"><font color="#0000FF">Expert</font></td></tr><tr><td style="text-align:center"><a href="http://codeforces.com/contest/1087" target="_blank" rel="noopener"> Codeforces Round #528 (Div. 2)</a></td><td style="text-align:center"><a href="http://codeforces.com/contest/1087/standings/participant/21856836#p21856836" target="_blank" rel="noopener">58</a></td><td style="text-align:center"><a href="http://codeforces.com/submissions/SGColin/contest/1087" target="_blank" rel="noopener">4</a></td><td style="text-align:center">1619 - 1787</td><td style="text-align:center"><font color="#0000FF">Expert</font></td></tr><tr><td style="text-align:center"><a href="http://codeforces.com/contest/1101" target="_blank" rel="noopener">Educational Round 58 (Rated for Div. 2)</a></td><td style="text-align:center"><a href="http://codeforces.com/contest/1101/standings/participant/22276981#p22276981" target="_blank" rel="noopener">1328</a></td><td style="text-align:center"><a href="http://codeforces.com/submissions/SGColin/contest/1101" target="_blank" rel="noopener">3</a></td><td style="text-align:center">1787 - 1751</td><td style="text-align:center"><font color="#0000FF">Expert</font></td></tr><tr><td style="text-align:center"><a href="http://codeforces.com/contest/1100" target="_blank" rel="noopener">Codeforces Round #532 (Div. 2)</a></td><td style="text-align:center"><a href="http://codeforces.com/contest/1100/standings/participant/22329455#p22329455" target="_blank" rel="noopener">19</a></td><td style="text-align:center"><a href="http://codeforces.com/submissions/SGColin/contest/1100" target="_blank" rel="noopener">4</a></td><td style="text-align:center">1751 - 1974</td><td style="text-align:center"><font color="#800080">Candidate Master</font></td></tr><tr><td style="text-align:center"><a href="http://codeforces.com/contest/1137" target="_blank" rel="noopener">Codeforces Round #545 (Div. 1)</a></td><td style="text-align:center"><a href="http://codeforces.com/contest/1137/standings/participant/23581580#p23581580" target="_blank" rel="noopener">377</a></td><td style="text-align:center"><a href="http://codeforces.com/submissions/SGColin/contest/1137" target="_blank" rel="noopener">2</a></td><td style="text-align:center">1974 - 1937</td><td style="text-align:center"><font color="#800080">Candidate Master</font></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solution </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP 2018 Tour</title>
      <link href="/2018/12/08/noip2018/"/>
      <url>/2018/12/08/noip2018/</url>
      
        <content type="html"><![CDATA[<p>按照惯例写一篇游记，以及简要题解。</p><p><strong>谨以此文纪念我高中信息学竞赛的第一次正式考试。</strong></p><p>飞雪连天射白鹿，笑书神侠倚碧鸳。纪念伟大的金庸先生。</p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><a href="">Solution for NOIP 2018</a></p><p>终于在年前把这套题补完了，心情复杂。</p><h2 id="Diary"><a href="#Diary" class="headerlink" title="Diary"></a>Diary</h2><h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day -1"></a>Day -1</h3><p>离考试越近自己越静不下来。</p><p>中午一点到了石家庄站，今年的比赛还是在燕大。</p><p>等车的时候发现不会在虚拟机里编译，慌张地问了一波。</p><p>上火车之后莫名其妙被换座到了1A。颓的时候发现，旁边两位爷开始离线切题太强了。</p><h3 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h3><p>早上起来被教练通知又要考一场模拟赛。T3 只会 60 暴力，然后事后诸葛…</p><p>下午试机。耍无赖苟在那里将近一个小时，最后只是敲了链剖和倍增互拍，还拍挂了慌慌慌。</p><p>晚上学长说注意事项，感觉讲的东西都没听说过。回去之后和 ZH 一起梳理了知识点，感觉不错。</p><p>睡觉的时候外面有跑步和喊叫的声音，以及午夜凶铃。以为是初中的 <del>后来得知是高一学长</del>。</p><h3 id="Day-1-1"><a href="#Day-1-1" class="headerlink" title="Day 1"></a>Day 1</h3><p>今天在燕大 1 机房，座位在前排角落，周围目测是友善的高一学长。</p><p>开题发现<code>i7-8700K</code> 以及 <code>512M</code> ，非常资瓷啊，再也不怕常数大了…</p><p>T1 确认完题意就会做了。 在<code>首尾相接</code> 上纠结了一会，发现样例解释不了环，就放心写了。</p><p>T2 读了两遍题，感觉有点难。玩样例发现选的都是原来就有的数，觉得有些蹊跷。冷静了一下，分情况讨论证明这个结论是对的，然后就得到了排序之后用背包贪心的解法。</p><p>T3 明白了问题模型之后，发现不会找树上一堆链，开始看部分分。发现简单的子任务合起来就有 55 了，于是先写了这些点，解法分别是树的直径，所有边长取最小值，正常的二分答案+验证，以及二分答案+双指针。</p><p>然后上个厕所冷静了一下，回来发现可以用树形DP搞。几次 WA 和 死循环 之后，找了好多反例，高度紧张的状态下在11:40 的时候终于码完了，应该是我人生中第一个考场 200+行吧。测了一发大样例没有 TLE ，肉眼比对第一页没锅，打开<code>cmd</code> ，输入<code>fc track.out track3.ans</code>，显示<code>FC: 找不到差异</code>，突然觉得全世界都清静了。</p><p>下午在宾馆里看板子，晚上十点多就睡了。意外的睡得不错。</p><h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h3><p>今天在燕大 4 机房，座位在正中间，前面是 zyz 后面是 czy ，旁边的老哥看起来不是很友好。</p><p>T1 开始以为是最小字典序拓扑序，写完过不了样例，发现读错题了，应该是是 DFS 序。想起来还没有看数据范围，看完发现是基环树。发现 60 很好写，100 只会平方复杂度，因为用的是邻接矩阵，感觉写起来很麻烦就先撂下了。</p><p>T2 题面太长就先做的 T3 。NOIP 前写过一道题，是 [SDOI2006] 保安站岗 。<strong>我就把边覆盖读成了点覆盖</strong>，十分自信地码完了 44 的暴力，<strong>竟然过了样例</strong>，然后就十分自信地去搞 T2 了。</p><p>T2 明确题意后写了状压路径的 20 暴力，开始找规律。发现和前不久 CodeForces 的 一道 D 题可能有一样的思路，每一条斜线上只要只是一段前缀 1 就合法了，因为每一条斜线上的点在字典序列位置相同。然后推了个公式带进去，发现 n=3,m=3 得到 144 ，而题面上写着 112。</p><p>找了很久没有发现原因，只好把不合法情况打出来，发现两条交错路径就凉了。尝试状压斜线，发现不会转移，只好暴力把 n,m<9 的表打出来算了。打的时候发现对于="" m="">n 的情况，(n,m) 的方案数等于 (n,m-1) 方案数的三倍。发现规律对 n&gt;4 并不适用，就只打了前 65 ，放弃了剩下的 35 。</9></p><p>回去赶 T1 ，思路混乱，发现得把邻接矩阵存改回邻接表。写完发现跑不出来，慌了，把 T1 60 的代码和另外两道题先打了包。到最后都没有调出来，最后收卷的时候头脑一片空白。</p><p>下午去看海，照了合影。我和 Luan 在沙滩上留下了手划出来的字。我写了<code>NEXT YEAR GOTO NOI 2019</code> 。</p><p>返程火车上老师把代码发下来了，交到洛谷上 60+65+0=125 恍恍惚惚，比预想的还要糟糕，没有再和教练说什么。晚上机房泡面，聊天时终于发现自己读错题的事实。</p><h3 id="Day-n"><a href="#Day-n" class="headerlink" title="Day n"></a>Day n</h3><p>几个晚上都在想，如果 Day2T1 码出来，或者 Day2T3 没读错题就能加上四十多。</p><p>民间数据在 HE 大概 rank30+ ，我还是想接着学的啊。</p><p>最后拿到了成绩单，跟洛谷上测出来成绩差不多。</p><p><img src="https://blog.gyx.me/images/noip2018.png" alt=""></p><p>得到了 rank40+ 的尴尬境地，几经折腾可以留下来准备省选了。</p><h2 id="Summaries-and-Flags"><a href="#Summaries-and-Flags" class="headerlink" title="Summaries and Flags"></a>Summaries and Flags</h2><p>稍微多说两句。</p><p>不要期望超常发挥，正常发挥就是最大的幸运。</p><p>心态要平衡，OI 两天的赛制也考验心态。之所以会出现低级错误，就是考场上想得太多。考场上不要想之前考的怎么样，认真做题就是最大的成功。</p><p>后面的学习已经有赌的成分在里面了，立一些 Flag 激励自己。</p><ul><li>少看游记少颓废</li><li>省选阶段模拟赛能搞懂的题都改完写题解</li><li>做掉尽可能多的近 5 年内各地省选题</li><li>把能打的不是猝死场的 CodeForces 都打了，赛后补题解</li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solution </tag>
            
            <tag> Travel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/11/29/hello-world/"/>
      <url>/2018/11/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>不忘初心，方得始终。初心易得，始终难守。</p><p>希望自己能记住为之坚持的东西，记住不掺杂利益的热爱。</p><p>希望自己能学会果断选择，不再踌躇，有拥抱生活的勇气。</p><p>Hello, the lovely world.</p><a id="more"></a><hr><p>优美胜于丑陋 明了胜于晦涩</p><p>简单胜于复杂 复杂胜于杂乱</p><p>扁平胜于嵌套 间隔胜于紧凑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> this</span><br><span class="line">The Zen of Python, by Tim Peters</span><br><span class="line"></span><br><span class="line">Beautiful <span class="keyword">is</span> better than ugly.</span><br><span class="line">Explicit <span class="keyword">is</span> better than implicit.</span><br><span class="line">Simple <span class="keyword">is</span> better than complex.</span><br><span class="line">Complex <span class="keyword">is</span> better than complicated.</span><br><span class="line">Flat <span class="keyword">is</span> better than nested.</span><br><span class="line">Sparse <span class="keyword">is</span> better than dense.</span><br><span class="line">Readability counts.</span><br><span class="line">Special cases aren<span class="string">'t special enough to break the rules.</span></span><br><span class="line"><span class="string">Although practicality beats purity.</span></span><br><span class="line"><span class="string">Errors should never pass silently.</span></span><br><span class="line"><span class="string">Unless explicitly silenced.</span></span><br><span class="line"><span class="string">In the face of ambiguity, refuse the temptation to guess.</span></span><br><span class="line"><span class="string">There should be one-- and preferably only one --obvious way to do it.</span></span><br><span class="line"><span class="string">Although that way may not be obvious at first unless you'</span>re Dutch.</span><br><span class="line">Now <span class="keyword">is</span> better than never.</span><br><span class="line">Although never <span class="keyword">is</span> often better than *right* now.</span><br><span class="line">If the implementation <span class="keyword">is</span> hard to explain, it<span class="string">'s a bad idea.</span></span><br><span class="line"><span class="string">If the implementation is easy to explain, it may be a good idea.</span></span><br><span class="line"><span class="string">Namespaces are one honking great idea -- let'</span>s do more of those!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Thinking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
